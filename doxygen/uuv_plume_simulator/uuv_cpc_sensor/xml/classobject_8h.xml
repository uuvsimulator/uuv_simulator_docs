<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classobject_8h" kind="file" language="C++">
    <compoundname>classobject.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="2836">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="2837">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="2839">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="2834">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2835" relation="include">
        </childnode>
        <childnode refid="2837" relation="include">
        </childnode>
        <childnode refid="2838" relation="include">
        </childnode>
        <childnode refid="2839" relation="include">
        </childnode>
        <childnode refid="2840" relation="include">
        </childnode>
      </node>
      <node id="2840">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="2833">
        <label>/usr/include/python3.6m/classobject.h</label>
        <link refid="classobject_8h"/>
        <childnode refid="2834" relation="include">
        </childnode>
      </node>
      <node id="2835">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2836" relation="include">
        </childnode>
      </node>
      <node id="2838">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_method_object" prot="public">PyMethodObject</innerclass>
    <innerclass refid="struct_py_instance_method_object" prot="public">PyInstanceMethodObject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="classobject_8h_1a416dc8cba4ea7a93cec5b02a63fa78f9" prot="public" static="no">
        <name>PyMethod_Check</name>
        <param><defname>op</defname></param>
        <initializer>((op)-&gt;ob_type == &amp;PyMethod_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="21" column="9" bodyfile="/usr/include/python3.6m/classobject.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="classobject_8h_1a6194904d6c037fdd5abc712129c82495" prot="public" static="no">
        <name>PyMethod_GET_FUNCTION</name>
        <param><defname>meth</defname></param>
        <initializer>(((<ref refid="struct_py_method_object" kindref="compound">PyMethodObject</ref> *)meth) -&gt; im_func)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="30" column="9" bodyfile="/usr/include/python3.6m/classobject.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="classobject_8h_1a7d13ba295e5e7e63f65e11b34648370f" prot="public" static="no">
        <name>PyMethod_GET_SELF</name>
        <param><defname>meth</defname></param>
        <initializer>(((<ref refid="struct_py_method_object" kindref="compound">PyMethodObject</ref> *)meth) -&gt; im_self)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="32" column="9" bodyfile="/usr/include/python3.6m/classobject.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="classobject_8h_1a27eeb8719bb3c5792454eb97e5c6f028" prot="public" static="no">
        <name>PyInstanceMethod_Check</name>
        <param><defname>op</defname></param>
        <initializer>((op)-&gt;ob_type == &amp;PyInstanceMethod_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="44" column="9" bodyfile="/usr/include/python3.6m/classobject.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="classobject_8h_1aa6ce0f1972799e3b5823fd269a8af047" prot="public" static="no">
        <name>PyInstanceMethod_GET_FUNCTION</name>
        <param><defname>meth</defname></param>
        <initializer>(((<ref refid="struct_py_instance_method_object" kindref="compound">PyInstanceMethodObject</ref> *)meth) -&gt; func)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="51" column="9" bodyfile="/usr/include/python3.6m/classobject.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="classobject_8h_1a42b8c536057f8ac317d71d3371bff8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyMethod_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classobject_8h_1ad1238967dbadf6465c0b5586974527f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyMethod_New(PyObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classobject_8h_1a442d6d182cc0549788c9933ceea49fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyMethod_ClearFreeList(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/classobject.h" line="35" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Former<sp/>class<sp/>object<sp/>interface<sp/>--<sp/>now<sp/>only<sp/>bound<sp/>methods<sp/>are<sp/>here<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Revealing<sp/>some<sp/>structures<sp/>(not<sp/>for<sp/>general<sp/>use)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_CLASSOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_CLASSOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="struct_py_method_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*im_func;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>callable<sp/>object<sp/>implementing<sp/>the<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*im_self;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>instance<sp/>it<sp/>is<sp/>bound<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*im_weakreflist;<sp/></highlight><highlight class="comment">/*<sp/>List<sp/>of<sp/>weak<sp/>references<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">}<sp/><ref refid="struct_py_method_object" kindref="compound">PyMethodObject</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyMethod_Type;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMethod_Check(op)<sp/>((op)-&gt;ob_type<sp/>==<sp/>&amp;PyMethod_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMethod_New(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMethod_Function(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMethod_Self(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>for<sp/>direct<sp/>access<sp/>to<sp/>these<sp/>values.<sp/>Type<sp/>checks<sp/>are<sp/>*not*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>done,<sp/>so<sp/>use<sp/>with<sp/>care.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMethod_GET_FUNCTION(meth)<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((PyMethodObject<sp/>*)meth)<sp/>-&gt;<sp/>im_func)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMethod_GET_SELF(meth)<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((PyMethodObject<sp/>*)meth)<sp/>-&gt;<sp/>im_self)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyMethod_ClearFreeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="struct_py_instance_method_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/><ref refid="struct_py_instance_method_object" kindref="compound">PyInstanceMethodObject</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyInstanceMethod_Type;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyInstanceMethod_Check(op)<sp/>((op)-&gt;ob_type<sp/>==<sp/>&amp;PyInstanceMethod_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyInstanceMethod_New(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyInstanceMethod_Function(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>for<sp/>direct<sp/>access<sp/>to<sp/>these<sp/>values.<sp/>Type<sp/>checks<sp/>are<sp/>*not*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>done,<sp/>so<sp/>use<sp/>with<sp/>care.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyInstanceMethod_GET_FUNCTION(meth)<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((PyInstanceMethodObject<sp/>*)meth)<sp/>-&gt;<sp/>func)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_CLASSOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/classobject.h"/>
  </compounddef>
</doxygen>
