<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pytime_8h" kind="file" language="C++">
    <compoundname>pytime.h</compoundname>
    <includes refid="pyconfig_8h" local="yes">pyconfig.h</includes>
    <includes refid="object_8h" local="yes">object.h</includes>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <incdepgraph>
      <node id="3701">
        <label>object.h</label>
        <link refid="object_8h_source"/>
      </node>
      <node id="3699">
        <label>/usr/include/python3.6m/pytime.h</label>
        <link refid="pytime_8h"/>
        <childnode refid="3700" relation="include">
        </childnode>
        <childnode refid="3701" relation="include">
        </childnode>
      </node>
      <node id="3700">
        <label>pyconfig.h</label>
        <link refid="pyconfig_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3705">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3706">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3702">
        <label>/usr/include/python3.6m/pytime.h</label>
        <link refid="pytime_8h"/>
        <childnode refid="3703" relation="include">
        </childnode>
      </node>
      <node id="3708">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3703">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3704" relation="include">
        </childnode>
        <childnode refid="3706" relation="include">
        </childnode>
        <childnode refid="3707" relation="include">
        </childnode>
        <childnode refid="3708" relation="include">
        </childnode>
        <childnode refid="3709" relation="include">
        </childnode>
      </node>
      <node id="3709">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3704">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3705" relation="include">
        </childnode>
      </node>
      <node id="3707">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct___py__clock__info__t" prot="public">_Py_clock_info_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pytime_8h_1a74dd8f25d61a0cb67d437af57216e95f" prot="public" static="no">
        <name>_PyTime_MIN</name>
        <initializer>PY_LLONG_MIN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="20" column="9" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pytime_8h_1a774b27906288ff859ed7eb7b86843c67" prot="public" static="no">
        <name>_PyTime_MAX</name>
        <initializer>PY_LLONG_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="21" column="9" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pytime_8h_1ad9aefcf6762cb07ea4130e6cdef71228" prot="public" static="no">
        <name>_PYTIME_FROMSECONDS</name>
        <param><defname>seconds</defname></param>
        <initializer>((_PyTime_t)(seconds) * (1000 * 1000 * 1000))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="84" column="9" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2" prot="public" static="no">
        <name>_PyTime_round_t</name>
        <enumvalue id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2ad0e98d1b5924f57180034ec60fcd72b1" prot="public">
          <name>_PyTime_ROUND_FLOOR</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2a8fa6573b6630b0b536fb26d0b9d881ca" prot="public">
          <name>_PyTime_ROUND_CEILING</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2ab39dc9e215ced39e9fd7584966d4406e" prot="public">
          <name>_PyTime_ROUND_HALF_EVEN</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2a87b4081a13e24f1d3fb0b3484b4aa259" prot="public">
          <name>_PyTime_ROUND_UP</name>
          <initializer>=3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2ad853b82e6d65b1e121dfee48ea4cdbc2" prot="public">
          <name>_PyTime_ROUND_TIMEOUT</name>
          <initializer>= _PyTime_ROUND_UP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="23" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="23" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pytime_8h_1adadbab23f0263d23f524274de48c34de" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t _PyTime_t</definition>
        <argsstring></argsstring>
        <name>_PyTime_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="19" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pytime_8h_1a59edbaa8b9aa0356323cbe1992a543c1" prot="public" static="no" mutable="no">
        <type>time_t *</type>
        <definition>time_t * sec</definition>
        <argsstring></argsstring>
        <name>sec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="57" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a7543c6b628da31e8f28d7e0e0a8988a2" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t long _PyTime_round_t</definition>
        <argsstring></argsstring>
        <name>_PyTime_round_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="58" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a4ce2070b31babbc650fc4b98f21ef131" prot="public" static="no" mutable="no">
        <type>time_t long *</type>
        <definition>time_t long* usec</definition>
        <argsstring></argsstring>
        <name>usec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="66" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a9385d701d594f116cfd55a1272eeeaf4" prot="public" static="no" mutable="no">
        <type>time_t long *</type>
        <definition>time_t long* nsec</definition>
        <argsstring></argsstring>
        <name>nsec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="75" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1aaa12580403a2cc24c96324b4c5715889" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="93" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a4575fc59a800838007f1bcc6a7616841" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> _PyTime_round_t</type>
        <definition>time_t int _PyTime_round_t round</definition>
        <argsstring></argsstring>
        <name>round</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="94" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a74c9a35092b9fecdf2c4b09ee7ac2ddd" prot="public" static="no" mutable="no">
        <type>struct timeval *</type>
        <definition>struct timeval * tv</definition>
        <argsstring></argsstring>
        <name>tv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="122" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1aa087562defe0b84529d3bfc93efb31bc" prot="public" static="no" mutable="no">
        <type>time_t *</type>
        <definition>time_t* secs</definition>
        <argsstring></argsstring>
        <name>secs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="138" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a81e758d80fce612c56f030b00828cf2d" prot="public" static="no" mutable="no">
        <type>time_t int *</type>
        <definition>time_t int* us</definition>
        <argsstring></argsstring>
        <name>us</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="139" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a34642418fa09e972671cdee2e6689ae3" prot="public" static="no" mutable="no">
        <type><ref refid="struct___py__clock__info__t" kindref="compound">_Py_clock_info_t</ref> *</type>
        <definition>_Py_clock_info_t * info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="179" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pytime_8h_1a779ff21f60f1f27c431aecfee3522bba" prot="public" static="no" mutable="no">
        <type>struct tm *</type>
        <definition>struct tm * tm</definition>
        <argsstring></argsstring>
        <name>tm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="200" column="1" bodyfile="/usr/include/python3.6m/pytime.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pytime_8h_1aa6e34963897c13dd3606f10c22cb7b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) _PyLong_FromTime_t(time_t sec)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pytime_8h_1a5740b210e292debc05184925dde28642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(time_t) _PyLong_AsTime_t(PyObject *obj)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>time_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pytime_8h_1a18c0f3b3436dd76f90b3f837a53f93b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) _PyTime_ObjectToTime_t(PyObject *obj</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pytime_8h_1ae235a26f0172cdea212df83c5aaeba74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(_PyTime_t) _PyTime_FromSeconds(int seconds)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>_PyTime_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pytime_8h_1a393f767278a3f18bbbf830d7e8980ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(double) _PyTime_AsSecondsDouble(_PyTime_t t)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pytime.h" line="103" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_PYTIME_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_PYTIME_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pyconfig.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>include<sp/>for<sp/>defines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment">Symbols<sp/>and<sp/>macros<sp/>to<sp/>supply<sp/>platform-independent<sp/>interfaces<sp/>to<sp/>time<sp/>related</highlight></codeline>
<codeline lineno="10"><highlight class="comment">functions<sp/>and<sp/>constants</highlight></codeline>
<codeline lineno="11"><highlight class="comment">**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>_PyTime_t:<sp/>Python<sp/>timestamp<sp/>with<sp/>subsecond<sp/>precision.<sp/>It<sp/>can<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>store<sp/>a<sp/>duration,<sp/>and<sp/>so<sp/>indirectly<sp/>a<sp/>date<sp/>(related<sp/>to<sp/>another<sp/>date,<sp/>like</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>UNIX<sp/>epoch).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/>_PyTime_t;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyTime_MIN<sp/>PY_LLONG_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyTime_MAX<sp/>PY_LLONG_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>towards<sp/>minus<sp/>infinity<sp/>(-inf).</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>used<sp/>to<sp/>read<sp/>a<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_ROUND_FLOOR=0,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>towards<sp/>infinity<sp/>(+inf).</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>used<sp/>for<sp/>timeout<sp/>to<sp/>wait<sp/>&quot;at<sp/>least&quot;<sp/>N<sp/>seconds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_ROUND_CEILING=1,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>to<sp/>nearest<sp/>with<sp/>ties<sp/>going<sp/>to<sp/>nearest<sp/>even<sp/>integer.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>used<sp/>to<sp/>round<sp/>from<sp/>a<sp/>Python<sp/>float.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_ROUND_HALF_EVEN=2,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round<sp/>away<sp/>from<sp/>zero</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>used<sp/>for<sp/>timeout.<sp/>_PyTime_ROUND_CEILING<sp/>rounds</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1e-9<sp/>to<sp/>0<sp/>milliseconds<sp/>which<sp/>causes<sp/>bpo-31786<sp/>issue.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyTime_ROUND_UP<sp/>rounds<sp/>-1e-9<sp/>to<sp/>-1<sp/>millisecond<sp/>which<sp/>keeps</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>timeout<sp/>sign<sp/>as<sp/>expected.<sp/>select.poll(timeout)<sp/>must<sp/>block</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>negative<sp/>values.&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_ROUND_UP=3,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>_PyTime_ROUND_TIMEOUT<sp/>(an<sp/>alias<sp/>for<sp/>_PyTime_ROUND_UP)<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>for<sp/>timeouts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_ROUND_TIMEOUT<sp/>=<sp/>_PyTime_ROUND_UP</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/>_PyTime_round_t;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>time_t<sp/>to<sp/>a<sp/>PyLong.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyLong_FromTime_t(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>sec);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>PyLong<sp/>to<sp/>a<sp/>time_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">PyAPI_FUNC(time_t)<sp/>_PyLong_AsTime_t(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>number<sp/>of<sp/>seconds,<sp/>int<sp/>or<sp/>float,<sp/>to<sp/>time_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_ObjectToTime_t(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>*sec,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>number<sp/>of<sp/>seconds,<sp/>int<sp/>or<sp/>float,<sp/>to<sp/>a<sp/>timeval<sp/>structure.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>usec<sp/>is<sp/>in<sp/>the<sp/>range<sp/>[0;<sp/>999999]<sp/>and<sp/>rounded<sp/>towards<sp/>zero.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>For<sp/>example,<sp/>-1.2<sp/>is<sp/>converted<sp/>to<sp/>(-2,<sp/>800000).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_ObjectToTimeval(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>*sec,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*usec,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>number<sp/>of<sp/>seconds,<sp/>int<sp/>or<sp/>float,<sp/>to<sp/>a<sp/>timespec<sp/>structure.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>nsec<sp/>is<sp/>in<sp/>the<sp/>range<sp/>[0;<sp/>999999999]<sp/>and<sp/>rounded<sp/>towards<sp/>zero.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>For<sp/>example,<sp/>-1.2<sp/>is<sp/>converted<sp/>to<sp/>(-2,<sp/>800000000).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_ObjectToTimespec(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>*sec,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*nsec,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>timestamp<sp/>from<sp/>a<sp/>number<sp/>of<sp/>seconds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_FromSeconds(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seconds);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>to<sp/>create<sp/>a<sp/>timestamp<sp/>from<sp/>a<sp/>number<sp/>of<sp/>seconds,<sp/>no<sp/>integer<sp/>overflow.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>Only<sp/>use<sp/>the<sp/>macro<sp/>for<sp/>small<sp/>values,<sp/>prefer<sp/>_PyTime_FromSeconds().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PYTIME_FROMSECONDS(seconds)<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((_PyTime_t)(seconds)<sp/>*<sp/>(1000<sp/>*<sp/>1000<sp/>*<sp/>1000))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>timestamp<sp/>from<sp/>a<sp/>number<sp/>of<sp/>nanoseconds.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_FromNanoseconds(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ns);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>number<sp/>of<sp/>seconds<sp/>(Python<sp/>float<sp/>or<sp/>int)<sp/>to<sp/>a<sp/>timetamp.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error,<sp/>return<sp/>0<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_FromSecondsObject(_PyTime_t<sp/>*t,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>number<sp/>of<sp/>milliseconds<sp/>(Python<sp/>float<sp/>or<sp/>int,<sp/>10^-3)<sp/>to<sp/>a<sp/>timetamp.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error,<sp/>return<sp/>0<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_FromMillisecondsObject(_PyTime_t<sp/>*t,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>timestamp<sp/>to<sp/>a<sp/>number<sp/>of<sp/>seconds<sp/>as<sp/>a<sp/>C<sp/>double.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>_PyTime_AsSecondsDouble(_PyTime_t<sp/>t);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>timestamp<sp/>to<sp/>a<sp/>number<sp/>of<sp/>milliseconds<sp/>(10^-3<sp/>seconds).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_AsMilliseconds(_PyTime_t<sp/>t,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>timestamp<sp/>to<sp/>a<sp/>number<sp/>of<sp/>microseconds<sp/>(10^-6<sp/>seconds).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_AsMicroseconds(_PyTime_t<sp/>t,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>timestamp<sp/>to<sp/>a<sp/>number<sp/>of<sp/>nanoseconds<sp/>(10^-9<sp/>seconds)<sp/>as<sp/>a<sp/>Python<sp/>int</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyTime_AsNanosecondsObject(_PyTime_t<sp/>t);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>timestamp<sp/>to<sp/>a<sp/>timeval<sp/>structure<sp/>(microsecond<sp/>resolution).</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>tv_usec<sp/>is<sp/>always<sp/>positive.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>if<sp/>the<sp/>conversion<sp/>overflowed,</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_AsTimeval(_PyTime_t<sp/>t,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>*tv,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>_PyTime_AsTimeval(),<sp/>but<sp/>don&apos;t<sp/>raise<sp/>an<sp/>exception<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_AsTimeval_noraise(_PyTime_t<sp/>t,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timeval<sp/>*tv,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>timestamp<sp/>to<sp/>a<sp/>number<sp/>of<sp/>seconds<sp/>(secs)<sp/>and<sp/>microseconds<sp/>(us).</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>us<sp/>is<sp/>always<sp/>positive.<sp/>This<sp/>function<sp/>is<sp/>similar<sp/>to<sp/>_PyTime_AsTimeval()</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>except<sp/>that<sp/>secs<sp/>is<sp/>always<sp/>a<sp/>time_t<sp/>type,<sp/>whereas<sp/>the<sp/>timeval<sp/>structure</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>uses<sp/>a<sp/>C<sp/>long<sp/>for<sp/>tv_sec<sp/>on<sp/>Windows.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>if<sp/>the<sp/>conversion<sp/>overflowed,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_AsTimevalTime_t(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_t<sp/>t,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>*secs,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*us,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_round_t<sp/>round);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HAVE_CLOCK_GETTIME)<sp/>||<sp/>defined(HAVE_KQUEUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>a<sp/>timestamp<sp/>to<sp/>a<sp/>timespec<sp/>structure<sp/>(nanosecond<sp/>resolution).</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>tv_nsec<sp/>is<sp/>always<sp/>positive.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error,<sp/>return<sp/>0<sp/>on<sp/>success.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_AsTimespec(_PyTime_t<sp/>t,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*ts);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>current<sp/>time<sp/>from<sp/>the<sp/>system<sp/>clock.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>The<sp/>function<sp/>cannot<sp/>fail.<sp/>_PyTime_Init()<sp/>ensures<sp/>that<sp/>the<sp/>system<sp/>clock</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>works.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_GetSystemClock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>time<sp/>of<sp/>a<sp/>monotonic<sp/>clock,<sp/>i.e.<sp/>a<sp/>clock<sp/>that<sp/>cannot<sp/>go<sp/>backwards.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>The<sp/>clock<sp/>is<sp/>not<sp/>affected<sp/>by<sp/>system<sp/>clock<sp/>updates.<sp/>The<sp/>reference<sp/>point<sp/>of</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>the<sp/>returned<sp/>value<sp/>is<sp/>undefined,<sp/>so<sp/>that<sp/>only<sp/>the<sp/>difference<sp/>between<sp/>the</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/>results<sp/>of<sp/>consecutive<sp/>calls<sp/>is<sp/>valid.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>The<sp/>function<sp/>cannot<sp/>fail.<sp/>_PyTime_Init()<sp/>ensures<sp/>that<sp/>a<sp/>monotonic<sp/>clock</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>is<sp/>available<sp/>and<sp/>works.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">PyAPI_FUNC(_PyTime_t)<sp/>_PyTime_GetMonotonicClock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Structure<sp/>used<sp/>by<sp/>time.get_clock_info()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="struct___py__clock__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*implementation;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>monotonic;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adjustable;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resolution;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><ref refid="struct___py__clock__info__t" kindref="compound">_Py_clock_info_t</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>current<sp/>time<sp/>from<sp/>the<sp/>system<sp/>clock.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>Fill<sp/>clock<sp/>information<sp/>if<sp/>info<sp/>is<sp/>not<sp/>NULL.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error,<sp/>return<sp/>0<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_GetSystemClockWithInfo(</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_t<sp/>*t,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py__clock__info__t" kindref="compound">_Py_clock_info_t</ref><sp/>*info);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>time<sp/>of<sp/>a<sp/>monotonic<sp/>clock,<sp/>i.e.<sp/>a<sp/>clock<sp/>that<sp/>cannot<sp/>go<sp/>backwards.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/>The<sp/>clock<sp/>is<sp/>not<sp/>affected<sp/>by<sp/>system<sp/>clock<sp/>updates.<sp/>The<sp/>reference<sp/>point<sp/>of</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/>the<sp/>returned<sp/>value<sp/>is<sp/>undefined,<sp/>so<sp/>that<sp/>only<sp/>the<sp/>difference<sp/>between<sp/>the</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/>results<sp/>of<sp/>consecutive<sp/>calls<sp/>is<sp/>valid.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/>Fill<sp/>info<sp/>(if<sp/>set)<sp/>with<sp/>information<sp/>of<sp/>the<sp/>function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>time.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_GetMonotonicClockWithInfo(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyTime_t<sp/>*t,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py__clock__info__t" kindref="compound">_Py_clock_info_t</ref><sp/>*info);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>time.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_Init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Converts<sp/>a<sp/>timestamp<sp/>to<sp/>the<sp/>Gregorian<sp/>time,<sp/>using<sp/>the<sp/>local<sp/>time<sp/>zone.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_localtime(time_t<sp/>t,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm<sp/>*tm);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Converts<sp/>a<sp/>timestamp<sp/>to<sp/>the<sp/>Gregorian<sp/>time,<sp/>assuming<sp/>UTC.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTime_gmtime(time_t<sp/>t,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>tm<sp/>*tm);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_PYTIME_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/pytime.h"/>
  </compounddef>
</doxygen>
