<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="abstract_8h" kind="file" language="C++">
    <compoundname>abstract.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="2759">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="2756">
        <label>/usr/include/python3.6m/abstract.h</label>
        <link refid="abstract_8h"/>
        <childnode refid="2757" relation="include">
        </childnode>
      </node>
      <node id="2760">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="2762">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="2757">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2758" relation="include">
        </childnode>
        <childnode refid="2760" relation="include">
        </childnode>
        <childnode refid="2761" relation="include">
        </childnode>
        <childnode refid="2762" relation="include">
        </childnode>
        <childnode refid="2763" relation="include">
        </childnode>
      </node>
      <node id="2763">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="2758">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2759" relation="include">
        </childnode>
      </node>
      <node id="2761">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="abstract_8h_1a2764054082667528e20e9c6c706e2984" prot="public" static="no">
        <name>PyObject_DelAttrString</name>
        <param><defname>O</defname></param>
        <param><defname>A</defname></param>
        <initializer>PyObject_SetAttrString((O),(A),NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="221" column="10" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a5199728e3f2049f536d3fc4633ca9464" prot="public" static="no">
        <name>PyObject_DelAttr</name>
        <param><defname>O</defname></param>
        <param><defname>A</defname></param>
        <initializer>PyObject_SetAttr((O),(A),NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="232" column="10" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a2cc09379d704b631bb073d27ec322916" prot="public" static="no">
        <name>_PyObject_FastCall</name>
        <param><defname>func</defname></param>
        <param><defname>args</defname></param>
        <param><defname>nargs</defname></param>
        <initializer>_PyObject_FastCallDict((func), (args), (nargs), NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="345" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a8c6e45eec8442eea899efadb5bcc0020" prot="public" static="no">
        <name>_PyObject_CallNoArg</name>
        <param><defname>func</defname></param>
        <initializer>_PyObject_FastCall((func), NULL, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="348" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a9b1d81b56cc15553d76e45535b570a54" prot="public" static="no">
        <name>_PyObject_CallArg1</name>
        <param><defname>func</defname></param>
        <param><defname>arg</defname></param>
        <initializer>_PyObject_FastCall((func), &amp;(arg), 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="351" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1adcbcabb9470b473270b3569aa2dfbe57" prot="public" static="no">
        <name>PyObject_Length</name>
        <initializer>PyObject_Size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="502" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1af8e7fbbbb462979d88a5ae0c705bf049" prot="public" static="no">
        <name>PyObject_CheckBuffer</name>
        <param><defname>obj</defname></param>
        <initializer>(((obj)-&gt;ob_type-&gt;tp_as_buffer != NULL) &amp;&amp;  \
     ((obj)-&gt;ob_type-&gt;tp_as_buffer-&gt;bf_getbuffer != NULL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="607" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1ad4e63ad96d4f420df54cd0b490f1460f" prot="public" static="no">
        <name>PyIter_Check</name>
        <param><defname>obj</defname></param>
        <initializer>((obj)-&gt;ob_type-&gt;tp_iternext != NULL &amp;&amp; \
     (obj)-&gt;ob_type-&gt;tp_iternext != &amp;_PyObject_NextNotImplemented)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="711" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1af92da6b6f059f21e83843b88b079877e" prot="public" static="no">
        <name>PyIndex_Check</name>
        <param><defname>obj</defname></param>
        <initializer>((obj)-&gt;ob_type-&gt;tp_as_number != NULL &amp;&amp; \
    (obj)-&gt;ob_type-&gt;tp_as_number-&gt;nb_index != NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="874" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1af456800fffb9600b9a9717b1d20bd1b2" prot="public" static="no">
        <name>PySequence_Length</name>
        <initializer>PySequence_Size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1051" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a55af8e390217c2701c3228130c9453b4" prot="public" static="no">
        <name>PySequence_Fast_GET_SIZE</name>
        <param><defname>o</defname></param>
        <initializer>(PyList_Check(o) ? PyList_GET_SIZE(o) : PyTuple_GET_SIZE(o))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1142" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a9a2ca0b1a0349e849ac532022a9bccd1" prot="public" static="no">
        <name>PySequence_Fast_GET_ITEM</name>
        <param><defname>o</defname></param>
        <param><defname>i</defname></param>
        <initializer>(PyList_Check(o) ? PyList_GET_ITEM(o, i) : PyTuple_GET_ITEM(o, i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1149" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1abbaf3d445e1a7a9cb158fc89a0f63a4c" prot="public" static="no">
        <name>PySequence_ITEM</name>
        <param><defname>o</defname></param>
        <param><defname>i</defname></param>
        <initializer>( Py_TYPE(o)-&gt;tp_as_sequence-&gt;sq_item(o, i) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1156" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1aeba5bfeb80a7e0176480a33b8732d8fa" prot="public" static="no">
        <name>PySequence_Fast_ITEMS</name>
        <param><defname>sf</defname></param>
        <initializer>(PyList_Check(sf) ? ((<ref refid="struct_py_list_object" kindref="compound">PyListObject</ref> *)(sf))-&gt;ob_item \
                      : ((<ref refid="struct_py_tuple_object" kindref="compound">PyTupleObject</ref> *)(sf))-&gt;ob_item)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1162" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a17b27dd4aba4d3fa15eee50f821b0cc1" prot="public" static="no">
        <name>PY_ITERSEARCH_COUNT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1184" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a76a247a9292cb5d10751ccfe67f4578a" prot="public" static="no">
        <name>PY_ITERSEARCH_INDEX</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1185" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a437c12eb95c08671495de1fa6e7f2bb7" prot="public" static="no">
        <name>PY_ITERSEARCH_CONTAINS</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1186" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a7fcf7b7140ec5cae0ce3f9f4886fcdf8" prot="public" static="no">
        <name>PySequence_In</name>
        <initializer>PySequence_Contains</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1206" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a445e6ed47c9fb0f33d7357988d651eca" prot="public" static="no">
        <name>PyMapping_Length</name>
        <initializer>PyMapping_Size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1264" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1ad35852a17ea32482d1304241d61323ed" prot="public" static="no">
        <name>PyMapping_DelItemString</name>
        <param><defname>O</defname></param>
        <param><defname>K</defname></param>
        <initializer>PyObject_DelItemString((O),(K))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1275" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="abstract_8h_1a3b4a2ccad27eb9b800958e7180f560fa" prot="public" static="no">
        <name>PyMapping_DelItem</name>
        <param><defname>O</defname></param>
        <param><defname>K</defname></param>
        <initializer>PyObject_DelItem((O),(K))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1285" column="9" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1285" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="abstract_8h_1af45a903b674dc99af91d19ea08bb386d" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="269" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1af9b7c15aba07de37b54afe0c777312ff" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject PyObject * kwargs</definition>
        <argsstring></argsstring>
        <name>kwargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="269" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1ae41a7f26a057e9cc3ebebb8a9cf5c1ab" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>PyObject Py_ssize_t nargs</definition>
        <argsstring></argsstring>
        <name>nargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="280" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1abe8d99b12eae5c752a218470b1de1c68" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject Py_ssize_t PyObject * kwnames</definition>
        <argsstring></argsstring>
        <name>kwnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="291" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a77cbc289833038334ea1961ec7333440" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> ***</type>
        <definition>Py_ssize_t PyObject PyObject*** p_stack</definition>
        <argsstring></argsstring>
        <name>p_stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="308" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a21d9a3f9012c50bb2976e61cd2743fdd" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> **</type>
        <definition>Py_ssize_t PyObject PyObject PyObject** p_kwnames</definition>
        <argsstring></argsstring>
        <name>p_kwnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="309" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a5fabfbc284db1abe0c8ae6d70c7e60be" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="355" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a1afa4706670311583a49414e40b5d3ca" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="359" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a80ce110ba6065e63a4ae6b1eb693b1f9" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> const char *</type>
        <definition>PyObject const char* where</definition>
        <argsstring></argsstring>
        <name>where</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="360" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1acf743ec651a4abb56a07ce8466721334" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char int const char PyObject const char * format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="375" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1aaed5cdb43058998d98872d52fdfdc0a0" prot="public" static="no" mutable="no">
        <type>const char const char *</type>
        <definition>const char const char const char _Py_Identifier const char const char const char const char _Py_Identifier const char PyObject struct _Py_Identifier * method</definition>
        <argsstring></argsstring>
        <name>method</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="388" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1afcd1706c9144e6d6eee6127661ae3be2" prot="public" static="no" mutable="no">
        <type>const char const char const char <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> const char const char const char *</type>
        <definition>const char * name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="415" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a3655899f66ca98255b47208712b31518" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="506" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1ae8c64b03e117dc23bbe25b3ba27010c5" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="515" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1adf9c470e5c5fb926bc8bca146f039389" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>Py_ssize_t Py_ssize_t PyObject * v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="523" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a3fba251f9af620f78f3c161d5d525d1c" prot="public" static="no" mutable="no">
        <type>const char **</type>
        <definition>Py_UCS4 * buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="553" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a304b5f517dec06a67d91a5c9ac1dbf07" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t *</type>
        <definition>void Py_ssize_t * buffer_len</definition>
        <argsstring></argsstring>
        <name>buffer_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="554" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1acf20161ba2eafe657cb45d60dafefb51" prot="public" static="no" mutable="no">
        <type><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref> *</type>
        <definition>Py_buffer * view</definition>
        <argsstring></argsstring>
        <name>view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="614" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1adc7acdee5fae42266b2af6aa453c7cae" prot="public" static="no" mutable="no">
        <type><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref> int</type>
        <definition>PyObject int PyCompilerFlags * flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="615" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1afd3ad3f4c7aa3c20632acd51cb8b32f4" prot="public" static="no" mutable="no">
        <type>Py_ssize_t *</type>
        <definition>Py_ssize_t* indices</definition>
        <argsstring></argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="624" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a105904f12146f0a02731076cfd0ea6e5" prot="public" static="no" mutable="no">
        <type><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref> Py_ssize_t</type>
        <definition>Py_ssize_t len</definition>
        <argsstring></argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="639" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a04bf7da7e9829f441966e05a9c70f867" prot="public" static="no" mutable="no">
        <type><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref> Py_ssize_t char</type>
        <definition>void Py_ssize_t char order</definition>
        <argsstring></argsstring>
        <name>order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="639" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a5dad3fc0ba35b1488dab18c6dbe49006" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>const void * buf</definition>
        <argsstring></argsstring>
        <name>buf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="641" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a621a32e8b783a69481c248adfbb4bd18" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* src</definition>
        <argsstring></argsstring>
        <name>src</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="661" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1af775c79d0c394d03d4e50c96e575f6c0" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>Py_ssize_t Py_ssize_t int char fort</definition>
        <argsstring></argsstring>
        <name>fort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="666" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1aa30a150670a6aaebe0bf9bcf91b00b35" prot="public" static="no" mutable="no">
        <type>Py_ssize_t *</type>
        <definition>Py_ssize_t const Py_ssize_t * shape</definition>
        <argsstring></argsstring>
        <name>shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="670" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a2c9ceb1400adafa699abdd0980d75329" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t *</type>
        <definition>Py_ssize_t Py_ssize_t* strides</definition>
        <argsstring></argsstring>
        <name>strides</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="671" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a8750210858992780a1ee59b79b178f4d" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t int</type>
        <definition>Py_ssize_t Py_ssize_t int itemsize</definition>
        <argsstring></argsstring>
        <name>itemsize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="672" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a70a0763575096c5545f2232a32ec302a" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* o</definition>
        <argsstring></argsstring>
        <name>o</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="681" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1ade5dcb4690dedd5793822a0586829b33" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> void Py_ssize_t int</type>
        <definition>PyObject void Py_ssize_t int readonly</definition>
        <argsstring></argsstring>
        <name>readonly</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="682" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1adbf8495b446812961074be83300220bc" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* format_spec</definition>
        <argsstring></argsstring>
        <name>format_spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="698" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a7b4487898324e6613a4b668ef627f9da" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * o2</definition>
        <argsstring></argsstring>
        <name>o2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="732" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a720d2f128e06c8ae3f449bbcf0f1d4df" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject * o3</definition>
        <argsstring></argsstring>
        <name>o3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="796" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a5b3a002558aa7b1ffafe3f2901fe73c8" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>int exc</definition>
        <argsstring></argsstring>
        <name>exc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="885" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1abc234574d622d8b5d92d80ccd0a754f8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>const char PyObject * base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1022" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a5234c6e74eb089daa23c2bb457128328" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>const void size_t count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1062" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a13235ab5ddf5c2ccd5ca35ab01d91328" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1070" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a068c745e5dec3cec1d185b97e0643cd9" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t i1</definition>
        <argsstring></argsstring>
        <name>i1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1077" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a72b73833b8fb685f72548313c7c62951" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t Py_ssize_t i2</definition>
        <argsstring></argsstring>
        <name>i2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1077" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a213e0c90a28e88439f55318b8b29eaad" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* m</definition>
        <argsstring></argsstring>
        <name>m</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1132" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a960ce105570c5c1bdca764f2d8d32a2d" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>unsigned long value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1168" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1aaa9f6c7943088e537735a92fbca1567f" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* ob</definition>
        <argsstring></argsstring>
        <name>ob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1177" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a1ae8b44b575b3d6108efaf6df1d2caf7" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> int</type>
        <definition>PyObject int operation</definition>
        <argsstring></argsstring>
        <name>operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1188" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1af5fe3b8666d7e81be8e1dda1700e0b2f" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * typeorclass</definition>
        <argsstring></argsstring>
        <name>typeorclass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1350" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1aef8d78cdf29fea309930170eca82dc73" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * cls</definition>
        <argsstring></argsstring>
        <name>cls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1358" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="abstract_8h_1a54819b62c266d561ee7c64a6f83f2026" prot="public" static="no" mutable="no">
        <type>Py_ssize_t *</type>
        <definition>Py_ssize_t index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1367" column="1" bodyfile="/usr/include/python3.6m/abstract.h" bodystart="1367" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="abstract_8h_1a0189fb87507798d71b2d3e81af8b536d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyObject_Call(PyObject *callable_object</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="abstract_8h_1ab036ac77a37fc9266550f9149d856941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) _PyStack_UnpackDict(PyObject **args</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="abstract_8h_1adf8ca5b08b1c5acf0256469aaef62a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) PyObject_Size(PyObject *o)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="abstract_8h_1a5ca589d0c0991d1b7324b55dd64abfad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void *) PyBuffer_GetPointer(Py_buffer *view</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="abstract_8h_1a1a5d28be441a9b10e7c0978fd7f09a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyBuffer_FillContiguousStrides(int ndims</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="abstract_8h_1a2df88168897a20a39dd6092f8318b8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(char *const *) _PySequence_BytesToCharpArray(PyObject *self)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>char *const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/abstract.h" line="1362" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_ABSTRACTOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_ABSTRACTOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_CallFunction<sp/>_PyObject_CallFunction_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_CallMethod<sp/>_PyObject_CallMethod_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_CallMethodId<sp/>_PyObject_CallMethodId_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Abstract<sp/>Object<sp/>Interface<sp/>(many<sp/>thanks<sp/>to<sp/>Jim<sp/>Fulton)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>PROPOSAL:<sp/>A<sp/>Generic<sp/>Python<sp/>Object<sp/>Interface<sp/>for<sp/>Python<sp/>C<sp/>Modules</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">Problem</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>Python<sp/>modules<sp/>written<sp/>in<sp/>C<sp/>that<sp/>must<sp/>access<sp/>Python<sp/>objects<sp/>must<sp/>do</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>so<sp/>through<sp/>routines<sp/>whose<sp/>interfaces<sp/>are<sp/>described<sp/>by<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>include<sp/>files.<sp/><sp/>Unfortunately,<sp/>these<sp/>routines<sp/>vary<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>object<sp/>accessed.<sp/><sp/>To<sp/>use<sp/>these<sp/>routines,<sp/>the<sp/>C<sp/>programmer<sp/>must<sp/>check</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>the<sp/>type<sp/>of<sp/>the<sp/>object<sp/>being<sp/>used<sp/>and<sp/>must<sp/>call<sp/>a<sp/>routine<sp/>based<sp/>on</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>the<sp/>object<sp/>type.<sp/><sp/>For<sp/>example,<sp/>to<sp/>access<sp/>an<sp/>element<sp/>of<sp/>a<sp/>sequence,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>the<sp/>programmer<sp/>must<sp/>determine<sp/>whether<sp/>the<sp/>sequence<sp/>is<sp/>a<sp/>list<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>tuple:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>if(is_tupleobject(o))</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>e=gettupleitem(o,i)</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if(is_listitem(o))</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>e=getlistitem(o,i)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/>If<sp/>the<sp/>programmer<sp/>wants<sp/>to<sp/>get<sp/>an<sp/>item<sp/>from<sp/>another<sp/>type<sp/>of<sp/>object</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>that<sp/>provides<sp/>sequence<sp/>behavior,<sp/>there<sp/>is<sp/>no<sp/>clear<sp/>way<sp/>to<sp/>do<sp/>it</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/>correctly.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>The<sp/>persistent<sp/>programmer<sp/>may<sp/>peruse<sp/>object.h<sp/>and<sp/>find<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>_typeobject<sp/>structure<sp/>provides<sp/>a<sp/>means<sp/>of<sp/>invoking<sp/>up<sp/>to<sp/>(currently</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/>about)<sp/>41<sp/>special<sp/>operators.<sp/><sp/>So,<sp/>for<sp/>example,<sp/>a<sp/>routine<sp/>can<sp/>get<sp/>an</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>item<sp/>from<sp/>any<sp/>object<sp/>that<sp/>provides<sp/>sequence<sp/>behavior.<sp/>However,<sp/>to</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>use<sp/>this<sp/>mechanism,<sp/>the<sp/>programmer<sp/>must<sp/>make<sp/>their<sp/>code<sp/>dependent<sp/>on</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>the<sp/>current<sp/>Python<sp/>implementation.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>Also,<sp/>certain<sp/>semantics,<sp/>especially<sp/>memory<sp/>management<sp/>semantics,<sp/>may</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/>differ<sp/>by<sp/>the<sp/>type<sp/>of<sp/>object<sp/>being<sp/>used.<sp/><sp/>Unfortunately,<sp/>these</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>semantics<sp/>are<sp/>not<sp/>clearly<sp/>described<sp/>in<sp/>the<sp/>current<sp/>include<sp/>files.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>An<sp/>abstract<sp/>interface<sp/>providing<sp/>more<sp/>consistent<sp/>semantics<sp/>is<sp/>needed.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">Proposal</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>I<sp/>propose<sp/>the<sp/>creation<sp/>of<sp/>a<sp/>standard<sp/>interface<sp/>(with<sp/>an<sp/>associated</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>library<sp/>of<sp/>routines<sp/>and/or<sp/>macros)<sp/>for<sp/>generically<sp/>obtaining<sp/>the</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>services<sp/>of<sp/>Python<sp/>objects.<sp/><sp/>This<sp/>proposal<sp/>can<sp/>be<sp/>viewed<sp/>as<sp/>one</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>components<sp/>of<sp/>a<sp/>Python<sp/>C<sp/>interface<sp/>consisting<sp/>of<sp/>several<sp/>components.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>From<sp/>the<sp/>viewpoint<sp/>of<sp/>C<sp/>access<sp/>to<sp/>Python<sp/>services,<sp/>we<sp/>have<sp/>(as</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>suggested<sp/>by<sp/>Guido<sp/>in<sp/>off-line<sp/>discussions):</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/>-<sp/>&quot;Very<sp/>high<sp/>level<sp/>layer&quot;:<sp/>two<sp/>or<sp/>three<sp/>functions<sp/>that<sp/>let<sp/>you<sp/>exec<sp/>or</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>eval<sp/>arbitrary<sp/>Python<sp/>code<sp/>given<sp/>as<sp/>a<sp/>string<sp/>in<sp/>a<sp/>module<sp/>whose<sp/>name<sp/>is</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>given,<sp/>passing<sp/>C<sp/>values<sp/>in<sp/>and<sp/>getting<sp/>C<sp/>values<sp/>out<sp/>using</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>mkvalue/getargs<sp/>style<sp/>format<sp/>strings.<sp/><sp/>This<sp/>does<sp/>not<sp/>require<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>declare<sp/>any<sp/>variables<sp/>of<sp/>type<sp/>&quot;PyObject<sp/>*&quot;.<sp/><sp/>This<sp/>should<sp/>be<sp/>enough</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>write<sp/>a<sp/>simple<sp/>application<sp/>that<sp/>gets<sp/>Python<sp/>code<sp/>from<sp/>the<sp/>user,</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>execs<sp/>it,<sp/>and<sp/>returns<sp/>the<sp/>output<sp/>or<sp/>errors.<sp/><sp/>(Error<sp/>handling<sp/>must<sp/>also</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>part<sp/>of<sp/>this<sp/>API.)</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>-<sp/>&quot;Abstract<sp/>objects<sp/>layer&quot;:<sp/>which<sp/>is<sp/>the<sp/>subject<sp/>of<sp/>this<sp/>proposal.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>It<sp/>has<sp/>many<sp/>functions<sp/>operating<sp/>on<sp/>objects,<sp/>and<sp/>lest<sp/>you<sp/>do<sp/>many</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>things<sp/>from<sp/>C<sp/>that<sp/>you<sp/>can<sp/>also<sp/>write<sp/>in<sp/>Python,<sp/>without<sp/>going</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>through<sp/>the<sp/>Python<sp/>parser.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>-<sp/>&quot;Concrete<sp/>objects<sp/>layer&quot;:<sp/>This<sp/>is<sp/>the<sp/>public<sp/>type-dependent</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>interface<sp/>provided<sp/>by<sp/>the<sp/>standard<sp/>built-in<sp/>types,<sp/>such<sp/>as<sp/>floats,</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>strings,<sp/>and<sp/>lists.<sp/><sp/>This<sp/>interface<sp/>exists<sp/>and<sp/>is<sp/>currently</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>documented<sp/>by<sp/>the<sp/>collection<sp/>of<sp/>include<sp/>files<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>Python<sp/>distributions.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/>From<sp/>the<sp/>point<sp/>of<sp/>view<sp/>of<sp/>Python<sp/>accessing<sp/>services<sp/>provided<sp/>by<sp/>C</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/>modules:</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>-<sp/>&quot;Python<sp/>module<sp/>interface&quot;:<sp/>this<sp/>interface<sp/>consist<sp/>of<sp/>the<sp/>basic</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>routines<sp/>used<sp/>to<sp/>define<sp/>modules<sp/>and<sp/>their<sp/>members.<sp/><sp/>Most<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>current<sp/>extensions-writing<sp/>guide<sp/>deals<sp/>with<sp/>this<sp/>interface.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/>-<sp/>&quot;Built-in<sp/>object<sp/>interface&quot;:<sp/>this<sp/>is<sp/>the<sp/>interface<sp/>that<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>built-in<sp/>type<sp/>must<sp/>provide<sp/>and<sp/>the<sp/>mechanisms<sp/>and<sp/>rules<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>developer<sp/>of<sp/>a<sp/>new<sp/>built-in<sp/>type<sp/>must<sp/>use<sp/>and<sp/>follow.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>This<sp/>proposal<sp/>is<sp/>a<sp/>&quot;first-cut&quot;<sp/>that<sp/>is<sp/>intended<sp/>to<sp/>spur</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>discussion.<sp/>See<sp/>especially<sp/>the<sp/>lists<sp/>of<sp/>notes.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>The<sp/>Python<sp/>C<sp/>object<sp/>interface<sp/>will<sp/>provide<sp/>four<sp/>protocols:<sp/>object,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>numeric,<sp/>sequence,<sp/>and<sp/>mapping.<sp/><sp/>Each<sp/>protocol<sp/>consists<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>collection<sp/>of<sp/>related<sp/>operations.<sp/><sp/>If<sp/>an<sp/>operation<sp/>that<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>provided<sp/>by<sp/>a<sp/>particular<sp/>type<sp/>is<sp/>invoked,<sp/>then<sp/>a<sp/>standard<sp/>exception,</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>NotImplementedError<sp/>is<sp/>raised<sp/>with<sp/>an<sp/>operation<sp/>name<sp/>as<sp/>an<sp/>argument.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>In<sp/>addition,<sp/>for<sp/>convenience<sp/>this<sp/>interface<sp/>defines<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/>constructors<sp/>for<sp/>building<sp/>objects<sp/>of<sp/>built-in<sp/>types.<sp/><sp/>This<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>so<sp/>new<sp/>objects<sp/>can<sp/>be<sp/>returned<sp/>from<sp/>C<sp/>functions<sp/>that<sp/>otherwise<sp/>treat</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/>objects<sp/>generically.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">Memory<sp/>Management</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>For<sp/>all<sp/>of<sp/>the<sp/>functions<sp/>described<sp/>in<sp/>this<sp/>proposal,<sp/>if<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>retains<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>Python<sp/>object<sp/>passed<sp/>as<sp/>an<sp/>argument,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>function<sp/>will<sp/>increase<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>object.<sp/><sp/>It<sp/>is</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>unnecessary<sp/>for<sp/>the<sp/>caller<sp/>to<sp/>increase<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>argument<sp/>in<sp/>anticipation<sp/>of<sp/>the<sp/>object&apos;s<sp/>retention.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/>All<sp/>Python<sp/>objects<sp/>returned<sp/>from<sp/>functions<sp/>should<sp/>be<sp/>treated<sp/>as<sp/>new</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>objects.<sp/><sp/>Functions<sp/>that<sp/>return<sp/>objects<sp/>assume<sp/>that<sp/>the<sp/>caller<sp/>will</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>retain<sp/>a<sp/>reference<sp/>and<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>object<sp/>has<sp/>already</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/>been<sp/>incremented<sp/>to<sp/>account<sp/>for<sp/>this<sp/>fact.<sp/><sp/>A<sp/>caller<sp/>that<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>retain<sp/>a<sp/>reference<sp/>to<sp/>an<sp/>object<sp/>that<sp/>is<sp/>returned<sp/>from<sp/>a<sp/>function</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>must<sp/>decrement<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>object<sp/>(using</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>DECREF(object))<sp/>to<sp/>prevent<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>Note<sp/>that<sp/>the<sp/>behavior<sp/>mentioned<sp/>here<sp/>is<sp/>different<sp/>from<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>behavior<sp/>for<sp/>some<sp/>objects<sp/>(e.g.<sp/>lists<sp/>and<sp/>tuples)<sp/>when<sp/>certain</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/>type-specific<sp/>routines<sp/>are<sp/>called<sp/>directly<sp/>(e.g.<sp/>setlistitem).<sp/><sp/>The</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>proposed<sp/>abstraction<sp/>layer<sp/>will<sp/>provide<sp/>a<sp/>consistent<sp/>memory</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>management<sp/>interface,<sp/>correcting<sp/>for<sp/>inconsistent<sp/>behavior<sp/>for<sp/>some</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>built-in<sp/>types.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">Protocols</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Object<sp/>Protocol:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_Print(PyObject<sp/>*o,<sp/>FILE<sp/>*fp,<sp/>int<sp/>flags);</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Print<sp/>an<sp/>object,<sp/>o,<sp/>on<sp/>file,<sp/>fp.<sp/><sp/>Returns<sp/>-1<sp/>on</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>error.<sp/><sp/>The<sp/>flags<sp/>argument<sp/>is<sp/>used<sp/>to<sp/>enable<sp/>certain<sp/>printing</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>options.<sp/>The<sp/>only<sp/>option<sp/>currently<sp/>supported<sp/>is<sp/>Py_Print_RAW.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(What<sp/>should<sp/>be<sp/>said<sp/>about<sp/>Py_Print_RAW?)</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_HasAttrString(PyObject<sp/>*o,<sp/>const<sp/>char<sp/>*attr_name);</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>if<sp/>o<sp/>has<sp/>the<sp/>attribute<sp/>attr_name,<sp/>and<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>hasattr(o,attr_name).</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>PyObject_GetAttrString(PyObject<sp/>*o,<sp/>const<sp/>char<sp/>*attr_name);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Retrieve<sp/>an<sp/>attributed<sp/>named<sp/>attr_name<sp/>form<sp/>object<sp/>o.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>attribute<sp/>value<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o.attr_name.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="170"><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_HasAttr(PyObject<sp/>*o,<sp/>PyObject<sp/>*attr_name);</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>if<sp/>o<sp/>has<sp/>the<sp/>attribute<sp/>attr_name,<sp/>and<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>hasattr(o,attr_name).</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>PyObject_GetAttr(PyObject<sp/>*o,<sp/>PyObject<sp/>*attr_name);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Retrieve<sp/>an<sp/>attributed<sp/>named<sp/>attr_name<sp/>form<sp/>object<sp/>o.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>attribute<sp/>value<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o.attr_name.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="193"><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_SetAttrString(PyObject<sp/>*o,<sp/>const<sp/>char<sp/>*attr_name,<sp/>PyObject<sp/>*v);</highlight></codeline>
<codeline lineno="195"><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>attribute<sp/>named<sp/>attr_name,<sp/>for<sp/>object<sp/>o,</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>value<sp/>v.<sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>failure;<sp/>return<sp/>0<sp/>on</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>success.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>statement<sp/>o.attr_name=v.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_SetAttr(PyObject<sp/>*o,<sp/>PyObject<sp/>*attr_name,<sp/>PyObject<sp/>*v);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>attribute<sp/>named<sp/>attr_name,<sp/>for<sp/>object<sp/>o,</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>value<sp/>v.<sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>failure;<sp/>return<sp/>0<sp/>on</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>success.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>statement<sp/>o.attr_name=v.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implemented<sp/>as<sp/>a<sp/>macro:</highlight></codeline>
<codeline lineno="213"><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_DelAttrString(PyObject<sp/>*o,<sp/>const<sp/>char<sp/>*attr_name);</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Delete<sp/>attribute<sp/>named<sp/>attr_name,<sp/>for<sp/>object<sp/>o.<sp/>Returns</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement:<sp/>del<sp/>o.attr_name.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>PyObject_DelAttrString(O,A)<sp/>PyObject_SetAttrString((O),(A),NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implemented<sp/>as<sp/>a<sp/>macro:</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_DelAttr(PyObject<sp/>*o,<sp/>PyObject<sp/>*attr_name);</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Delete<sp/>attribute<sp/>named<sp/>attr_name,<sp/>for<sp/>object<sp/>o.<sp/>Returns<sp/>-1</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement:<sp/>del<sp/>o.attr_name.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>PyObject_DelAttr(O,A)<sp/>PyObject_SetAttr((O),(A),NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*PyObject_Repr(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="237"><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>string<sp/>representation<sp/>of<sp/>object,<sp/>o.<sp/><sp/>Returns<sp/>the</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>string<sp/>representation<sp/>on<sp/>success,<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>repr(o).</highlight></codeline>
<codeline lineno="241"><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Called<sp/>by<sp/>the<sp/>repr()<sp/>built-in<sp/>function.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*PyObject_Str(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>string<sp/>representation<sp/>of<sp/>object,<sp/>o.<sp/><sp/>Returns<sp/>the</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>string<sp/>representation<sp/>on<sp/>success,<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>str(o).)</highlight></codeline>
<codeline lineno="253"><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Called<sp/>by<sp/>the<sp/>str()<sp/>and<sp/>print()<sp/>built-in<sp/>functions.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Declared<sp/>elsewhere</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(int)<sp/>PyCallable_Check(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="261"><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Determine<sp/>if<sp/>the<sp/>object,<sp/>o,<sp/>is<sp/>callable.<sp/><sp/>Return<sp/>1<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>object<sp/>is<sp/>callable<sp/>and<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_Call(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callable_object,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwargs);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>a<sp/>callable<sp/>Python<sp/>object,<sp/>callable_object,<sp/>with</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arguments<sp/>and<sp/>keywords<sp/>arguments.<sp/><sp/>The<sp/>&apos;args&apos;<sp/>argument<sp/>can<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyStack_AsTuple(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**stack,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nargs);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>keyword<sp/>arguments<sp/>from<sp/>the<sp/>(stack,<sp/>kwnames)<sp/>format<sp/>to<sp/>a<sp/>Python</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwnames<sp/>must<sp/>only<sp/>contains<sp/>str<sp/>strings,<sp/>no<sp/>subclass,<sp/>and<sp/>all<sp/>keys<sp/>must</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>unique.<sp/>kwnames<sp/>is<sp/>not<sp/>checked,<sp/>usually<sp/>these<sp/>checks<sp/>are<sp/>done<sp/>before<sp/>or<sp/>later</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calling<sp/>_PyStack_AsDict().<sp/>For<sp/>example,<sp/>_PyArg_ParseStack()<sp/>raises<sp/>an</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>if<sp/>a<sp/>key<sp/>is<sp/>not<sp/>a<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyStack_AsDict(</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**values,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwnames);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>(args,<sp/>nargs,<sp/>kwargs:<sp/>dict)<sp/>into<sp/>(stack,<sp/>nargs,<sp/>kwnames:<sp/>tuple).</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Write<sp/>the<sp/>new<sp/>stack<sp/>into<sp/>*p_stack.<sp/>If<sp/>*p_stack<sp/>is<sp/>differen<sp/>than<sp/>args,<sp/>it</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>released<sp/>by<sp/>PyMem_Free().</highlight></codeline>
<codeline lineno="299"><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>stack<sp/>uses<sp/>borrowed<sp/>references.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>type<sp/>of<sp/>keyword<sp/>keys<sp/>is<sp/>not<sp/>checked,<sp/>these<sp/>checks<sp/>should<sp/>be<sp/>done</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>later<sp/>(ex:<sp/>_PyArg_ParseStackAndKeywords).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyStack_UnpackDict(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**args,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nargs,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwargs,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>***p_stack,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**p_kwnames);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>callable<sp/>object<sp/>func<sp/>with<sp/>the<sp/>&quot;fast<sp/>call&quot;<sp/>calling<sp/>convention:</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>is<sp/>a<sp/>C<sp/>array<sp/>for<sp/>positional<sp/>arguments<sp/>(nargs<sp/>is<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positional<sp/>arguments),<sp/>kwargs<sp/>is<sp/>a<sp/>dictionary<sp/>for<sp/>keyword<sp/>arguments.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>nargs<sp/>is<sp/>equal<sp/>to<sp/>zero,<sp/>args<sp/>can<sp/>be<sp/>NULL.<sp/>kwargs<sp/>can<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nargs<sp/>must<sp/>be<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>result<sp/>on<sp/>success.<sp/>Raise<sp/>an<sp/>exception<sp/>on<sp/>return<sp/>NULL<sp/>on</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_FastCallDict(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**args,<sp/>Py_ssize_t<sp/>nargs,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwargs);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>callable<sp/>object<sp/>func<sp/>with<sp/>the<sp/>&quot;fast<sp/>call&quot;<sp/>calling<sp/>convention:</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>is<sp/>a<sp/>C<sp/>array<sp/>for<sp/>positional<sp/>arguments<sp/>followed<sp/>by<sp/>values<sp/>of</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>arguments.<sp/>Keys<sp/>of<sp/>keyword<sp/>arguments<sp/>are<sp/>stored<sp/>as<sp/>a<sp/>tuple</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>strings<sp/>in<sp/>kwnames.<sp/>nargs<sp/>is<sp/>the<sp/>number<sp/>of<sp/>positional<sp/>parameters<sp/>at</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>beginning<sp/>of<sp/>stack.<sp/>The<sp/>size<sp/>of<sp/>kwnames<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>keyword</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>in<sp/>the<sp/>stack<sp/>after<sp/>positional<sp/>arguments.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"></highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwnames<sp/>must<sp/>only<sp/>contains<sp/>str<sp/>strings,<sp/>no<sp/>subclass,<sp/>and<sp/>all<sp/>keys<sp/>must</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>unique.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"></highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>nargs<sp/>is<sp/>equal<sp/>to<sp/>zero<sp/>and<sp/>there<sp/>is<sp/>no<sp/>keyword<sp/>argument<sp/>(kwnames<sp/>is</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>or<sp/>its<sp/>size<sp/>is<sp/>zero),<sp/>args<sp/>can<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>result<sp/>on<sp/>success.<sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>NULL<sp/>on</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_FastCallKeywords</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**args,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nargs,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwnames);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_FastCall(func,<sp/>args,<sp/>nargs)<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PyObject_FastCallDict((func),<sp/>(args),<sp/>(nargs),<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_CallNoArg(func)<sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PyObject_FastCall((func),<sp/>NULL,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_CallArg1(func,<sp/>arg)<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_PyObject_FastCall((func),<sp/>&amp;(arg),<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_Call_Prepend(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwargs);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_Py_CheckFunctionResult(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*result,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*where);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_CallObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callable_object,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>a<sp/>callable<sp/>Python<sp/>object,<sp/>callable_object,<sp/>with</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arguments<sp/>given<sp/>by<sp/>the<sp/>tuple,<sp/>args.<sp/><sp/>If<sp/>no<sp/>arguments<sp/>are</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>needed,<sp/>then<sp/>args<sp/>may<sp/>be<sp/>NULL.<sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>call<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o(*args).</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_CallFunction(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callable_object,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>a<sp/>callable<sp/>Python<sp/>object,<sp/>callable_object,<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>variable<sp/>number<sp/>of<sp/>C<sp/>arguments.<sp/>The<sp/>C<sp/>arguments<sp/>are<sp/>described</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>using<sp/>a<sp/>mkvalue-style<sp/>format<sp/>string.<sp/>The<sp/>format<sp/>may<sp/>be<sp/>NULL,</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>indicating<sp/>that<sp/>no<sp/>arguments<sp/>are<sp/>provided.<sp/><sp/>Returns<sp/>the</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>result<sp/>of<sp/>the<sp/>call<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o(*args).</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_CallMethod(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*method,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>the<sp/>method<sp/>named<sp/>m<sp/>of<sp/>object<sp/>o<sp/>with<sp/>a<sp/>variable<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>C<sp/>arguments.<sp/><sp/>The<sp/>C<sp/>arguments<sp/>are<sp/>described<sp/>by<sp/>a<sp/>mkvalue</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>format<sp/>string.<sp/><sp/>The<sp/>format<sp/>may<sp/>be<sp/>NULL,<sp/>indicating<sp/>that<sp/>no</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arguments<sp/>are<sp/>provided.<sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call<sp/>on</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Python<sp/>expression:<sp/>o.method(args).</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_CallMethodId(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*method,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Like<sp/>PyObject_CallMethod,<sp/>but<sp/>expect<sp/>a<sp/>_Py_Identifier*<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>name.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_CallFunction_SizeT(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callable,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_CallMethod_SizeT(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_CallMethodId_SizeT(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*name,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_CallFunctionObjArgs(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callable,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>a<sp/>callable<sp/>Python<sp/>object,<sp/>callable_object,<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>variable<sp/>number<sp/>of<sp/>C<sp/>arguments.<sp/><sp/>The<sp/>C<sp/>arguments<sp/>are<sp/>provided</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>as<sp/>PyObject<sp/>*<sp/>values,<sp/>terminated<sp/>by<sp/>a<sp/>NULL.<sp/><sp/>Returns<sp/>the</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>result<sp/>of<sp/>the<sp/>call<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o(*args).</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_CallMethodObjArgs(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*method,<sp/>...);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyObject_CallMethodIdObjArgs(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*method,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Call<sp/>the<sp/>method<sp/>named<sp/>m<sp/>of<sp/>object<sp/>o<sp/>with<sp/>a<sp/>variable<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>C<sp/>arguments.<sp/><sp/>The<sp/>C<sp/>arguments<sp/>are<sp/>provided<sp/>as<sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>values,<sp/>terminated<sp/>by<sp/>NULL.<sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>the<sp/>call</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>Python<sp/>expression:<sp/>o.method(args).</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="455"><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>long<sp/>PyObject_Hash(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="457"><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Compute<sp/>and<sp/>return<sp/>the<sp/>hash,<sp/>hash_value,<sp/>of<sp/>an<sp/>object,<sp/>o.<sp/><sp/>On</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure,<sp/>return<sp/>-1.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>hash(o).</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="465"><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_IsTrue(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="467"><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>if<sp/>the<sp/>object,<sp/>o,<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>true,<sp/>0<sp/>if<sp/>o<sp/>is</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>considered<sp/>to<sp/>be<sp/>false<sp/>and<sp/>-1<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Python<sp/>expression:<sp/>not<sp/>not<sp/>o</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implemented<sp/>elsewhere:</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyObject_Not(PyObject<sp/>*o);</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>0<sp/>if<sp/>the<sp/>object,<sp/>o,<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>true,<sp/>1<sp/>if<sp/>o<sp/>is</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>considered<sp/>to<sp/>be<sp/>false<sp/>and<sp/>-1<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Python<sp/>expression:<sp/>not<sp/>o</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_Type(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>success,<sp/>returns<sp/>a<sp/>type<sp/>object<sp/>corresponding<sp/>to<sp/>the<sp/>object</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>type<sp/>of<sp/>object<sp/>o.<sp/>On<sp/>failure,<sp/>returns<sp/>NULL.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>type(o).</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyObject_Size(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>size<sp/>of<sp/>object<sp/>o.<sp/><sp/>If<sp/>the<sp/>object,<sp/>o,<sp/>provides</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>both<sp/>sequence<sp/>and<sp/>mapping<sp/>protocols,<sp/>the<sp/>sequence<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>returned.<sp/>On<sp/>error,<sp/>-1<sp/>is<sp/>returned.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>len(o).</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>DLL<sp/>compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PyObject_Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyObject_Length(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_Length<sp/>PyObject_Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_HasLen(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyObject_LengthHint(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Guess<sp/>the<sp/>size<sp/>of<sp/>object<sp/>o<sp/>using<sp/>len(o)<sp/>or<sp/>o.__length_hint__().</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>neither<sp/>of<sp/>those<sp/>return<sp/>a<sp/>non-negative<sp/>value,<sp/>then<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>default<sp/>value.<sp/><sp/>If<sp/>one<sp/>of<sp/>the<sp/>calls<sp/>fails,<sp/>this<sp/>function<sp/>returns<sp/>-1.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_GetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*key);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>element<sp/>of<sp/>o<sp/>corresponding<sp/>to<sp/>the<sp/>object,<sp/>key,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o[key].</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_SetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*key,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*v);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Map<sp/>the<sp/>object<sp/>key<sp/>to<sp/>the<sp/>value<sp/>v.<sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure;<sp/>return<sp/>0<sp/>on<sp/>success.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement<sp/>o[key]=v.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_DelItemString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Remove<sp/>the<sp/>mapping<sp/>for<sp/>object,<sp/>key,<sp/>from<sp/>the<sp/>object<sp/>*o.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>Python<sp/>statement:<sp/>del<sp/>o[key].</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_DelItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*key);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Delete<sp/>the<sp/>mapping<sp/>for<sp/>key<sp/>from<sp/>*o.<sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>statement:<sp/>del<sp/>o[key].</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>old<sp/>buffer<sp/>API</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIXME:<sp/><sp/>usage<sp/>of<sp/>these<sp/>should<sp/>all<sp/>be<sp/>replaced<sp/>in<sp/>Python<sp/>itself</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>for<sp/>backwards<sp/>compatibility<sp/>we<sp/>will<sp/>implement<sp/>them.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Their<sp/>usage<sp/>without<sp/>a<sp/>corresponding<sp/>&quot;unlock&quot;<sp/>mechanism</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>may<sp/>create<sp/>issues<sp/>(but<sp/>they<sp/>would<sp/>already<sp/>be<sp/>there).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_AsCharBuffer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**buffer,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*buffer_len);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Takes<sp/>an<sp/>arbitrary<sp/>object<sp/>which<sp/>must<sp/>support<sp/>the<sp/>(character,</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>segment)<sp/>buffer<sp/>interface<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>read-only<sp/>memory<sp/>location<sp/>useable<sp/>as<sp/>character<sp/>based<sp/>input</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>subsequent<sp/>processing.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>is<sp/>returned<sp/>on<sp/>success.<sp/><sp/>buffer<sp/>and<sp/>buffer_len<sp/>are<sp/>only</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>in<sp/>case<sp/>no<sp/>error<sp/>occurs.<sp/>Otherwise,<sp/>-1<sp/>is<sp/>returned<sp/>and</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>exception<sp/>set.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_CheckReadBuffer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Checks<sp/>whether<sp/>an<sp/>arbitrary<sp/>object<sp/>supports<sp/>the<sp/>(character,</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>segment)<sp/>buffer<sp/>interface.<sp/><sp/>Returns<sp/>1<sp/>on<sp/>success,<sp/>0</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_AsReadBuffer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**buffer,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*buffer_len);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Same<sp/>as<sp/>PyObject_AsCharBuffer()<sp/>except<sp/>that<sp/>this<sp/>API<sp/>expects</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(readable,<sp/>single<sp/>segment)<sp/>buffer<sp/>interface<sp/>and<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>a<sp/>read-only<sp/>memory<sp/>location<sp/>which<sp/>can<sp/>contain</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>arbitrary<sp/>data.</highlight></codeline>
<codeline lineno="584"><highlight class="comment"></highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>is<sp/>returned<sp/>on<sp/>success.<sp/><sp/>buffer<sp/>and<sp/>buffer_len<sp/>are<sp/>only</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>in<sp/>case<sp/>no<sp/>error<sp/>occurs.<sp/><sp/>Otherwise,<sp/>-1<sp/>is<sp/>returned<sp/>and</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>exception<sp/>set.</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_AsWriteBuffer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**buffer,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*buffer_len);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Takes<sp/>an<sp/>arbitrary<sp/>object<sp/>which<sp/>must<sp/>support<sp/>the<sp/>(writable,</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>segment)<sp/>buffer<sp/>interface<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>writable<sp/>memory<sp/>location<sp/>in<sp/>buffer<sp/>of<sp/>size<sp/>buffer_len.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>is<sp/>returned<sp/>on<sp/>success.<sp/><sp/>buffer<sp/>and<sp/>buffer_len<sp/>are<sp/>only</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>in<sp/>case<sp/>no<sp/>error<sp/>occurs.<sp/>Otherwise,<sp/>-1<sp/>is<sp/>returned<sp/>and</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>exception<sp/>set.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>buffer<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_CheckBuffer(obj)<sp/>\</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((obj)-&gt;ob_type-&gt;tp_as_buffer<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((obj)-&gt;ob_type-&gt;tp_as_buffer-&gt;bf_getbuffer<sp/>!=<sp/>NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>1<sp/>if<sp/>the<sp/>getbuffer<sp/>function<sp/>is<sp/>available,<sp/>otherwise</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_GetBuffer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,<sp/><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>C-API<sp/>version<sp/>of<sp/>the<sp/>getbuffer<sp/>function<sp/>call.<sp/><sp/>It<sp/>checks</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>make<sp/>sure<sp/>object<sp/>has<sp/>the<sp/>required<sp/>function<sp/>pointer<sp/>and<sp/>issues<sp/>the</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call.<sp/><sp/>Returns<sp/>-1<sp/>and<sp/>raises<sp/>an<sp/>error<sp/>on<sp/>failure<sp/>and<sp/>returns<sp/>0<sp/>on</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>PyBuffer_GetPointer(<ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,<sp/>Py_ssize_t<sp/>*indices);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>memory<sp/>area<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>indices<sp/>for<sp/>the<sp/>buffer<sp/>given.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>view-&gt;ndim<sp/>is<sp/>the<sp/>assumed<sp/>size<sp/>of<sp/>indices</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyBuffer_SizeFromFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>implied<sp/>itemsize<sp/>of<sp/>the<sp/>data-format<sp/>area<sp/>from<sp/>a</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct-style<sp/>description<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implementation<sp/>in<sp/>memoryobject.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyBuffer_ToContiguous(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>order);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyBuffer_FromContiguous(<ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>order);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>len<sp/>bytes<sp/>of<sp/>data<sp/>from<sp/>the<sp/>contiguous<sp/>chunk<sp/>of<sp/>memory</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointed<sp/>to<sp/>by<sp/>buf<sp/>into<sp/>the<sp/>buffer<sp/>exported<sp/>by<sp/>obj.<sp/><sp/>Return</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>on<sp/>success<sp/>and<sp/>return<sp/>-1<sp/>and<sp/>raise<sp/>a<sp/>PyBuffer_Error<sp/>on</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>(i.e.<sp/>the<sp/>object<sp/>does<sp/>not<sp/>have<sp/>a<sp/>buffer<sp/>interface<sp/>or</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>is<sp/>not<sp/>working).</highlight></codeline>
<codeline lineno="650"><highlight class="comment"></highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>fort<sp/>is<sp/>&apos;F&apos;,<sp/>then<sp/>if<sp/>the<sp/>object<sp/>is<sp/>multi-dimensional,</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>data<sp/>will<sp/>be<sp/>copied<sp/>into<sp/>the<sp/>array<sp/>in</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fortran-style<sp/>(first<sp/>dimension<sp/>varies<sp/>the<sp/>fastest).<sp/><sp/>If</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fort<sp/>is<sp/>&apos;C&apos;,<sp/>then<sp/>the<sp/>data<sp/>will<sp/>be<sp/>copied<sp/>into<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>C-style<sp/>(last<sp/>dimension<sp/>varies<sp/>the<sp/>fastest).<sp/><sp/>If<sp/>fort</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&apos;A&apos;,<sp/>then<sp/>it<sp/>does<sp/>not<sp/>matter<sp/>and<sp/>the<sp/>copy<sp/>will<sp/>be<sp/>made</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>whatever<sp/>way<sp/>is<sp/>more<sp/>efficient.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_CopyData(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*dest,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*src);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>data<sp/>from<sp/>the<sp/>src<sp/>buffer<sp/>to<sp/>the<sp/>buffer<sp/>of<sp/>destination</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyBuffer_IsContiguous(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fort);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyBuffer_FillContiguousStrides(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndims,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*shape,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*strides,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fort);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Fill<sp/>the<sp/>strides<sp/>array<sp/>with<sp/>byte-strides<sp/>of<sp/>a<sp/>contiguous</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Fortran-style<sp/>if<sp/>fort<sp/>is<sp/>&apos;F&apos;<sp/>or<sp/>C-style<sp/>otherwise)</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>of<sp/>the<sp/>given<sp/>shape<sp/>with<sp/>the<sp/>given<sp/>number<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>per<sp/>element.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyBuffer_FillInfo(<ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readonly,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fills<sp/>in<sp/>a<sp/>buffer-info<sp/>structure<sp/>correctly<sp/>for<sp/>an<sp/>exporter</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>can<sp/>only<sp/>share<sp/>a<sp/>contiguous<sp/>chunk<sp/>of<sp/>memory<sp/>of</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;unsigned<sp/>bytes&quot;<sp/>of<sp/>the<sp/>given<sp/>length.<sp/>Returns<sp/>0<sp/>on<sp/>success</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>-1<sp/>(with<sp/>raising<sp/>an<sp/>error)<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyBuffer_Release(<ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*view);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Releases<sp/>a<sp/>Py_buffer<sp/>obtained<sp/>from<sp/>getbuffer<sp/>ParseTuple&apos;s<sp/>s*.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_Format(<ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/>obj,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*format_spec);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Takes<sp/>an<sp/>arbitrary<sp/>object<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>of</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>calling<sp/>obj.__format__(format_spec).</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Iterators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyObject_GetIter(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Takes<sp/>an<sp/>object<sp/>and<sp/>returns<sp/>an<sp/>iterator<sp/>for<sp/>it.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>typically<sp/>a<sp/>new<sp/>iterator<sp/>but<sp/>if<sp/>the<sp/>argument</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>an<sp/>iterator,<sp/>this<sp/>returns<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyIter_Check(obj)<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((obj)-&gt;ob_type-&gt;tp_iternext<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(obj)-&gt;ob_type-&gt;tp_iternext<sp/>!=<sp/>&amp;_PyObject_NextNotImplemented)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyIter_Next(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Takes<sp/>an<sp/>iterator<sp/>object<sp/>and<sp/>calls<sp/>its<sp/>tp_iternext<sp/>slot,</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/>returning<sp/>the<sp/>next<sp/>value.<sp/><sp/>If<sp/>the<sp/>iterator<sp/>is<sp/>exhausted,</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>returns<sp/>NULL<sp/>without<sp/>setting<sp/>an<sp/>exception.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/>NULL<sp/>with<sp/>an<sp/>exception<sp/>means<sp/>an<sp/>error<sp/>occurred.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Number<sp/>Protocol:*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyNumber_Check(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>1<sp/>if<sp/>the<sp/>object,<sp/>o,<sp/>provides<sp/>numeric<sp/>protocols,<sp/>and</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"></highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Add(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>adding<sp/>o1<sp/>and<sp/>o2,<sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1+o2.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Subtract(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>subtracting<sp/>o2<sp/>from<sp/>o1,<sp/>or<sp/>null<sp/>on</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1-o2.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Multiply(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>multiplying<sp/>o1<sp/>and<sp/>o2,<sp/>or<sp/>null<sp/>on</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1*o2.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_MatrixMultiply(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1<sp/>@<sp/>o2.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_FloorDivide(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2<sp/>giving<sp/>an<sp/>integral<sp/>result,</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1//o2.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_TrueDivide(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2<sp/>giving<sp/>a<sp/>float<sp/>result,</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1/o2.</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Remainder(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2,<sp/>or<sp/>null<sp/>on</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1%o2.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Divmod(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>built-in<sp/>function<sp/>divmod.<sp/><sp/>Returns<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>divmod(o1,o2).</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Power(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o3);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>built-in<sp/>function<sp/>pow.<sp/><sp/>Returns<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pow(o1,o2,o3),<sp/>where<sp/>o3<sp/>is<sp/>optional.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Negative(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>negation<sp/>of<sp/>o<sp/>on<sp/>success,<sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>-o.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Positive(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>(what?)<sp/>of<sp/>o<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>+o.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Absolute(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>o,<sp/>or<sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>abs(o).</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Invert(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>bitwise<sp/>negation<sp/>of<sp/>o<sp/>on<sp/>success,<sp/>or<sp/>NULL<sp/>on</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>~o.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Lshift(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>left<sp/>shifting<sp/>o1<sp/>by<sp/>o2<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1<sp/>&lt;&lt;<sp/>o2.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Rshift(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>right<sp/>shifting<sp/>o1<sp/>by<sp/>o2<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1<sp/>&gt;&gt;<sp/>o2.</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_And(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>bitwise<sp/>and<sp/>of<sp/>o1<sp/>and<sp/>o2<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1&amp;o2.</highlight></codeline>
<codeline lineno="855"><highlight class="comment"></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Xor(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>bitwise<sp/>exclusive<sp/>or<sp/>of<sp/>o1<sp/>by<sp/>o2<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1^o2.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Or(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>bitwise<sp/>or<sp/>on<sp/>o1<sp/>and<sp/>o2<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1|o2.</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyIndex_Check(obj)<sp/>\</highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"><sp/><sp/><sp/>((obj)-&gt;ob_type-&gt;tp_as_number<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(obj)-&gt;ob_type-&gt;tp_as_number-&gt;nb_index<sp/>!=<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Index(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>object<sp/>converted<sp/>to<sp/>a<sp/>Python<sp/>int</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>with<sp/>an<sp/>error<sp/>raised<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyNumber_AsSsize_t(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>object<sp/>converted<sp/>to<sp/>Py_ssize_t<sp/>by<sp/>going<sp/>through</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/>PyNumber_Index<sp/>first.<sp/><sp/>If<sp/>an<sp/>overflow<sp/>error<sp/>occurs<sp/>while</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/>converting<sp/>the<sp/>int<sp/>to<sp/>Py_ssize_t,<sp/>then<sp/>the<sp/>second<sp/>argument</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>the<sp/>error-type<sp/>to<sp/>return.<sp/><sp/>If<sp/>it<sp/>is<sp/>NULL,<sp/>then<sp/>the<sp/>overflow<sp/>error</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>cleared<sp/>and<sp/>the<sp/>value<sp/>is<sp/>clipped.</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Long(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>o<sp/>converted<sp/>to<sp/>an<sp/>integer<sp/>object<sp/>on<sp/>success,<sp/>or</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>int(o).</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_Float(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>o<sp/>converted<sp/>to<sp/>a<sp/>float<sp/>object<sp/>on<sp/>success,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>float(o).</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>In-place<sp/>variants<sp/>of<sp/>(some<sp/>of)<sp/>the<sp/>above<sp/>number<sp/>protocol<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceAdd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>adding<sp/>o2<sp/>to<sp/>o1,<sp/>possibly<sp/>in-place,<sp/>or<sp/>null</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>+=<sp/>o2.</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceSubtract(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>subtracting<sp/>o2<sp/>from<sp/>o1,<sp/>possibly<sp/>in-place<sp/>or</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>-=<sp/>o2.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceMultiply(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>multiplying<sp/>o1<sp/>by<sp/>o2,<sp/>possibly<sp/>in-place,<sp/>or</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>*=<sp/>o2.</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceMatrixMultiply(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1<sp/>@=<sp/>o2.</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceFloorDivide(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2<sp/>giving<sp/>an<sp/>integral<sp/>result,</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>possibly<sp/>in-place,<sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>/=<sp/>o2.</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceTrueDivide(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2<sp/>giving<sp/>a<sp/>float<sp/>result,</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>possibly<sp/>in-place,<sp/>or<sp/>null<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>/=<sp/>o2.</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceRemainder(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>dividing<sp/>o1<sp/>by<sp/>o2,<sp/>possibly<sp/>in-place,<sp/>or</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>%=<sp/>o2.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlacePower(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o3);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>raising<sp/>o1<sp/>to<sp/>the<sp/>power<sp/>of<sp/>o2,<sp/>possibly</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in-place,<sp/>or<sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1<sp/>**=<sp/>o2,<sp/>or<sp/>pow(o1,<sp/>o2,<sp/>o3)<sp/>if<sp/>o3<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceLshift(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>left<sp/>shifting<sp/>o1<sp/>by<sp/>o2,<sp/>possibly<sp/>in-place,<sp/>or</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>&lt;&lt;=<sp/>o2.</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceRshift(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>right<sp/>shifting<sp/>o1<sp/>by<sp/>o2,<sp/>possibly<sp/>in-place<sp/>or</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>&gt;&gt;=<sp/>o2.</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceAnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>bitwise<sp/>and<sp/>of<sp/>o1<sp/>and<sp/>o2,<sp/>possibly<sp/>in-place,</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>null<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1<sp/>&amp;=<sp/>o2.</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceXor(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>bitwise<sp/>exclusive<sp/>or<sp/>of<sp/>o1<sp/>by<sp/>o2,<sp/>possibly<sp/>in-place,<sp/>or</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o1<sp/>^=<sp/>o2.</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_InPlaceOr(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>bitwise<sp/>or<sp/>of<sp/>o1<sp/>and<sp/>o2,<sp/>possibly<sp/>in-place,</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>null<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1<sp/>|=<sp/>o2.</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyNumber_ToBase(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>integer<sp/>n<sp/>converted<sp/>to<sp/>a<sp/>string<sp/>with<sp/>a<sp/>base,<sp/>with<sp/>a<sp/>base</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>marker<sp/>of<sp/>0b,<sp/>0o<sp/>or<sp/>0x<sp/>prefixed<sp/>if<sp/>applicable.</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>n<sp/>is<sp/>not<sp/>an<sp/>int<sp/>object,<sp/>it<sp/>is<sp/>converted<sp/>with<sp/>PyNumber_Index<sp/>first.</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Sequence<sp/>protocol:*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_Check(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>1<sp/>if<sp/>the<sp/>object<sp/>provides<sp/>sequence<sp/>protocol,<sp/>and<sp/>zero</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>otherwise.</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PySequence_Size(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>size<sp/>of<sp/>sequence<sp/>object<sp/>o,<sp/>or<sp/>-1<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>DLL<sp/>compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PySequence_Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PySequence_Length(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_Length<sp/>PySequence_Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_Concat(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>concatenation<sp/>of<sp/>o1<sp/>and<sp/>o2<sp/>on<sp/>success,<sp/>and<sp/>NULL<sp/>on</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1+o2.</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_Repeat(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>count);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>result<sp/>of<sp/>repeating<sp/>sequence<sp/>object<sp/>o<sp/>count<sp/>times,</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o1*count.</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_GetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>ith<sp/>element<sp/>of<sp/>o,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o[i].</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_GetSlice(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i1,<sp/>Py_ssize_t<sp/>i2);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>slice<sp/>of<sp/>sequence<sp/>object<sp/>o<sp/>between<sp/>i1<sp/>and<sp/>i2,<sp/>or</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>NULL<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o[i1:i2].</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_SetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*v);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Assign<sp/>object<sp/>v<sp/>to<sp/>the<sp/>ith<sp/>element<sp/>of<sp/>o.<sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-1<sp/>on<sp/>failure;<sp/>return<sp/>0<sp/>on<sp/>success.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Python<sp/>statement<sp/>o[i]=v.</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_DelItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Delete<sp/>the<sp/>ith<sp/>element<sp/>of<sp/>object<sp/>v.<sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement:<sp/>del<sp/>o[i].</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_SetSlice(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i1,<sp/>Py_ssize_t<sp/>i2,</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*v);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Assign<sp/>the<sp/>sequence<sp/>object,<sp/>v,<sp/>to<sp/>the<sp/>slice<sp/>in<sp/>sequence</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>object,<sp/>o,<sp/>from<sp/>i1<sp/>to<sp/>i2.<sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>statement:<sp/>o[i1:i2]=v.</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_DelSlice(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>i1,<sp/>Py_ssize_t<sp/>i2);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Delete<sp/>the<sp/>slice<sp/>in<sp/>sequence<sp/>object,<sp/>o,<sp/>from<sp/>i1<sp/>to<sp/>i2.</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement:<sp/>del<sp/>o[i1:i2].</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_Tuple(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>sequence,<sp/>o,<sp/>as<sp/>a<sp/>tuple<sp/>on<sp/>success,<sp/>and<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>tuple(o)</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_List(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>sequence,<sp/>o,<sp/>as<sp/>a<sp/>list<sp/>on<sp/>success,<sp/>and<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>list(o)</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_Fast(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>sequence,<sp/>o,<sp/>as<sp/>a<sp/>list,<sp/>unless<sp/>it&apos;s<sp/>already<sp/>a</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>tuple<sp/>or<sp/>list.<sp/><sp/>Use<sp/>PySequence_Fast_GET_ITEM<sp/>to<sp/>access<sp/>the</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>members<sp/>of<sp/>this<sp/>list,<sp/>and<sp/>PySequence_Fast_GET_SIZE<sp/>to<sp/>get<sp/>its<sp/>length.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"></highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>If<sp/>the<sp/>object<sp/>does<sp/>not<sp/>support<sp/>iteration,</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>raises<sp/>a<sp/>TypeError<sp/>exception<sp/>with<sp/>m<sp/>as<sp/>the<sp/>message<sp/>text.</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_Fast_GET_SIZE(o)<sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyList_Check(o)<sp/>?<sp/>PyList_GET_SIZE(o)<sp/>:<sp/>PyTuple_GET_SIZE(o))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>size<sp/>of<sp/>o,<sp/>assuming<sp/>that<sp/>o<sp/>was<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PySequence_Fast<sp/>and<sp/>is<sp/>not<sp/>NULL.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_Fast_GET_ITEM(o,<sp/>i)\</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PyList_Check(o)<sp/>?<sp/>PyList_GET_ITEM(o,<sp/>i)<sp/>:<sp/>PyTuple_GET_ITEM(o,<sp/>i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>ith<sp/>element<sp/>of<sp/>o,<sp/>assuming<sp/>that<sp/>o<sp/>was<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PySequence_Fast,<sp/>and<sp/>that<sp/>i<sp/>is<sp/>within<sp/>bounds.</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_ITEM(o,<sp/>i)\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/>Py_TYPE(o)-&gt;tp_as_sequence-&gt;sq_item(o,<sp/>i)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assume<sp/>tp_as_sequence<sp/>and<sp/>sq_item<sp/>exist<sp/>and<sp/>that<sp/>i<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>need<sp/>to<sp/>be<sp/>corrected<sp/>for<sp/>a<sp/>negative<sp/>index</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_Fast_ITEMS(sf)<sp/>\</highlight></codeline>
<codeline lineno="1163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyList_Check(sf)<sp/>?<sp/>((PyListObject<sp/>*)(sf))-&gt;ob_item<sp/>\</highlight></codeline>
<codeline lineno="1164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>((PyTupleObject<sp/>*)(sf))-&gt;ob_item)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>underlying<sp/>item<sp/>array<sp/>for</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>object<sp/>retured<sp/>by<sp/>PySequence_Fast<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PySequence_Count(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*value);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>number<sp/>of<sp/>occurrences<sp/>on<sp/>value<sp/>on<sp/>o,<sp/>that<sp/>is,</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>return<sp/>the<sp/>number<sp/>of<sp/>keys<sp/>for<sp/>which<sp/>o[key]==value.<sp/><sp/>On</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure,<sp/>return<sp/>-1.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o.count(value).</highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_Contains(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*seq,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*ob);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>-1<sp/>if<sp/>error;<sp/>1<sp/>if<sp/>ob<sp/>in<sp/>seq;<sp/>0<sp/>if<sp/>ob<sp/>not<sp/>in<sp/>seq.</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Use<sp/>__contains__<sp/>if<sp/>possible,<sp/>else<sp/>_PySequence_IterSearch().</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_ITERSEARCH_COUNT<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_ITERSEARCH_INDEX<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_ITERSEARCH_CONTAINS<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>_PySequence_IterSearch(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*seq,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operation);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Iterate<sp/>over<sp/>seq.<sp/><sp/>Result<sp/>depends<sp/>on<sp/>the<sp/>operation:</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PY_ITERSEARCH_COUNT:<sp/><sp/>return<sp/>#<sp/>of<sp/>times<sp/>obj<sp/>appears<sp/>in<sp/>seq;<sp/>-1<sp/>if</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error.</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PY_ITERSEARCH_INDEX:<sp/><sp/>return<sp/>0-based<sp/>index<sp/>of<sp/>first<sp/>occurrence<sp/>of</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>in<sp/>seq;<sp/>set<sp/>ValueError<sp/>and<sp/>return<sp/>-1<sp/>if<sp/>none<sp/>found;</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>also<sp/>return<sp/>-1<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PY_ITERSEARCH_CONTAINS:<sp/><sp/>return<sp/>1<sp/>if<sp/>obj<sp/>in<sp/>seq,<sp/>else<sp/>0;<sp/>-1<sp/>on</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error.</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>DLL-level<sp/>backwards<sp/>compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PySequence_In</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PySequence_In(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*value);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>source-level<sp/>backwards<sp/>compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PySequence_In<sp/>PySequence_Contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Determine<sp/>if<sp/>o<sp/>contains<sp/>value.<sp/><sp/>If<sp/>an<sp/>item<sp/>in<sp/>o<sp/>is<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>X,<sp/>return<sp/>1,<sp/>otherwise<sp/>return<sp/>0.<sp/><sp/>On<sp/>error,<sp/>return<sp/>-1.<sp/><sp/>This</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>value<sp/>in<sp/>o.</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PySequence_Index(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*value);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>first<sp/>index<sp/>for<sp/>which<sp/>o[i]=value.<sp/><sp/>On<sp/>error,</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>return<sp/>-1.<sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>expression:<sp/>o.index(value).</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In-place<sp/>versions<sp/>of<sp/>some<sp/>of<sp/>the<sp/>above<sp/>Sequence<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_InPlaceConcat(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o1,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o2);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Append<sp/>o2<sp/>to<sp/>o1,<sp/>in-place<sp/>when<sp/>possible.<sp/>Return<sp/>the<sp/>resulting</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>object,<sp/>which<sp/>could<sp/>be<sp/>o1,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1<sp/>+=<sp/>o2.</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PySequence_InPlaceRepeat(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/>Py_ssize_t<sp/>count);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Repeat<sp/>o1<sp/>by<sp/>count,<sp/>in-place<sp/>when<sp/>possible.<sp/>Return<sp/>the<sp/>resulting</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>object,<sp/>which<sp/>could<sp/>be<sp/>o1,<sp/>or<sp/>NULL<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:<sp/>o1<sp/>*=<sp/>count.</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"></highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Mapping<sp/>protocol:*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyMapping_Check(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>1<sp/>if<sp/>the<sp/>object<sp/>provides<sp/>mapping<sp/>protocol,<sp/>and<sp/>zero</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>otherwise.</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyMapping_Size(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>keys<sp/>in<sp/>object<sp/>o<sp/>on<sp/>success,<sp/>and<sp/>-1<sp/>on</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>failure.<sp/><sp/>For<sp/>objects<sp/>that<sp/>do<sp/>not<sp/>provide<sp/>sequence<sp/>protocol,</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:<sp/>len(o).</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>DLL<sp/>compatibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PyMapping_Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(Py_ssize_t)<sp/>PyMapping_Length(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMapping_Length<sp/>PyMapping_Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implemented<sp/>as<sp/>a<sp/>macro:</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"></highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyMapping_DelItemString(PyObject<sp/>*o,<sp/>const<sp/>char<sp/>*key);</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"></highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Remove<sp/>the<sp/>mapping<sp/>for<sp/>object,<sp/>key,<sp/>from<sp/>the<sp/>object<sp/>*o.</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>Python<sp/>statement:<sp/>del<sp/>o[key].</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMapping_DelItemString(O,K)<sp/>PyObject_DelItemString((O),(K))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implemented<sp/>as<sp/>a<sp/>macro:</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"></highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>int<sp/>PyMapping_DelItem(PyObject<sp/>*o,<sp/>PyObject<sp/>*key);</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"></highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Remove<sp/>the<sp/>mapping<sp/>for<sp/>object,<sp/>key,<sp/>from<sp/>the<sp/>object<sp/>*o.</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Returns<sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>Python<sp/>statement:<sp/>del<sp/>o[key].</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyMapping_DelItem(O,K)<sp/>PyObject_DelItem((O),(K))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyMapping_HasKeyString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>success,<sp/>return<sp/>1<sp/>if<sp/>the<sp/>mapping<sp/>object<sp/>has<sp/>the<sp/>key,<sp/>key,</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>0<sp/>otherwise.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>key<sp/>in<sp/>o.</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"></highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyMapping_HasKey(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*key);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>1<sp/>if<sp/>the<sp/>mapping<sp/>object<sp/>has<sp/>the<sp/>key,<sp/>key,</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>0<sp/>otherwise.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>key<sp/>in<sp/>o.</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"></highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>always<sp/>succeeds.</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"></highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMapping_Keys(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>success,<sp/>return<sp/>a<sp/>list<sp/>or<sp/>tuple<sp/>of<sp/>the<sp/>keys<sp/>in<sp/>object<sp/>o.</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>failure,<sp/>return<sp/>NULL.</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMapping_Values(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>success,<sp/>return<sp/>a<sp/>list<sp/>or<sp/>tuple<sp/>of<sp/>the<sp/>values<sp/>in<sp/>object<sp/>o.</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>failure,<sp/>return<sp/>NULL.</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMapping_Items(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>success,<sp/>return<sp/>a<sp/>list<sp/>or<sp/>tuple<sp/>of<sp/>the<sp/>items<sp/>in<sp/>object<sp/>o,</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>where<sp/>each<sp/>item<sp/>is<sp/>a<sp/>tuple<sp/>containing<sp/>a<sp/>key-value<sp/>pair.</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>On<sp/>failure,<sp/>return<sp/>NULL.</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"></highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyMapping_GetItemString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Return<sp/>element<sp/>of<sp/>o<sp/>corresponding<sp/>to<sp/>the<sp/>object,<sp/>key,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>on<sp/>failure.<sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python<sp/>expression:</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>o[key].</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyMapping_SetItemString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*value);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Map<sp/>the<sp/>object,<sp/>key,<sp/>to<sp/>the<sp/>value,<sp/>v.<sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>-1<sp/>on<sp/>failure.<sp/><sp/>This<sp/>is<sp/>the<sp/>equivalent<sp/>of<sp/>the<sp/>Python</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>statement:<sp/>o[key]=v.</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_IsInstance(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*typeorclass);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>isinstance(object,<sp/>typeorclass)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_IsSubclass(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*typeorclass);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>issubclass(object,<sp/>typeorclass)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_RealIsInstance(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*inst,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*cls);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_RealIsSubclass(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*derived,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*cls);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>_PySequence_BytesToCharpArray(<ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_FreeCharPArray(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>array[]);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>by<sp/>buffer<sp/>API<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_add_one_to_index_F(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nd,<sp/>Py_ssize_t<sp/>*index,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>*shape);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_add_one_to_index_C(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nd,<sp/>Py_ssize_t<sp/>*index,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>*shape);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_ABSTRACTOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/abstract.h"/>
  </compounddef>
</doxygen>
