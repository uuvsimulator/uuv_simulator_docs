<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pyerrors_8h" kind="file" language="C++">
    <compoundname>pyerrors.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <incdepgraph>
      <node id="3468">
        <label>stdarg.h</label>
      </node>
      <node id="3467">
        <label>/usr/include/python3.6m/pyerrors.h</label>
        <link refid="pyerrors_8h"/>
        <childnode refid="3468" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3472">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3473">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3475">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3470">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3471" relation="include">
        </childnode>
        <childnode refid="3473" relation="include">
        </childnode>
        <childnode refid="3474" relation="include">
        </childnode>
        <childnode refid="3475" relation="include">
        </childnode>
        <childnode refid="3476" relation="include">
        </childnode>
      </node>
      <node id="3476">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3471">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3472" relation="include">
        </childnode>
      </node>
      <node id="3469">
        <label>/usr/include/python3.6m/pyerrors.h</label>
        <link refid="pyerrors_8h"/>
        <childnode refid="3470" relation="include">
        </childnode>
      </node>
      <node id="3474">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_base_exception_object" prot="public">PyBaseExceptionObject</innerclass>
    <innerclass refid="struct_py_syntax_error_object" prot="public">PySyntaxErrorObject</innerclass>
    <innerclass refid="struct_py_import_error_object" prot="public">PyImportErrorObject</innerclass>
    <innerclass refid="struct_py_unicode_error_object" prot="public">PyUnicodeErrorObject</innerclass>
    <innerclass refid="struct_py_system_exit_object" prot="public">PySystemExitObject</innerclass>
    <innerclass refid="struct_py_o_s_error_object" prot="public">PyOSErrorObject</innerclass>
    <innerclass refid="struct_py_stop_iteration_object" prot="public">PyStopIterationObject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pyerrors_8h_1a92151b86aec609714cf397a27d04b98b" prot="public" static="no">
        <name>PyException_HEAD</name>
        <initializer>PyObject_HEAD <ref refid="struct__object" kindref="compound">PyObject</ref> *dict;\
             <ref refid="struct__object" kindref="compound">PyObject</ref> *args; <ref refid="struct__object" kindref="compound">PyObject</ref> *traceback;\
             <ref refid="struct__object" kindref="compound">PyObject</ref> *context; <ref refid="struct__object" kindref="compound">PyObject</ref> *cause;\
             char suppress_context;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="11" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1aa5ca1591bb1902740decc515bdaa1c63" prot="public" static="no">
        <name>_Py_NO_RETURN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="101" column="10" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1abb17514a972d4bbfd3a247053d30561b" prot="public" static="no">
        <name>_PyErr_OCCURRED</name>
        <param></param>
        <initializer>(PyThreadState_GET()-&gt;curexc_type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="110" column="10" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1ae362d2e7c9c308f6d78a83c04dfbfa46" prot="public" static="no">
        <name>PyExceptionClass_Check</name>
        <param><defname>x</defname></param>
        <initializer>(PyType_Check((x)) &amp;&amp;                                               \
     PyType_FastSubclass((<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>*)(x), Py_TPFLAGS_BASE_EXC_SUBCLASS))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="135" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1a401733c07c90305de8165eecce2c1c34" prot="public" static="no">
        <name>PyExceptionInstance_Check</name>
        <param><defname>x</defname></param>
        <initializer>PyType_FastSubclass((x)-&gt;ob_type, Py_TPFLAGS_BASE_EXC_SUBCLASS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="139" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1a0a3ed6e0fe31e404c6b0a8c75d277923" prot="public" static="no">
        <name>PyExceptionClass_Name</name>
        <param><defname>x</defname></param>
        <initializer>((char *)(((<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>*)(x))-&gt;tp_name))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="142" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1ad3825cc895aabb9fe95256cef7ea90b7" prot="public" static="no">
        <name>PyExceptionInstance_Class</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="struct__object" kindref="compound">PyObject</ref>*)((x)-&gt;ob_type))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="145" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pyerrors_8h_1a54d108ac44714fcebf79cda8a6d41bde" prot="public" static="no">
        <name>PyErr_BadInternalCall</name>
        <param></param>
        <initializer>_PyErr_BadInternalCall(__FILE__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="322" column="9" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pyerrors_8h_1a0a3fd122939f92c0cce868c80a2fd591" prot="public" static="no">
        <type><ref refid="struct_py_o_s_error_object" kindref="compound">PyOSErrorObject</ref></type>
        <definition>typedef PyOSErrorObject PyEnvironmentErrorObject</definition>
        <argsstring></argsstring>
        <name>PyEnvironmentErrorObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="69" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pyerrors_8h_1ae1adbce218e7a9d09164012443191d24" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="84" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a70428392bdb8c39a9ca1c23f85188d0b" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> const char *</type>
        <definition>PyObject PyObject PyObject const char* filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="249" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a9848f15707456389149bad9324249089" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>size_t const char* format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="258" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1af27e072b898e3dadd1f3e73ec6723885" prot="public" static="no" mutable="no">
        <type>const char const char va_list</type>
        <definition>const char const char va_list vargs</definition>
        <argsstring></argsstring>
        <name>vargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="265" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a501b314f49b3a9ff6e7be599d94686ee" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int lineno</definition>
        <argsstring></argsstring>
        <name>lineno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="319" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1acafd952c0c8ec3fdb9ea901ca7b4d309" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>const char PyObject* base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="326" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1ae499fd1dcb7d7b6f55bee3393bd9f2b8" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>const char PyObject PyObject * dict</definition>
        <argsstring></argsstring>
        <name>dict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="326" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a5092a1bd79826902df03502891db05ce" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* doc</definition>
        <argsstring></argsstring>
        <name>doc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="328" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a9ed71ceb7fb2ff5c9cec940bc6880192" prot="public" static="no" mutable="no">
        <type>int int</type>
        <definition>int int col_offset</definition>
        <argsstring></argsstring>
        <name>col_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="369" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a7a1fb1953d13ae9f8cfe30a279ee5bbc" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const Py_UNICODE* object</definition>
        <argsstring></argsstring>
        <name>object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="391" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1abbd88c7a30e7a4643b0fc1675646d4a8" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t</type>
        <definition>Py_ssize_t length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="392" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1aa8947492e89646ab60e03369185bcd75" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="393" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a9db9c9cc5197fccfe59dec2d0557f92c" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t Py_ssize_t end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="394" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1ad791e9551441e8c5a36913013c59d48a" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t Py_ssize_t Py_ssize_t const char *</type>
        <definition>const char * reason</definition>
        <argsstring></argsstring>
        <name>reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="395" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a3655899f66ca98255b47208712b31518" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="444" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pyerrors_8h_1a854352f53b148adc24983a58a1866d66" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="495" column="1" bodyfile="/usr/include/python3.6m/pyerrors.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pyerrors_8h_1a444951237f0f5583293ccff4e97427e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyErr_SetNone(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1a594e94d06a818d120ac4991af776fdaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyErr_Occurred(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1abce1448c2eb2dc5f580c1ce55e0072eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyErr_GivenExceptionMatches(PyObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1acdf1a6acb6cab378938f5ad2a24832cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyObject *) PyExc_BaseException</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1a5f3572abae13318b4377875a549a7ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PySignal_SetWakeupFd</definition>
        <argsstring>(int fd)</argsstring>
        <name>PySignal_SetWakeupFd</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1a75fe2cf58a458a9864606fb9adf2707a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t const char</type>
        <definition>size_t const char Py_GCC_ATTRIBUTE</definition>
        <argsstring>((format(printf, 3, 4)))</argsstring>
        <name>Py_GCC_ATTRIBUTE</name>
        <param>
          <type>(format(printf, 3, 4))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyerrors_8h_1a2bd42affd00b7a2f901c365f283d23a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t const char va_list va</type>
        <definition>size_t const char va_list va Py_GCC_ATTRIBUTE</definition>
        <argsstring>((format(printf, 3, 0)))</argsstring>
        <name>Py_GCC_ATTRIBUTE</name>
        <param>
          <type>(format(printf, 3, 0))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyerrors.h" line="498" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_ERRORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_ERRORS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyException_HEAD<sp/>defines<sp/>the<sp/>initial<sp/>segment<sp/>of<sp/>every<sp/>exception<sp/>class.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyException_HEAD<sp/>PyObject_HEAD<sp/>PyObject<sp/>*dict;\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*args;<sp/>PyObject<sp/>*traceback;\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*context;<sp/>PyObject<sp/>*cause;\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>suppress_context;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="struct_py_base_exception_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<sp/><ref refid="struct_py_base_exception_object" kindref="compound">PyBaseExceptionObject</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="struct_py_syntax_error_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*msg;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*filename;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*lineno;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*offset;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*text;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*print_file_and_line;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}<sp/><ref refid="struct_py_syntax_error_object" kindref="compound">PySyntaxErrorObject</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="struct_py_import_error_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*msg;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*name;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*path;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/><ref refid="struct_py_import_error_object" kindref="compound">PyImportErrorObject</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="struct_py_unicode_error_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*encoding;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*<ref refid="struct__object" kindref="compound">object</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*reason;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="struct_py_unicode_error_object" kindref="compound">PyUnicodeErrorObject</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="struct_py_system_exit_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*code;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/><ref refid="struct_py_system_exit_object" kindref="compound">PySystemExitObject</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="struct_py_o_s_error_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*myerrno;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*strerror;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*filename;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*filename2;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*winerror;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>written;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>for<sp/>BlockingIOError,<sp/>-1<sp/>otherwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><ref refid="struct_py_o_s_error_object" kindref="compound">PyOSErrorObject</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="struct_py_stop_iteration_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>PyException_HEAD</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*value;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="struct_py_stop_iteration_object" kindref="compound">PyStopIterationObject</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compatibility<sp/>typedefs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_py_o_s_error_object" kindref="compound">PyOSErrorObject</ref><sp/><ref refid="struct_py_o_s_error_object" kindref="compound">PyEnvironmentErrorObject</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_py_o_s_error_object" kindref="compound">PyOSErrorObject</ref><sp/>PyWindowsErrorObject;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>handling<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SetNone(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SetObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyErr_SetKeyError(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SetString(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exception,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>utf-8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_Occurred(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_Clear(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_Fetch(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_Restore(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_GetExcInfo(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SetExcInfo(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(__GNUC_MAJOR__)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((__GNUC_MAJOR__<sp/>&gt;=<sp/>3)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(__GNUC_MAJOR__<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&gt;=<sp/>5)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_NO_RETURN<sp/>__attribute__((__noreturn__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_NO_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defined<sp/>in<sp/>Python/pylifecycle.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>Py_FatalError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message)<sp/>_Py_NO_RETURN;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(Py_DEBUG)<sp/>||<sp/>defined(Py_LIMITED_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyErr_OCCURRED()<sp/>PyErr_Occurred()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyErr_OCCURRED()<sp/>(PyThreadState_GET()-&gt;curexc_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Error<sp/>testing<sp/>and<sp/>normalization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyErr_GivenExceptionMatches(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyErr_ExceptionMatches(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_NormalizeException(<ref refid="struct__object" kindref="compound">PyObject</ref>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref>**,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref>**);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traceback<sp/>manipulation<sp/>(PEP<sp/>3134)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyException_SetTraceback(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyException_GetTraceback(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Cause<sp/>manipulation<sp/>(PEP<sp/>3134)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyException_GetCause(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyException_SetCause(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Context<sp/>manipulation<sp/>(PEP<sp/>3134)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyException_GetContext(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyException_SetContext(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyErr_ChainExceptions(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyExceptionClass_Check(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyType_Check((x))<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PyType_FastSubclass((PyTypeObject*)(x),<sp/>Py_TPFLAGS_BASE_EXC_SUBCLASS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyExceptionInstance_Check(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyType_FastSubclass((x)-&gt;ob_type,<sp/>Py_TPFLAGS_BASE_EXC_SUBCLASS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyExceptionClass_Name(x)<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((char<sp/>*)(((PyTypeObject*)(x))-&gt;tp_name))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyExceptionInstance_Class(x)<sp/>((PyObject*)((x)-&gt;ob_type))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Predefined<sp/>exceptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_BaseException;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_Exception;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_StopAsyncIteration;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_StopIteration;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_GeneratorExit;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ArithmeticError;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_LookupError;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_AssertionError;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_AttributeError;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_BufferError;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_EOFError;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_FloatingPointError;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_OSError;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ImportError;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03060000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ModuleNotFoundError;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_IndexError;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_KeyError;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_KeyboardInterrupt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_MemoryError;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_NameError;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_OverflowError;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_RuntimeError;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_RecursionError;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_NotImplementedError;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_SyntaxError;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_IndentationError;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_TabError;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ReferenceError;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_SystemError;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_SystemExit;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_TypeError;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnboundLocalError;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnicodeError;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnicodeEncodeError;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnicodeDecodeError;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnicodeTranslateError;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ValueError;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ZeroDivisionError;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_BlockingIOError;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_BrokenPipeError;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ChildProcessError;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ConnectionError;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ConnectionAbortedError;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ConnectionRefusedError;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ConnectionResetError;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_FileExistsError;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_FileNotFoundError;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_InterruptedError;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_IsADirectoryError;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_NotADirectoryError;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_PermissionError;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ProcessLookupError;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_TimeoutError;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compatibility<sp/>aliases<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_EnvironmentError;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_IOError;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_WindowsError;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Predefined<sp/>warning<sp/>categories<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_Warning;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UserWarning;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_DeprecationWarning;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_PendingDeprecationWarning;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_SyntaxWarning;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_RuntimeWarning;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_FutureWarning;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ImportWarning;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_UnicodeWarning;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_BytesWarning;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">PyAPI_DATA(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyExc_ResourceWarning;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convenience<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyErr_BadArgument(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_NoMemory(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromErrno(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromErrnoWithFilenameObject(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03040000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromErrnoWithFilenameObjects(</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromErrnoWithFilename(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(Py_LIMITED_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromErrnoWithUnicodeFilename(</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MS_WINDOWS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_Format(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exception,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_FormatV(</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exception,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>vargs);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>PyErr_Format(),<sp/>but<sp/>saves<sp/>current<sp/>exception<sp/>as<sp/>__context__<sp/>and</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/>__cause__.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyErr_FormatFromCause(</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exception,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromWindowsErrWithFilename(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>XXX<sp/>redeclare<sp/>to<sp/>use<sp/>WSTRING<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromWindowsErrWithUnicodeFilename(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetFromWindowsErr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetExcFromWindowsErrWithFilenameObject(</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03040000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetExcFromWindowsErrWithFilenameObjects(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetExcFromWindowsErrWithFilename(</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetExcFromWindowsErrWithUnicodeFilename(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetExcFromWindowsErr(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MS_WINDOWS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03060000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetImportErrorSubclass(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_SetImportError(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Export<sp/>the<sp/>old<sp/>function<sp/>so<sp/>that<sp/>the<sp/>existing<sp/>API<sp/>remains<sp/>available:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_BadInternalCall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyErr_BadInternalCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mask<sp/>the<sp/>old<sp/>API<sp/>with<sp/>a<sp/>call<sp/>to<sp/>the<sp/>new<sp/>API<sp/>for<sp/>code<sp/>compiled<sp/>under</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>Python<sp/>2.0:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyErr_BadInternalCall()<sp/>_PyErr_BadInternalCall(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>create<sp/>a<sp/>new<sp/>exception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_NewException(</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*base,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*dict);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_NewExceptionWithDoc(</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*doc,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*base,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*dict);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_WriteUnraisable(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>exceptions.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>that<sp/>attempts<sp/>to<sp/>replace<sp/>the<sp/>current<sp/>exception<sp/>with<sp/>one<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>same<sp/>type<sp/>but<sp/>with<sp/>a<sp/>prefix<sp/>added<sp/>to<sp/>the<sp/>exception<sp/>text.<sp/>The<sp/>resulting</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>exception<sp/>description<sp/>looks<sp/>like:</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>prefix<sp/>(exc_type:<sp/>original_exc_str)</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>Only<sp/>some<sp/>exceptions<sp/>can<sp/>be<sp/>safely<sp/>replaced.<sp/>If<sp/>the<sp/>function<sp/>determines</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>it<sp/>isn&apos;t<sp/>safe<sp/>to<sp/>perform<sp/>the<sp/>replacement,<sp/>it<sp/>will<sp/>leave<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>unmodified<sp/>exception<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>Returns<sp/>a<sp/>borrowed<sp/>reference<sp/>to<sp/>the<sp/>new<sp/>exception<sp/>(if<sp/>any),<sp/>NULL<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>existing<sp/>exception<sp/>was<sp/>left<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyErr_TrySetFromCause(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix_format,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>sigcheck.c<sp/>or<sp/>signalmodule.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyErr_CheckSignals(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SetInterrupt(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>signalmodule.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PySignal_SetWakeupFd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Support<sp/>for<sp/>adding<sp/>program<sp/>text<sp/>to<sp/>SyntaxErrors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SyntaxLocation(</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SyntaxLocationEx(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_offset);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyErr_SyntaxLocationObject(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*filename,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_offset);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_ProgramText(</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoded<sp/>from<sp/>the<sp/>filesystem<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyErr_ProgramTextObject(</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*filename,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>functions<sp/>are<sp/>used<sp/>to<sp/>create<sp/>and<sp/>modify<sp/>unicode</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>exceptions<sp/>from<sp/>C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>UnicodeDecodeError<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeDecodeError_Create(</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>UnicodeEncodeError<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeEncodeError_Create(</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>UnicodeTranslateError<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeTranslateError_Create(</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyUnicodeTranslateError_Create(</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>encoding<sp/>attribute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeEncodeError_GetEncoding(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="429"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeDecodeError_GetEncoding(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>object<sp/>attribute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeEncodeError_GetObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeDecodeError_GetObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeTranslateError_GetObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>start<sp/>attribute<sp/>(the<sp/>int<sp/>*<sp/>may<sp/>not<sp/>be<sp/>NULL)</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeEncodeError_GetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeDecodeError_GetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeTranslateError_GetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assign<sp/>a<sp/>new<sp/>value<sp/>to<sp/>the<sp/>start<sp/>attribute</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeEncodeError_SetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeDecodeError_SetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeTranslateError_SetStart(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>end<sp/>attribute<sp/>(the<sp/>int<sp/>*may<sp/>not<sp/>be<sp/>NULL)</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeEncodeError_GetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeDecodeError_GetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeTranslateError_GetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assign<sp/>a<sp/>new<sp/>value<sp/>to<sp/>the<sp/>end<sp/>attribute</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeEncodeError_SetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="457"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeDecodeError_SetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeTranslateError_SetEnd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>reason<sp/>attribute<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeEncodeError_GetReason(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeDecodeError_GetReason(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicodeTranslateError_GetReason(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assign<sp/>a<sp/>new<sp/>value<sp/>to<sp/>the<sp/>reason<sp/>attribute</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeEncodeError_SetReason(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeDecodeError_SetReason(</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicodeTranslateError_SetReason(</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*exc,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reason<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>APIs<sp/>aren&apos;t<sp/>really<sp/>part<sp/>of<sp/>the<sp/>error<sp/>implementation,<sp/>but</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>often<sp/>needed<sp/>to<sp/>format<sp/>error<sp/>messages;<sp/>the<sp/>native<sp/>C<sp/>lib<sp/>APIs<sp/>are</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/>not<sp/>available<sp/>on<sp/>all<sp/>platforms,<sp/>which<sp/>is<sp/>why<sp/>we<sp/>provide<sp/>emulations</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>for<sp/>those<sp/>platforms<sp/>in<sp/>Python/mysnprintf.c,</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>WARNING:<sp/><sp/>The<sp/>return<sp/>value<sp/>of<sp/>snprintf<sp/>varies<sp/>across<sp/>platforms;<sp/>do</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/>not<sp/>rely<sp/>on<sp/>any<sp/>particular<sp/>behavior;<sp/>eventually<sp/>the<sp/>C99<sp/>defn<sp/>may</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/>be<sp/>reliable.</highlight></codeline>
<codeline lineno="487"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MS_WIN32)<sp/>&amp;&amp;<sp/>!defined(HAVE_SNPRINTF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>HAVE_SNPRINTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>vsnprintf<sp/>_vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyOS_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_GCC_ATTRIBUTE((format(printf,<sp/>3,<sp/>4)));</highlight></codeline>
<codeline lineno="497"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyOS_vsnprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*format,<sp/>va_list<sp/>va)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_GCC_ATTRIBUTE((format(printf,<sp/>3,<sp/>0)));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_ERRORS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/pyerrors.h"/>
  </compounddef>
</doxygen>
