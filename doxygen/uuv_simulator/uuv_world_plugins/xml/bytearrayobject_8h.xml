<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bytearrayobject_8h" kind="file" language="C++">
    <compoundname>bytearrayobject.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <incdepgraph>
      <node id="2793">
        <label>stdarg.h</label>
      </node>
      <node id="2792">
        <label>/usr/include/python3.6m/bytearrayobject.h</label>
        <link refid="bytearrayobject_8h"/>
        <childnode refid="2793" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2797">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="2798">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="2800">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="2794">
        <label>/usr/include/python3.6m/bytearrayobject.h</label>
        <link refid="bytearrayobject_8h"/>
        <childnode refid="2795" relation="include">
        </childnode>
      </node>
      <node id="2795">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2796" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2799" relation="include">
        </childnode>
        <childnode refid="2800" relation="include">
        </childnode>
        <childnode refid="2801" relation="include">
        </childnode>
      </node>
      <node id="2801">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="2796">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2797" relation="include">
        </childnode>
      </node>
      <node id="2799">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_byte_array_object" prot="public">PyByteArrayObject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="bytearrayobject_8h_1ac313f94f05f7cb0d5ef8b2f5bd485719" prot="public" static="no">
        <name>PyByteArray_Check</name>
        <param><defname>self</defname></param>
        <initializer>PyObject_TypeCheck(self, &amp;PyByteArray_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="38" column="9" bodyfile="/usr/include/python3.6m/bytearrayobject.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytearrayobject_8h_1a34004ad37dfd2942f615cbc9c727b09a" prot="public" static="no">
        <name>PyByteArray_CheckExact</name>
        <param><defname>self</defname></param>
        <initializer>(Py_TYPE(self) == &amp;PyByteArray_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="39" column="9" bodyfile="/usr/include/python3.6m/bytearrayobject.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytearrayobject_8h_1a484cd2e26cb4c12405b47c2bbb73c60f" prot="public" static="no">
        <name>PyByteArray_AS_STRING</name>
        <param><defname>self</defname></param>
        <initializer>(assert(PyByteArray_Check(self)), \
     Py_SIZE(self) ? ((<ref refid="struct_py_byte_array_object" kindref="compound">PyByteArrayObject</ref> *)(self))-&gt;ob_start : _PyByteArray_empty_string)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="51" column="9" bodyfile="/usr/include/python3.6m/bytearrayobject.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytearrayobject_8h_1aff599d5fe9c8b18e8fe05364cb8de857" prot="public" static="no">
        <name>PyByteArray_GET_SIZE</name>
        <param><defname>self</defname></param>
        <initializer>(assert(PyByteArray_Check(self)), Py_SIZE(self))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="54" column="9" bodyfile="/usr/include/python3.6m/bytearrayobject.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bytearrayobject_8h_1a3655899f66ca98255b47208712b31518" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref></type>
        <definition>Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="44" column="1" bodyfile="/usr/include/python3.6m/bytearrayobject.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bytearrayobject_8h_1abbc919cee15497d95a5e91b9e3606188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyByteArray_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytearrayobject_8h_1ac729d61e5a606bd40a505a95b7c7eb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyByteArray_FromObject(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytearrayobject_8h_1ad6c5de83ed3e73ce8a397df042ebe42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) PyByteArray_Size(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytearrayobject_8h_1ad564878eb94db2d7f894424860e7a86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(char *) PyByteArray_AsString(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytearrayobject_8h_1af89b2d8c14b24b9798bddcf28593ef2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyByteArray_Resize(PyObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytearrayobject_8h_1a6a40d2effd2a7022646b1f3f06f65d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(char) _PyByteArray_empty_string[]</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/bytearrayobject.h" line="56" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>ByteArray<sp/>object<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_BYTEARRAYOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BYTEARRAYOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>PyByteArrayObject<sp/>represents<sp/>a<sp/>mutable<sp/>array<sp/>of<sp/>bytes.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>Python<sp/>API<sp/>is<sp/>that<sp/>of<sp/>a<sp/>sequence;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>the<sp/>bytes<sp/>are<sp/>mapped<sp/>to<sp/>ints<sp/>in<sp/>[0,<sp/>256).</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Bytes<sp/>are<sp/>not<sp/>characters;<sp/>they<sp/>may<sp/>be<sp/>used<sp/>to<sp/>encode<sp/>characters.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>The<sp/>only<sp/>way<sp/>to<sp/>go<sp/>between<sp/>bytes<sp/>and<sp/>str/unicode<sp/>is<sp/>via<sp/>encoding</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>and<sp/>decoding.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>convenience<sp/>of<sp/>C<sp/>programmers,<sp/>the<sp/>bytes<sp/>type<sp/>is<sp/>considered</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>to<sp/>contain<sp/>a<sp/>char<sp/>pointer,<sp/>not<sp/>an<sp/>unsigned<sp/>char<sp/>pointer.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Object<sp/>layout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_py_byte_array_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_VAR_HEAD</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>ob_alloc;<sp/></highlight><highlight class="comment">/*<sp/>How<sp/>many<sp/>bytes<sp/>allocated<sp/>in<sp/>ob_bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ob_bytes;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Physical<sp/>backing<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ob_start;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Logical<sp/>start<sp/>inside<sp/>ob_bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX(nnorwitz):<sp/>should<sp/>ob_exports<sp/>be<sp/>Py_ssize_t?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ob_exports;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>How<sp/>many<sp/>buffer<sp/>exports<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/><ref refid="struct_py_byte_array_object" kindref="compound">PyByteArrayObject</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyByteArray_Type;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyByteArrayIter_Type;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>check<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyByteArray_Check(self)<sp/>PyObject_TypeCheck(self,<sp/>&amp;PyByteArray_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyByteArray_CheckExact(self)<sp/>(Py_TYPE(self)<sp/>==<sp/>&amp;PyByteArray_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Direct<sp/>API<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyByteArray_FromObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyByteArray_Concat(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyByteArray_FromStringAndSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyByteArray_Size(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>PyByteArray_AsString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyByteArray_Resize(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros,<sp/>trading<sp/>safety<sp/>for<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyByteArray_AS_STRING(self)<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyByteArray_Check(self)),<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>Py_SIZE(self)<sp/>?<sp/>((PyByteArrayObject<sp/>*)(self))-&gt;ob_start<sp/>:<sp/>_PyByteArray_empty_string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyByteArray_GET_SIZE(self)<sp/>(assert(PyByteArray_Check(self)),<sp/>Py_SIZE(self))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>_PyByteArray_empty_string[];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_BYTEARRAYOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/bytearrayobject.h"/>
  </compounddef>
</doxygen>
