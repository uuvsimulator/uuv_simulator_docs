<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ceval_8h" kind="file" language="C++">
    <compoundname>ceval.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="2827">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="2828">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="2830">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="2825">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2826" relation="include">
        </childnode>
        <childnode refid="2828" relation="include">
        </childnode>
        <childnode refid="2829" relation="include">
        </childnode>
        <childnode refid="2830" relation="include">
        </childnode>
        <childnode refid="2831" relation="include">
        </childnode>
      </node>
      <node id="2831">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="2826">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2827" relation="include">
        </childnode>
      </node>
      <node id="2824">
        <label>/usr/include/python3.6m/ceval.h</label>
        <link refid="ceval_8h"/>
        <childnode refid="2825" relation="include">
        </childnode>
      </node>
      <node id="2829">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ceval_8h_1a8f2aeb1363ceb7606f43948b5f591141" prot="public" static="no">
        <name>PyEval_CallObject</name>
        <param><defname>func</defname></param>
        <param><defname>arg</defname></param>
        <initializer>PyEval_CallObjectWithKeywords(func, arg, (<ref refid="struct__object" kindref="compound">PyObject</ref> *)NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="14" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a3124e3a9fbf0606b810b929aeb95eb2f" prot="public" static="no">
        <name>Py_EnterRecursiveCall</name>
        <param><defname>where</defname></param>
        <initializer>(_Py_MakeRecCheck(PyThreadState_GET()-&gt;recursion_depth) &amp;&amp;  \
             _Py_CheckRecursiveCall(where))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="80" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1aeb326f30a27af05cc29cfcb80ddd477c" prot="public" static="no">
        <name>Py_LeaveRecursiveCall</name>
        <param></param>
        <initializer>do{ if(_Py_MakeEndRecCheck(PyThreadState_GET()-&gt;recursion_depth))  \
      PyThreadState_GET()-&gt;overflowed = 0;  \
    } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="83" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1ab23a17dd8bb90720111f698a7ec6730a" prot="public" static="no">
        <name>_Py_MakeRecCheck</name>
        <param><defname>x</defname></param>
        <initializer>(++(x) &gt; _Py_CheckRecursionLimit)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="99" column="12" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1ac6f8a4ea14cc8f540c9e1fafd151b1cb" prot="public" static="no">
        <name>_Py_RecursionLimitLowerWaterMark</name>
        <param><defname>limit</defname></param>
        <initializer>(((limit) &gt; 200) \
        ? ((limit) - 50) \
        : (3 * ((limit) &gt;&gt; 2)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="105" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a9b7777191f12c39e744eb3f37689ee69" prot="public" static="no">
        <name>_Py_MakeEndRecCheck</name>
        <param><defname>x</defname></param>
        <initializer>(--(x) &lt; _Py_RecursionLimitLowerWaterMark(_Py_CheckRecursionLimit))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="110" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a019d8570390bf65d0ae0aa6f25925ef4" prot="public" static="no">
        <name>Py_ALLOW_RECURSION</name>
        <initializer>do { unsigned char _old = PyThreadState_GET()-&gt;recursion_critical;\
    PyThreadState_GET()-&gt;recursion_critical = 1;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="113" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1aa2595b475396d53c78077f8c09f35bc1" prot="public" static="no">
        <name>Py_END_ALLOW_RECURSION</name>
        <initializer>PyThreadState_GET()-&gt;recursion_critical = _old; \
  } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="117" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a0565a28df0af7c92aa756e700f3b407b" prot="public" static="no">
        <name>Py_BEGIN_ALLOW_THREADS</name>
        <initializer>{</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="211" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1aaad51d749680a7d1bd156c272dce85f8" prot="public" static="no">
        <name>Py_BLOCK_THREADS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="212" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a5a0edf36b2b2f006dc3e2dc68d150875" prot="public" static="no">
        <name>Py_UNBLOCK_THREADS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="213" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a2ab8707d055da49bed153a0ddc2d363e" prot="public" static="no">
        <name>Py_END_ALLOW_THREADS</name>
        <initializer>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="214" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a99ebfb9ef8ad2f3092520df06544699a" prot="public" static="no">
        <name>FVC_MASK</name>
        <initializer>0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="225" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1aae013a65d4a5aa082421045a5cf3a327" prot="public" static="no">
        <name>FVC_NONE</name>
        <initializer>0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="226" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a9735341d7bce12eaaff2f35ff2b72a72" prot="public" static="no">
        <name>FVC_STR</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="227" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a7c3951fa14676e25561df7e7ecbb1c81" prot="public" static="no">
        <name>FVC_REPR</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="228" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1ad6772132dba41ede5d0aa5c343c14953" prot="public" static="no">
        <name>FVC_ASCII</name>
        <initializer>0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="229" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1adbe66738747ba8e887f292c642097a11" prot="public" static="no">
        <name>FVS_MASK</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="230" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ceval_8h_1a344bccf9186c5e0cb9e9b54a706114e9" prot="public" static="no">
        <name>FVS_HAVE_SPEC</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="231" column="9" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ceval_8h_1ad61773d508168edac5109211128610c7" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="11" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ceval_8h_1a473a03d538da6182ca0dbd4cfc71eabf" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject* kwargs</definition>
        <argsstring></argsstring>
        <name>kwargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="11" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ceval_8h_1a3201ff266fa2a40f2ec1caf10e543db1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char const char const char* format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="18" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ceval_8h_1a236df695b5e22644646689e9c1da3343" prot="public" static="no" mutable="no">
        <type>const char const char *</type>
        <definition>const char const char* methodname</definition>
        <argsstring></argsstring>
        <name>methodname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="20" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ceval_8h_1a9ce2ec4812a92cb6ab39f6e81e9173a9" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* arg</definition>
        <argsstring></argsstring>
        <name>arg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="48" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ceval_8h_1a5b3a002558aa7b1ffafe3f2901fe73c8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int exc</definition>
        <argsstring></argsstring>
        <name>exc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="126" column="1" bodyfile="/usr/include/python3.6m/ceval.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ceval_8h_1a466bf85fe18fef2c0a982701eb0f3827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyEval_CallObjectWithKeywords(PyObject *func</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="10" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1a6aa73626b4d85d06ce4e683b15f4b10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char const char const char</type>
        <definition>const char const char const char PyAPI_FUNC</definition>
        <argsstring>(void) PyEval_SetProfile(Py_tracefunc</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1ab490a23ca08bc36c558a934790f1280a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(struct _frame *) PyEval_GetFrame(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>struct <ref refid="struct__frame" kindref="compound">_frame</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1aca879604ef3295ca2c454ca60dff51fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyEval_MergeCompilerFlags(PyCompilerFlags *cf)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1aaf45fbca2296a303bdaa0ded4c596a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(int) _Py_CheckRecursionLimit</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1a563e166134fa88e798453cde67653ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(const char *) PyEval_GetFuncName(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ceval_8h_1a9e6db70e61b9c1afd08bf2cb7af07b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyThreadState *) PyEval_SaveThread(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__ts" kindref="compound">PyThreadState</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/ceval.h" line="176" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_CEVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_CEVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interface<sp/>to<sp/>random<sp/>parts<sp/>in<sp/>ceval.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_CallObjectWithKeywords(</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*func,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwargs);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Inline<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyEval_CallObject(func,arg)<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyEval_CallObjectWithKeywords(func,<sp/>arg,<sp/>(PyObject<sp/>*)NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_CallFunction(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_CallMethod(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*methodname,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_SetProfile(Py_tracefunc,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_SetTrace(Py_tracefunc,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SetCoroutineWrapper(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyEval_GetCoroutineWrapper(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SetAsyncGenFirstiter(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyEval_GetAsyncGenFirstiter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SetAsyncGenFinalizer(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyEval_GetAsyncGenFinalizer(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__frame" kindref="compound">_frame</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>including<sp/>frameobject.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_GetBuiltins(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_GetGlobals(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_GetLocals(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__frame" kindref="compound">_frame</ref><sp/>*)<sp/>PyEval_GetFrame(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Look<sp/>at<sp/>the<sp/>current<sp/>frame&apos;s<sp/>(if<sp/>any)<sp/>code&apos;s<sp/>co_flags,<sp/>and<sp/>turn<sp/>on</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>the<sp/>corresponding<sp/>compiler<sp/>flags<sp/>in<sp/>cf-&gt;cf_flags.<sp/><sp/>Return<sp/>1<sp/>if<sp/>any</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>flag<sp/>was<sp/>set,<sp/>else<sp/>return<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyEval_MergeCompilerFlags(<ref refid="struct_py_compiler_flags" kindref="compound">PyCompilerFlags</ref><sp/>*cf);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_AddPendingCall(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SignalReceived(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_MakePendingCalls(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Protection<sp/>against<sp/>deeply<sp/>nested<sp/>recursive<sp/>calls</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>In<sp/>Python<sp/>3.0,<sp/>this<sp/>protection<sp/>has<sp/>two<sp/>levels:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*<sp/>normal<sp/>anti-recursion<sp/>protection<sp/>is<sp/>triggered<sp/>when<sp/>the<sp/>recursion<sp/>level</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>exceeds<sp/>the<sp/>current<sp/>recursion<sp/>limit.<sp/>It<sp/>raises<sp/>a<sp/>RecursionError,<sp/>and<sp/>sets</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>&quot;overflowed&quot;<sp/>flag<sp/>in<sp/>the<sp/>thread<sp/>state<sp/>structure.<sp/>This<sp/>flag</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>temporarily<sp/>*disables*<sp/>the<sp/>normal<sp/>protection;<sp/>this<sp/>allows<sp/>cleanup<sp/>code</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>potentially<sp/>outgrow<sp/>the<sp/>recursion<sp/>limit<sp/>while<sp/>processing<sp/>the</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>RecursionError.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>*<sp/>&quot;last<sp/>chance&quot;<sp/>anti-recursion<sp/>protection<sp/>is<sp/>triggered<sp/>when<sp/>the<sp/>recursion</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>level<sp/>exceeds<sp/>&quot;current<sp/>recursion<sp/>limit<sp/>+<sp/>50&quot;.<sp/>By<sp/>construction,<sp/>this</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>protection<sp/>can<sp/>only<sp/>be<sp/>triggered<sp/>when<sp/>the<sp/>&quot;overflowed&quot;<sp/>flag<sp/>is<sp/>set.<sp/>It</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>means<sp/>the<sp/>cleanup<sp/>code<sp/>has<sp/>itself<sp/>gone<sp/>into<sp/>an<sp/>infinite<sp/>loop,<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>RecursionError<sp/>has<sp/>been<sp/>mistakingly<sp/>ignored.<sp/>When<sp/>this<sp/>protection<sp/>is</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>triggered,<sp/>the<sp/>interpreter<sp/>aborts<sp/>with<sp/>a<sp/>Fatal<sp/>Error.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>In<sp/>addition,<sp/>the<sp/>&quot;overflowed&quot;<sp/>flag<sp/>is<sp/>automatically<sp/>reset<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>recursion<sp/>level<sp/>drops<sp/>below<sp/>&quot;current<sp/>recursion<sp/>limit<sp/>-<sp/>50&quot;.<sp/>This<sp/>heuristic</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>is<sp/>meant<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>normal<sp/>anti-recursion<sp/>protection<sp/>doesn&apos;t<sp/>get</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>disabled<sp/>too<sp/>long.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>Please<sp/>note:<sp/>this<sp/>scheme<sp/>has<sp/>its<sp/>own<sp/>limitations.<sp/>See:</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>http://mail.python.org/pipermail/python-dev/2008-August/082106.html</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>for<sp/>some<sp/>observations.</highlight></codeline>
<codeline lineno="76"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>Py_SetRecursionLimit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_GetRecursionLimit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_EnterRecursiveCall(where)<sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_Py_MakeRecCheck(PyThreadState_GET()-&gt;recursion_depth)<sp/>&amp;&amp;<sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_CheckRecursiveCall(where))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_LeaveRecursiveCall()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do{<sp/>if(_Py_MakeEndRecCheck(PyThreadState_GET()-&gt;recursion_depth))<sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState_GET()-&gt;overflowed<sp/>=<sp/>0;<sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_Py_CheckRecursiveCall(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*where);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_Py_CheckRecursionLimit;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_STACKCHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>With<sp/>USE_STACKCHECK,<sp/>we<sp/>artificially<sp/>decrement<sp/>the<sp/>recursion<sp/>limit<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>to<sp/>trigger<sp/>regular<sp/>stack<sp/>checks<sp/>in<sp/>_Py_CheckRecursiveCall(),<sp/>except<sp/>if</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>the<sp/>&quot;overflowed&quot;<sp/>flag<sp/>is<sp/>set,<sp/>in<sp/>which<sp/>case<sp/>we<sp/>need<sp/>the<sp/>true<sp/>value</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>of<sp/>_Py_CheckRecursionLimit<sp/>for<sp/>_Py_MakeEndRecCheck()<sp/>to<sp/>function<sp/>properly.</highlight></codeline>
<codeline lineno="95"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_MakeRecCheck(x)<sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(++(x)<sp/>&gt;<sp/>(_Py_CheckRecursionLimit<sp/>+=<sp/>PyThreadState_GET()-&gt;overflowed<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_MakeRecCheck(x)<sp/><sp/>(++(x)<sp/>&gt;<sp/>_Py_CheckRecursionLimit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>&quot;lower-water<sp/>mark&quot;<sp/>for<sp/>a<sp/>recursion<sp/>limit.<sp/>When</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>Py_LeaveRecursiveCall()<sp/>is<sp/>called<sp/>with<sp/>a<sp/>recursion<sp/>depth<sp/>below<sp/>this<sp/>mark,</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>the<sp/>overflowed<sp/>flag<sp/>is<sp/>reset<sp/>to<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_RecursionLimitLowerWaterMark(limit)<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((limit)<sp/>&gt;<sp/>200)<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>((limit)<sp/>-<sp/>50)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(3<sp/>*<sp/>((limit)<sp/>&gt;&gt;<sp/>2)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_MakeEndRecCheck(x)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(--(x)<sp/>&lt;<sp/>_Py_RecursionLimitLowerWaterMark(_Py_CheckRecursionLimit))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_ALLOW_RECURSION<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>unsigned<sp/>char<sp/>_old<sp/>=<sp/>PyThreadState_GET()-&gt;recursion_critical;\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyThreadState_GET()-&gt;recursion_critical<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_END_ALLOW_RECURSION<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyThreadState_GET()-&gt;recursion_critical<sp/>=<sp/>_old;<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>}<sp/>while(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>PyEval_GetFuncName(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>PyEval_GetFuncDesc(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_GetCallStats(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_EvalFrame(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__frame" kindref="compound">_frame</ref><sp/>*);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyEval_EvalFrameEx(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__frame" kindref="compound">_frame</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exc);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyEval_EvalFrameDefault(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__frame" kindref="compound">_frame</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exc);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interface<sp/>for<sp/>threads.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>A<sp/>module<sp/>that<sp/>plans<sp/>to<sp/>do<sp/>a<sp/>blocking<sp/>system<sp/>call<sp/>(or<sp/>something<sp/>else</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>that<sp/>lasts<sp/>a<sp/>long<sp/>time<sp/>and<sp/>doesn&apos;t<sp/>touch<sp/>Python<sp/>data)<sp/>can<sp/>allow<sp/>other</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>threads<sp/>to<sp/>run<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/>...preparations<sp/>here...</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_BEGIN_ALLOW_THREADS</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>...blocking<sp/>system<sp/>call<sp/>here...</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_END_ALLOW_THREADS</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>...interpret<sp/>result<sp/>here...</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>The<sp/>Py_BEGIN_ALLOW_THREADS/Py_END_ALLOW_THREADS<sp/>pair<sp/>expands<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>{}-surrounded<sp/>block.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>To<sp/>leave<sp/>the<sp/>block<sp/>in<sp/>the<sp/>middle<sp/>(e.g.,<sp/>with<sp/>return),<sp/>you<sp/>must<sp/>insert</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>a<sp/>line<sp/>containing<sp/>Py_BLOCK_THREADS<sp/>before<sp/>the<sp/>return,<sp/>e.g.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(...premature_exit...)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_BLOCK_THREADS</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetFromErrno(PyExc_IOError);</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>An<sp/>alternative<sp/>is:</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_BLOCK_THREADS</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(...premature_exit...)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetFromErrno(PyExc_IOError);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_UNBLOCK_THREADS</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/>For<sp/>convenience,<sp/>that<sp/>the<sp/>value<sp/>of<sp/>&apos;errno&apos;<sp/>is<sp/>restored<sp/>across</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/>Py_END_ALLOW_THREADS<sp/>and<sp/>Py_BLOCK_THREADS.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>WARNING:<sp/>NEVER<sp/>NEST<sp/>CALLS<sp/>TO<sp/>Py_BEGIN_ALLOW_THREADS<sp/>AND</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>Py_END_ALLOW_THREADS!!!</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>The<sp/>function<sp/>PyEval_InitThreads()<sp/>should<sp/>be<sp/>called<sp/>only<sp/>from</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>init_thread()<sp/>in<sp/>&quot;_threadmodule.c&quot;.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>not<sp/>yet<sp/>all<sp/>candidates<sp/>have<sp/>been<sp/>converted<sp/>to<sp/>use<sp/>this</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>mechanism!</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__ts" kindref="compound">PyThreadState</ref><sp/>*)<sp/>PyEval_SaveThread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_RestoreThread(<ref refid="struct__ts" kindref="compound">PyThreadState</ref><sp/>*);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><sp/>PyEval_ThreadsInitialized(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_InitThreads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_FiniThreads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_AcquireLock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_ReleaseLock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_AcquireThread(<ref refid="struct__ts" kindref="compound">PyThreadState</ref><sp/>*tstate);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_ReleaseThread(<ref refid="struct__ts" kindref="compound">PyThreadState</ref><sp/>*tstate);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyEval_ReInitThreads(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SetSwitchInterval(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>microseconds);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>_PyEval_GetSwitchInterval(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>_PyEval_RequestCodeExtraIndex(freefunc);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BEGIN_ALLOW_THREADS<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*_save;<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_save<sp/>=<sp/>PyEval_SaveThread();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BLOCK_THREADS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyEval_RestoreThread(_save);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNBLOCK_THREADS<sp/><sp/><sp/><sp/><sp/><sp/>_save<sp/>=<sp/>PyEval_SaveThread();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_END_ALLOW_THREADS<sp/><sp/><sp/><sp/>PyEval_RestoreThread(_save);<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!WITH_THREAD<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BEGIN_ALLOW_THREADS<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BLOCK_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNBLOCK_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_END_ALLOW_THREADS<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!WITH_THREAD<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyEval_SliceIndex(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyEval_SliceIndexNotNone(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t<sp/>*);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyEval_SignalAsyncExc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Masks<sp/>and<sp/>values<sp/>used<sp/>by<sp/>FORMAT_VALUE<sp/>opcode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVC_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVC_NONE<sp/><sp/><sp/><sp/><sp/><sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVC_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVC_REPR<sp/><sp/><sp/><sp/><sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVC_ASCII<sp/><sp/><sp/><sp/><sp/>0x3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVS_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FVS_HAVE_SPEC<sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_CEVAL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/ceval.h"/>
  </compounddef>
</doxygen>
