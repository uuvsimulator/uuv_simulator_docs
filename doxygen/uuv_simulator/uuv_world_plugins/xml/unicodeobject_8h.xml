<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="unicodeobject_8h" kind="file" language="C++">
    <compoundname>unicodeobject.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">ctype.h</includes>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <incdepgraph>
      <node id="3793">
        <label>stdarg.h</label>
      </node>
      <node id="3792">
        <label>/usr/include/python3.6m/unicodeobject.h</label>
        <link refid="unicodeobject_8h"/>
        <childnode refid="3793" relation="include">
        </childnode>
        <childnode refid="3794" relation="include">
        </childnode>
      </node>
      <node id="3794">
        <label>ctype.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3798">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3799">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3795">
        <label>/usr/include/python3.6m/unicodeobject.h</label>
        <link refid="unicodeobject_8h"/>
        <childnode refid="3796" relation="include">
        </childnode>
      </node>
      <node id="3801">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3796">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3797" relation="include">
        </childnode>
        <childnode refid="3799" relation="include">
        </childnode>
        <childnode refid="3800" relation="include">
        </childnode>
        <childnode refid="3801" relation="include">
        </childnode>
        <childnode refid="3802" relation="include">
        </childnode>
      </node>
      <node id="3802">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3797">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3798" relation="include">
        </childnode>
      </node>
      <node id="3800">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_a_s_c_i_i_object" prot="public">PyASCIIObject</innerclass>
    <innerclass refid="struct_py_compact_unicode_object" prot="public">PyCompactUnicodeObject</innerclass>
    <innerclass refid="struct_py_unicode_object" prot="public">PyUnicodeObject</innerclass>
    <innerclass refid="struct___py_unicode_writer" prot="public">_PyUnicodeWriter</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="unicodeobject_8h_1ac9d6b8fe39bc1c377dc6e7ae1aa35c29" prot="public" static="no">
        <name>Py_USING_UNICODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="65" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a06ffed2e14e485b2aa0512815be7c691" prot="public" static="no">
        <name>Py_UNICODE_SIZE</name>
        <initializer>SIZEOF_WCHAR_T</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="71" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aabaac66b24d6f6185b43ee841e961b54" prot="public" static="no">
        <name>PY_UNICODE_TYPE</name>
        <initializer>wchar_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="92" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a8df36fa3cc328cd4d6cc041948745d5a" prot="public" static="no">
        <name>Py_UNICODE_ISSPACE</name>
        <param><defname>ch</defname></param>
        <initializer>((ch) &lt; 128U ? _Py_ascii_whitespace[(ch)] : _PyUnicode_IsWhitespace(ch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="129" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a5e84b2520884f20335db73cf3d9340ae" prot="public" static="no">
        <name>Py_UNICODE_ISLOWER</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsLowercase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="132" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a0ba0c2deb2661ce0265535332ad5bc1b" prot="public" static="no">
        <name>Py_UNICODE_ISUPPER</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsUppercase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="133" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a6a8101251f5cf6a63d72035dac8c3251" prot="public" static="no">
        <name>Py_UNICODE_ISTITLE</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsTitlecase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="134" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a38d3a75d58757c1578865f83bd5059e5" prot="public" static="no">
        <name>Py_UNICODE_ISLINEBREAK</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsLinebreak(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="135" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1abafb159aac4863e0593b171dd01226b0" prot="public" static="no">
        <name>Py_UNICODE_TOLOWER</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToLowercase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="137" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1adf4c7af738e37debd1e9326b4e0d30c5" prot="public" static="no">
        <name>Py_UNICODE_TOUPPER</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToUppercase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="138" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ae9e15183f3e2a891da17348de1b326d1" prot="public" static="no">
        <name>Py_UNICODE_TOTITLE</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToTitlecase(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="139" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aeebfb68bfd5ef0fff7b83aa0f3dab639" prot="public" static="no">
        <name>Py_UNICODE_ISDECIMAL</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsDecimalDigit(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="141" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a376a34c7a6a56932e7548b506fcdc89e" prot="public" static="no">
        <name>Py_UNICODE_ISDIGIT</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsDigit(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="142" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aad5c5f4e0e37c4fb5da91fa11a74f348" prot="public" static="no">
        <name>Py_UNICODE_ISNUMERIC</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsNumeric(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="143" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a6f2cc46ff22b063601a48c27eec83bda" prot="public" static="no">
        <name>Py_UNICODE_ISPRINTABLE</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsPrintable(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="144" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a5f9a01da4027371531525392e1d4cdc1" prot="public" static="no">
        <name>Py_UNICODE_TODECIMAL</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToDecimalDigit(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="146" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a901eaaf20c937fb02931624753173c3f" prot="public" static="no">
        <name>Py_UNICODE_TODIGIT</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToDigit(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="147" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a62445cc4e15ed0649e43f3eef8c7bdec" prot="public" static="no">
        <name>Py_UNICODE_TONUMERIC</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_ToNumeric(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="148" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a4d681cbb4de008a06726879409d8324a" prot="public" static="no">
        <name>Py_UNICODE_ISALPHA</name>
        <param><defname>ch</defname></param>
        <initializer>_PyUnicode_IsAlpha(ch)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="150" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a3213a1990f36e17f543f6ee92efe744b" prot="public" static="no">
        <name>Py_UNICODE_ISALNUM</name>
        <param><defname>ch</defname></param>
        <initializer>(Py_UNICODE_ISALPHA(ch) || \
    Py_UNICODE_ISDECIMAL(ch) || \
    Py_UNICODE_ISDIGIT(ch) || \
    Py_UNICODE_ISNUMERIC(ch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="152" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aafe7d8c039dff9eb396d016c3f3b429b" prot="public" static="no">
        <name>Py_UNICODE_COPY</name>
        <param><defname>target</defname></param>
        <param><defname>source</defname></param>
        <param><defname>length</defname></param>
        <initializer>memcpy((target), (source), (length)*sizeof(Py_UNICODE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="158" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aaed6ac6c038e1b73a3ba4e1b92fb7904" prot="public" static="no">
        <name>Py_UNICODE_FILL</name>
        <param><defname>target</defname></param>
        <param><defname>value</defname></param>
        <param><defname>length</defname></param>
        <initializer>do {Py_ssize_t i_; Py_UNICODE *t_ = (target); Py_UNICODE v_ = (value);\
        for (i_ = 0; i_ &lt; (length); i_++) t_[i_] = v_;\
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="161" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a9ce8ec300f9c1b4b63e7ab6cba669a8c" prot="public" static="no">
        <name>Py_UNICODE_IS_SURROGATE</name>
        <param><defname>ch</defname></param>
        <initializer>(0xD800 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="167" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a286a9030fdb81580f1cbb5fd96b44bb1" prot="public" static="no">
        <name>Py_UNICODE_IS_HIGH_SURROGATE</name>
        <param><defname>ch</defname></param>
        <initializer>(0xD800 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDBFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="168" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a379767128cc02c613b1142682110bb5b" prot="public" static="no">
        <name>Py_UNICODE_IS_LOW_SURROGATE</name>
        <param><defname>ch</defname></param>
        <initializer>(0xDC00 &lt;= (ch) &amp;&amp; (ch) &lt;= 0xDFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="169" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a096ca747b1918979fc9f9e4a39f7458f" prot="public" static="no">
        <name>Py_UNICODE_JOIN_SURROGATES</name>
        <param><defname>high</defname></param>
        <param><defname>low</defname></param>
        <initializer>(((((Py_UCS4)(high) &amp; 0x03FF) &lt;&lt; 10) |      \
      ((Py_UCS4)(low) &amp; 0x03FF)) + 0x10000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="171" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ad60f6f3fe3f81fcd1406ea347b8b4c71" prot="public" static="no">
        <name>Py_UNICODE_HIGH_SURROGATE</name>
        <param><defname>ch</defname></param>
        <initializer>(0xD800 - (0x10000 &gt;&gt; 10) + ((ch) &gt;&gt; 10))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="175" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a13b0239f3cdebe8a063bf270a325e3b9" prot="public" static="no">
        <name>Py_UNICODE_LOW_SURROGATE</name>
        <param><defname>ch</defname></param>
        <initializer>(0xDC00 + ((ch) &amp; 0x3FF))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="177" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a99b2c705b28c6a9ac5d84563aff131cb" prot="public" static="no">
        <name>Py_UNICODE_MATCH</name>
        <param><defname>string</defname></param>
        <param><defname>offset</defname></param>
        <param><defname>substring</defname></param>
        <initializer>((*((<ref refid="struct__object" kindref="compound">string</ref>)-&gt;wstr + (offset)) == *((substring)-&gt;wstr)) &amp;&amp; \
     ((*((<ref refid="struct__object" kindref="compound">string</ref>)-&gt;wstr + (offset) + (substring)-&gt;wstr_length-1) == *((substring)-&gt;wstr + (substring)-&gt;wstr_length-1))) &amp;&amp; \
     !memcmp((<ref refid="struct__object" kindref="compound">string</ref>)-&gt;wstr + (offset), (substring)-&gt;wstr, (substring)-&gt;wstr_length*sizeof(Py_UNICODE)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="182" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a9824be1c099089b452829db97ba359bc" prot="public" static="no">
        <name>PyUnicode_Check</name>
        <param><defname>op</defname></param>
        <initializer>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_UNICODE_SUBCLASS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="366" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1afe9ee7375e77321df5605e1821651bf5" prot="public" static="no">
        <name>PyUnicode_CheckExact</name>
        <param><defname>op</defname></param>
        <initializer>(Py_TYPE(op) == &amp;PyUnicode_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="368" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ae7a4183486bbc43b9332ed8eabe730b6" prot="public" static="no">
        <name>PyUnicode_WSTR_LENGTH</name>
        <param><defname>op</defname></param>
        <initializer>(PyUnicode_IS_COMPACT_ASCII(op) ?                  \
     ((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)op)-&gt;length :                    \
     ((<ref refid="struct_py_compact_unicode_object" kindref="compound">PyCompactUnicodeObject</ref>*)op)-&gt;wstr_length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="373" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a42022b641988f6a0f44fa3e592fa742e" prot="public" static="no">
        <name>PyUnicode_GET_SIZE</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)),                    \
     (((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;wstr) ?               \
      PyUnicode_WSTR_LENGTH(op) :                    \
      ((void)PyUnicode_AsUnicode((<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op)),  \
       assert(((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;wstr),        \
       PyUnicode_WSTR_LENGTH(op)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="383" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a50963868c8d35deb1cb7b79b1ed85f97" prot="public" static="no">
        <name>PyUnicode_GET_DATA_SIZE</name>
        <param><defname>op</defname></param>
        <initializer>(PyUnicode_GET_SIZE(op) * Py_UNICODE_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="391" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1acb0d759ba85153577015191bc73ccb57" prot="public" static="no">
        <name>PyUnicode_AS_UNICODE</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)), \
     (((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;wstr) ? (((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;wstr) : \
      PyUnicode_AsUnicode((<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="399" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a08b08e2b4ea5e8b7cf2aba8421a19e18" prot="public" static="no">
        <name>PyUnicode_AS_DATA</name>
        <param><defname>op</defname></param>
        <initializer>((const char *)(PyUnicode_AS_UNICODE(op)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="404" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a4df23922063b62da3550d10abeb324cb" prot="public" static="no">
        <name>SSTATE_NOT_INTERNED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="413" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a4ab3a2ec39e2a6953c29dcf595353330" prot="public" static="no">
        <name>SSTATE_INTERNED_MORTAL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="414" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1afc133994b2174c47bcf545c4368defe5" prot="public" static="no">
        <name>SSTATE_INTERNED_IMMORTAL</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="415" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aeae347a71196a0215788abe2775961fe" prot="public" static="no">
        <name>PyUnicode_IS_ASCII</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)),                \
     assert(PyUnicode_IS_READY(op)),             \
     ((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)op)-&gt;state.ascii)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="420" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a9b1b6c362480bea6d5895ea3a0452df0" prot="public" static="no">
        <name>PyUnicode_IS_COMPACT</name>
        <param><defname>op</defname></param>
        <initializer>(((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)(op))-&gt;state.compact)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="427" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a1d20ad18afb3c6694041f8923e4c1cb1" prot="public" static="no">
        <name>PyUnicode_IS_COMPACT_ASCII</name>
        <param><defname>op</defname></param>
        <initializer>(((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)op)-&gt;state.ascii &amp;&amp; PyUnicode_IS_COMPACT(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="432" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ac2b1dafc1f137089c6778c5b2aee893d" prot="public" static="no">
        <name>PyUnicode_1BYTE_DATA</name>
        <param><defname>op</defname></param>
        <initializer>((Py_UCS1*)PyUnicode_DATA(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="451" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a00034d89c0013110c48724fe0c7e0341" prot="public" static="no">
        <name>PyUnicode_2BYTE_DATA</name>
        <param><defname>op</defname></param>
        <initializer>((Py_UCS2*)PyUnicode_DATA(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="452" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a9059471c607775a767e0473f736f224c" prot="public" static="no">
        <name>PyUnicode_4BYTE_DATA</name>
        <param><defname>op</defname></param>
        <initializer>((Py_UCS4*)PyUnicode_DATA(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="453" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aceb0de59222bdfdd64acd01caa548727" prot="public" static="no">
        <name>PyUnicode_KIND</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)), \
     assert(PyUnicode_IS_READY(op)),            \
     ((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;state.kind)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="456" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a3dfe0496a28d54c76467ee77d67078ab" prot="public" static="no">
        <name>_PyUnicode_COMPACT_DATA</name>
        <param><defname>op</defname></param>
        <initializer>(PyUnicode_IS_ASCII(op) ?                   \
     ((void*)((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)(op) + 1)) :              \
     ((void*)((<ref refid="struct_py_compact_unicode_object" kindref="compound">PyCompactUnicodeObject</ref>*)(op) + 1)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="462" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a62cfe7c2fb5f3330045cb1d1abcd81a4" prot="public" static="no">
        <name>_PyUnicode_NONCOMPACT_DATA</name>
        <param><defname>op</defname></param>
        <initializer>(assert(((<ref refid="struct_py_unicode_object" kindref="compound">PyUnicodeObject</ref>*)(op))-&gt;data.any),        \
     ((((<ref refid="struct_py_unicode_object" kindref="compound">PyUnicodeObject</ref> *)(op))-&gt;data.any)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="467" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a65ffefbac608d3fce9d07f2e7920d297" prot="public" static="no">
        <name>PyUnicode_DATA</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)), \
     PyUnicode_IS_COMPACT(op) ? _PyUnicode_COMPACT_DATA(op) :   \
     _PyUnicode_NONCOMPACT_DATA(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="471" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ae14525ffc5cdb582c84d72eeeeb79a7b" prot="public" static="no">
        <name>PyUnicode_WRITE</name>
        <param><defname>kind</defname></param>
        <param><defname>data</defname></param>
        <param><defname>index</defname></param>
        <param><defname>value</defname></param>
        <initializer>do { \
        switch ((kind)) { \
        case PyUnicode_1BYTE_KIND: { \
            ((Py_UCS1 *)(data))[(index)] = (Py_UCS1)(value); \
            break; \
        } \
        case PyUnicode_2BYTE_KIND: { \
            ((Py_UCS2 *)(data))[(index)] = (Py_UCS2)(value); \
            break; \
        } \
        default: { \
            assert((kind) == PyUnicode_4BYTE_KIND); \
            ((Py_UCS4 *)(data))[(index)] = (Py_UCS4)(value); \
        } \
        } \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="485" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1acc1c71e71392eabf395e1f34d5b74ed3" prot="public" static="no">
        <name>PyUnicode_READ</name>
        <param><defname>kind</defname></param>
        <param><defname>data</defname></param>
        <param><defname>index</defname></param>
        <initializer>((Py_UCS4) \
    ((kind) == PyUnicode_1BYTE_KIND ? \
        ((const Py_UCS1 *)(data))[(index)] : \
        ((kind) == PyUnicode_2BYTE_KIND ? \
            ((const Py_UCS2 *)(data))[(index)] : \
            ((const Py_UCS4 *)(data))[(index)] \
        ) \
    ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="505" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1abaeedcc5d089022c703fe76cfa317aa8" prot="public" static="no">
        <name>PyUnicode_READ_CHAR</name>
        <param><defname>unicode</defname></param>
        <param><defname>index</defname></param>
        <initializer>(assert(PyUnicode_Check(unicode)),          \
     assert(PyUnicode_IS_READY(unicode)),       \
     (Py_UCS4)                                  \
        (PyUnicode_KIND((unicode)) == PyUnicode_1BYTE_KIND ? \
            ((const Py_UCS1 *)(PyUnicode_DATA((unicode))))[(index)] : \
            (PyUnicode_KIND((unicode)) == PyUnicode_2BYTE_KIND ? \
                ((const Py_UCS2 *)(PyUnicode_DATA((unicode))))[(index)] : \
                ((const Py_UCS4 *)(PyUnicode_DATA((unicode))))[(index)] \
            ) \
        ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="519" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a5d4e5d6902801240ebb0e9f5b540aa5c" prot="public" static="no">
        <name>PyUnicode_GET_LENGTH</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)),               \
     assert(PyUnicode_IS_READY(op)),            \
     ((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;length)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="534" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a63c1e51e6202aba3d1fdbf81248926a4" prot="public" static="no">
        <name>PyUnicode_IS_READY</name>
        <param><defname>op</defname></param>
        <initializer>(((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>*)op)-&gt;state.ready)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="543" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1ad2cfc986bc364c9fb1590435e97be704" prot="public" static="no">
        <name>PyUnicode_READY</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_Check(op)),                       \
     (PyUnicode_IS_READY(op) ?                          \
      0 : _PyUnicode_Ready((<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="549" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aca8117637c15cc4d91fccba4a0050198" prot="public" static="no">
        <name>PyUnicode_MAX_CHAR_VALUE</name>
        <param><defname>op</defname></param>
        <initializer>(assert(PyUnicode_IS_READY(op)),                                    \
     (PyUnicode_IS_ASCII(op) ?                                          \
      (0x7f) :                                                          \
      (PyUnicode_KIND(op) == PyUnicode_1BYTE_KIND ?                     \
       (0xffU) :                                                        \
       (PyUnicode_KIND(op) == PyUnicode_2BYTE_KIND ?                    \
        (0xffffU) :                                                     \
        (0x10ffffU)))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="557" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aafbbb8a37374851bd24b6b51189c2a68" prot="public" static="no">
        <name>Py_UNICODE_REPLACEMENT_CHARACTER</name>
        <initializer>((Py_UCS4) 0xFFFD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="576" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a6b280a169f45ea9eecd75db69dcab5b5" prot="public" static="no">
        <name>_PyUnicodeWriter_Prepare</name>
        <param><defname>WRITER</defname></param>
        <param><defname>LENGTH</defname></param>
        <param><defname>MAXCHAR</defname></param>
        <initializer>(((MAXCHAR) &lt;= (WRITER)-&gt;maxchar                                  \
      &amp;&amp; (LENGTH) &lt;= (WRITER)-&gt;size - (WRITER)-&gt;pos)                  \
     ? 0                                                              \
     : (((LENGTH) == 0)                                               \
        ? 0                                                           \
        : _PyUnicodeWriter_PrepareInternal((WRITER), (LENGTH), (MAXCHAR))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="919" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a85bd5ba9dd862980bb375d480d12c74a" prot="public" static="no">
        <name>_PyUnicodeWriter_PrepareKind</name>
        <param><defname>WRITER</defname></param>
        <param><defname>KIND</defname></param>
        <initializer>(assert((KIND) != PyUnicode_WCHAR_KIND),                          \
     (KIND) &lt;= (WRITER)-&gt;kind                                         \
     ? 0                                                              \
     : _PyUnicodeWriter_PrepareKindInternal((WRITER), (KIND)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="938" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a70633c762720b3cb98bd0be537fb8c2c" prot="public" static="no">
        <name>PyUnicode_CHECK_INTERNED</name>
        <param><defname>op</defname></param>
        <initializer>(((<ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref> *)(op))-&gt;state.interned)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1021" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1a9858f99cfd86100a8ff4bdb8854bdd53" prot="public" static="no">
        <name>_PyUnicode_AsStringAndSize</name>
        <initializer>PyUnicode_AsUTF8AndSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1147" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aaa2775b7f1817ab368887dd579bc40ad" prot="public" static="no">
        <name>_PyUnicode_AsString</name>
        <initializer>PyUnicode_AsUTF8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1172" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unicodeobject_8h_1aa221abdc0463742511f4e93aa4501692" prot="public" static="no">
        <name>_PyUnicode_CheckConsistency</name>
        <param><defname>op</defname></param>
        <param><defname>check_content</defname></param>
        <initializer>PyUnicode_Check(op)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2325" column="9" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2325" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="unicodeobject_8h_1a318338bd8417275afb8e7ad3d69c6fef" prot="public" static="no">
        <name>PyUnicode_Kind</name>
        <enumvalue id="unicodeobject_8h_1a318338bd8417275afb8e7ad3d69c6fefa340455de42b0fcf9cec41addcd0c6b0d" prot="public">
          <name>PyUnicode_WCHAR_KIND</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="unicodeobject_8h_1a318338bd8417275afb8e7ad3d69c6fefa16b4c2ea6903070a1c35cd07921a1024" prot="public">
          <name>PyUnicode_1BYTE_KIND</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="unicodeobject_8h_1a318338bd8417275afb8e7ad3d69c6fefa6a7ecdfd771eaca8a7bc1f997a5de719" prot="public">
          <name>PyUnicode_2BYTE_KIND</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="unicodeobject_8h_1a318338bd8417275afb8e7ad3d69c6fefae8511b7c05ebb93982da0e9698bb60c8" prot="public">
          <name>PyUnicode_4BYTE_KIND</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="435" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="435" bodyend="444"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="unicodeobject_8h_1a7c975f947f8c05d9b0fdfdc8c6958e3b" prot="public" static="no">
        <type>wchar_t</type>
        <definition>typedef wchar_t Py_UNICODE</definition>
        <argsstring></argsstring>
        <name>Py_UNICODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="93" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="unicodeobject_8h_1a8bb74b2f43606cc27bfe5ede2c8376af" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t Py_UCS4</definition>
        <argsstring></argsstring>
        <name>Py_UCS4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="116" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="unicodeobject_8h_1a29525b805bff3e0a8c4dbf0fe0453c00" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t Py_UCS2</definition>
        <argsstring></argsstring>
        <name>Py_UCS2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="117" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="unicodeobject_8h_1a0f06ff51400d317ed01df1df78769cd5" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t Py_UCS1</definition>
        <argsstring></argsstring>
        <name>Py_UCS1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="118" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="unicodeobject_8h_1a789291ed055de1d44a3fcc1c7468db13" prot="public" static="no" mutable="no">
        <type>Py_UCS4</type>
        <definition>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t const char PyObject Py_UCS4 * maxchar</definition>
        <argsstring></argsstring>
        <name>maxchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="588" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1aefd8b48a889f8b4665ccbaab5ba330c7" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t to_start</definition>
        <argsstring></argsstring>
        <name>to_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="633" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ad7239e8f72f76e90a6c8898f54d956a2" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>Py_ssize_t PyObject * from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="634" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1adcca0780375531948dace601b454ab2c" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t</type>
        <definition>Py_ssize_t PyObject Py_ssize_t from_start</definition>
        <argsstring></argsstring>
        <name>from_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="635" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a30d1f4e21a504ce6942112522d248fb0" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t PyObject Py_ssize_t Py_ssize_t how_many</definition>
        <argsstring></argsstring>
        <name>how_many</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="636" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a800e25b474f2fdf4e9511c72c339295c" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>PyObject Py_ssize_t start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="662" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1abbd88c7a30e7a4643b0fc1675646d4a8" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="663" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a4f252228bb5a6f3b0fe9aa60672c7265" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t Py_UCS4</type>
        <definition>Py_ssize_t Py_ssize_t Py_UCS4 fill_char</definition>
        <argsstring></argsstring>
        <name>fill_char</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="664" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a612c27dae5681d14a5d92d0b3d8ab6e5" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="690" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ab963b98ee6060cf70173157ad9595331" prot="public" static="no" mutable="no">
        <type>const void *</type>
        <definition>Py_UCS4* buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="711" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ae88a7a817c1ebf1a683f3a3dd24290a6" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t</type>
        <definition>PyObject Py_ssize_t Py_ssize_t end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="725" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a50053143d35fc394476971072de0816c" prot="public" static="no" mutable="no">
        <type>Py_UCS4 Py_ssize_t</type>
        <definition>Py_UCS4 Py_ssize_t buflen</definition>
        <argsstring></argsstring>
        <name>buflen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="746" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a8972b49216aea5426881ed072352297c" prot="public" static="no" mutable="no">
        <type>Py_UCS4 Py_ssize_t int</type>
        <definition>Py_UCS4 Py_ssize_t int copy_null</definition>
        <argsstring></argsstring>
        <name>copy_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="747" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a54819b62c266d561ee7c64a6f83f2026" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="802" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1acf1efb63e146fa65bc713043652c4c38" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_UCS4</type>
        <definition>Py_ssize_t Py_UCS4 character</definition>
        <argsstring></argsstring>
        <name>character</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="813" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a8bf289d3d3f54f840150ecab442b16b1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* encoding</definition>
        <argsstring></argsstring>
        <name>encoding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="858" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a52339eee6d070317843e85c742b8a596" prot="public" static="no" mutable="no">
        <type>const char const char *</type>
        <definition>PyObject const char* errors</definition>
        <argsstring></argsstring>
        <name>errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="859" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a836097dc1446c0e4cb6dad03186132c6" prot="public" static="no" mutable="no">
        <type>va_list</type>
        <definition>va_list vargs</definition>
        <argsstring></argsstring>
        <name>vargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="877" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a2c6edb76cba1a0f0dc470115af66fd74" prot="public" static="no" mutable="no">
        <type>enum PyUnicode_Kind</type>
        <definition>enum PyUnicode_Kind kind</definition>
        <argsstring></argsstring>
        <name>kind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="946" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a39936f3fa328990bec4767a224c109e7" prot="public" static="no" mutable="no">
        <type>Py_UCS4</type>
        <definition>Py_UCS4 ch</definition>
        <argsstring></argsstring>
        <name>ch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="954" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1af25d6dc49269fa2003ac7c7fa6f13915" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>const char* str</definition>
        <argsstring></argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="961" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a105904f12146f0a02731076cfd0ea6e5" prot="public" static="no" mutable="no">
        <type>const char Py_ssize_t</type>
        <definition>Py_ssize_t len</definition>
        <argsstring></argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="978" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1aaa12580403a2cc24c96324b4c5715889" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1005" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a85929ace2f0054245aa2e25e1712a51e" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject* format_spec</definition>
        <argsstring></argsstring>
        <name>format_spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1006" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a7460ba5e038f76e0ce29a3922c9e23c9" prot="public" static="no" mutable="no">
        <type>Py_ssize_t const char Py_ssize_t *</type>
        <definition>Py_ssize_t const char int Py_ssize_t * consumed</definition>
        <argsstring></argsstring>
        <name>consumed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1283" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1adad2ac44018e165164f6110055e58ec5" prot="public" static="no" mutable="no">
        <type>Py_ssize_t int</type>
        <definition>int base64SetO</definition>
        <argsstring></argsstring>
        <name>base64SetO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1290" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a2864ce7b0ac5d95644665982f0cdc106" prot="public" static="no" mutable="no">
        <type>Py_ssize_t int int</type>
        <definition>int int base64WhiteSpace</definition>
        <argsstring></argsstring>
        <name>base64WhiteSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1291" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a1a7b836c22c37aafcdf34a85fa6fe53c" prot="public" static="no" mutable="no">
        <type>Py_ssize_t const char int *</type>
        <definition>const char int byteorder</definition>
        <argsstring></argsstring>
        <name>byteorder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1362" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ae402ea1b5dd9761084df4ac43e042845" prot="public" static="no" mutable="no">
        <type>Py_ssize_t const char const char **</type>
        <definition>Py_ssize_t const char const char** first_invalid_escape</definition>
        <argsstring></argsstring>
        <name>first_invalid_escape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1514" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ab9e4b6a0ec44811e1ad80b8b6c7d1cd7" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * mapping</definition>
        <argsstring></argsstring>
        <name>mapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1638" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a5ff2f3fc45d5a9f8511bf72fdc3ee5be" prot="public" static="no" mutable="no">
        <type>Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * table</definition>
        <argsstring></argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1678" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a60bc6228f04933bfc7039c21e30a7d1d" prot="public" static="no" mutable="no">
        <type>Py_ssize_t char *</type>
        <definition>Py_ssize_t char* output</definition>
        <argsstring></argsstring>
        <name>output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1760" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1aebbc7d345777e31b37ae803d1b25ea67" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1881" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1adcb56db62074195a0e2907f932bb3693" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * sep</definition>
        <argsstring></argsstring>
        <name>sep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1913" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ae93b4f2afdd2b587a438d500dd8236ec" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t</type>
        <definition>PyObject Py_ssize_t maxsplit</definition>
        <argsstring></argsstring>
        <name>maxsplit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1914" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a9cc8d9b2e365450c8578462967db3c46" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int keepends</definition>
        <argsstring></argsstring>
        <name>keepends</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1924" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a5334adcbfe74a968e4eae367b506d069" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* seq</definition>
        <argsstring></argsstring>
        <name>seq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1984" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a50c2556e29665990863be1b239bfb989" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> **</type>
        <definition>PyObject** items</definition>
        <argsstring></argsstring>
        <name>items</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1990" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ab3894378b257c7ac17602dbea0f9241e" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t</type>
        <definition>PyObject Py_ssize_t seqlen</definition>
        <argsstring></argsstring>
        <name>seqlen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1991" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="1990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a4ea777c2166c89080c66b91b0b5a3269" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * substr</definition>
        <argsstring></argsstring>
        <name>substr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2000" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a1572baf95a14b6a626c0cf679af2c06c" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t Py_ssize_t int</type>
        <definition>Py_UCS4 Py_ssize_t Py_ssize_t int direction</definition>
        <argsstring></argsstring>
        <name>direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2003" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a78baabd5923f59c8761606edb0a66e25" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject* replstr</definition>
        <argsstring></argsstring>
        <name>replstr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2044" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1abe50ce3e088d303ac858d964a03ee445" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> Py_ssize_t</type>
        <definition>PyObject PyObject Py_ssize_t maxcount</definition>
        <argsstring></argsstring>
        <name>maxcount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2045" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a2f7f765b3b0cdc8a96645794e17e2d1c" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> int</type>
        <definition>PyObject int op</definition>
        <argsstring></argsstring>
        <name>op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2106" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ad61773d508168edac5109211128610c7" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2114" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a52a34248f2c4ce555e6d7630b03af4b5" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* element</definition>
        <argsstring></argsstring>
        <name>element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2125" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a73532e2223bf89015149dd84ce7d8cf4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int striptype</definition>
        <argsstring></argsstring>
        <name>striptype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2136" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a06108d6baad26458ca5841fc690d8769" prot="public" static="no" mutable="no">
        <type>int <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>int PyObject* sepobj</definition>
        <argsstring></argsstring>
        <name>sepobj</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2137" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1aa8fe5eb68f7e688a8a40cbc18690b2ee" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t Py_ssize_t n_buffer</definition>
        <argsstring></argsstring>
        <name>n_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2148" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a34ec903bbee8a3f2e2c6c97eb9a9912f" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t void *</type>
        <definition>Py_ssize_t Py_ssize_t void* digits</definition>
        <argsstring></argsstring>
        <name>digits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2149" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a7f5838e5ba271198c06417a57e0ff2a5" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t void Py_ssize_t</type>
        <definition>Py_ssize_t Py_ssize_t void Py_ssize_t n_digits</definition>
        <argsstring></argsstring>
        <name>n_digits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2150" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a23c5ff77c80eba1ff152c5e09327b938" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t</type>
        <definition>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t min_width</definition>
        <argsstring></argsstring>
        <name>min_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2151" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1ace9f7d524ff076bb14bd5d4ac1713fbe" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t const char *</type>
        <definition>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t const char* grouping</definition>
        <argsstring></argsstring>
        <name>grouping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2152" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a404342d9be6cfafd08c7154aaa8f9fd3" prot="public" static="no" mutable="no">
        <type>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t const char <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>Py_ssize_t Py_ssize_t void Py_ssize_t Py_ssize_t const char PyObject* thousands_sep</definition>
        <argsstring></argsstring>
        <name>thousands_sep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2153" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a5719992b0932c20bb344c14c04b3598f" prot="public" static="no" mutable="no">
        <type>Py_UCS4 *</type>
        <definition>Py_UCS4 * res</definition>
        <argsstring></argsstring>
        <name>res</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2212" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a93812c877d730f296c8f0911df66d3ee" prot="public" static="no" mutable="no">
        <type>const Py_UNICODE *</type>
        <definition>const Py_UNICODE * s2</definition>
        <argsstring></argsstring>
        <name>s2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2276" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1aa46509c737afa144e74d7e6d91225eb7" prot="public" static="no" mutable="no">
        <type>const Py_UNICODE size_t</type>
        <definition>const Py_UNICODE size_t n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2284" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1af1c419c1b16c6b361677174699a3f024" prot="public" static="no" mutable="no">
        <type>Py_UNICODE</type>
        <definition>Py_UNICODE c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2299" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="unicodeobject_8h_1a61569f2965b7a369eb10b6d75d410d11" prot="public" static="no" mutable="no">
        <type></type>
        <definition>int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2307" column="1" bodyfile="/usr/include/python3.6m/unicodeobject.h" bodystart="2307" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="unicodeobject_8h_1a49c752bd117c0e21de02d2f1707113a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyUnicode_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1af31e1d121c8b90dfe0764592401bd3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyUnicode_New(Py_ssize_t size</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1af613ad7846083f1321142c7c101c8e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) _PyUnicode_Ready(PyObject *unicode)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1adad2b68538c40e194d87c818eafe11d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) PyUnicode_CopyCharacters(PyObject *to</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1ad920f624cb22116ebb01300d29921398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) _PyUnicode_FastCopyCharacters(PyObject *to</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a86df91d395b2acf2d5c2a6036592ad63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_UCS4) _PyUnicode_FindMaxChar(PyObject *unicode</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_UCS4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="731" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a8dc8573e1d2393d2264add924232c4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_UCS4 *) PyUnicode_AsUCS4(PyObject *unicode</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_UCS4 *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1aaf8675835a613774b9b24126e855a4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_UNICODE *) PyUnicode_AsUnicode(PyObject *unicode)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_UNICODE *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="761" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a54c21110f801e6ab0446305d8858ebd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(const Py_UNICODE *) _PyUnicode_AsUnicode(PyObject *unicode)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>const Py_UNICODE *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1ad4deca725e34430c342ee734d0c51831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_UNICODE) PyUnicode_GetMax(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_UNICODE</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="819" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1ac756f9356030c3cec8b8c9cfd7f89df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(char *) PyUnicode_AsUTF8AndSize(PyObject *unicode</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1aefa445c381eb28d73e24bf8dfe08524b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(const char *) PyUnicode_GetDefaultEncoding(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1aa6293cd3d327d193790c5a82b2f551ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char const char *errors</type>
        <definition>const char const char *errors Py_DEPRECATED</definition>
        <argsstring>(3.6)</argsstring>
        <name>Py_DEPRECATED</name>
        <param>
          <type>3.</type>
          <declname>6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a8424258a510c01c97ed999fc0c3ca10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* _PyUnicode_DecodeUnicodeInternal</definition>
        <argsstring>(const char *string, Py_ssize_t length, const char *errors)</argsstring>
        <name>_PyUnicode_DecodeUnicodeInternal</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="1555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1ad1529b285b16f6aa2693be98649dc9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(const unsigned char) _Py_ascii_whitespace[]</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type>const unsigned</type>
          <declname>char</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a624ecde8f60b0b0ae43bc86d1582ae0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(double) _PyUnicode_ToNumeric(Py_UCS4 ch)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="unicodeobject_8h_1a2b50364678672aa0c9f0df8ffc8f0fcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(size_t) Py_UNICODE_strlen(const Py_UNICODE *u)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/unicodeobject.h" line="2270" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_UNICODEOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODEOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Unicode<sp/>implementation<sp/>based<sp/>on<sp/>original<sp/>code<sp/>by<sp/>Fredrik<sp/>Lundh,</highlight></codeline>
<codeline lineno="9"><highlight class="comment">modified<sp/>by<sp/>Marc-Andre<sp/>Lemburg<sp/>(mal@lemburg.com)<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment">Unicode<sp/>Integration<sp/>Proposal.<sp/>(See</highlight></codeline>
<codeline lineno="11"><highlight class="comment">http://www.egenix.com/files/python/unicode-proposal.txt).</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">Copyright<sp/>(c)<sp/>Corporation<sp/>for<sp/>National<sp/>Research<sp/>Initiatives.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>Original<sp/>header:</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Yet<sp/>another<sp/>Unicode<sp/>string<sp/>type<sp/>for<sp/>Python.<sp/><sp/>This<sp/>type<sp/>supports<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>16-bit<sp/>Basic<sp/>Multilingual<sp/>Plane<sp/>(BMP)<sp/>only.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Written<sp/>by<sp/>Fredrik<sp/>Lundh,<sp/>January<sp/>1999.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>by<sp/>Secret<sp/>Labs<sp/>AB.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>by<sp/>Fredrik<sp/>Lundh.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>fredrik@pythonware.com</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>http://www.pythonware.com</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>This<sp/>Unicode<sp/>String<sp/>Type<sp/>is</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>by<sp/>Secret<sp/>Labs<sp/>AB</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999<sp/>by<sp/>Fredrik<sp/>Lundh</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>By<sp/>obtaining,<sp/>using,<sp/>and/or<sp/>copying<sp/>this<sp/>software<sp/>and/or<sp/>its</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>associated<sp/>documentation,<sp/>you<sp/>agree<sp/>that<sp/>you<sp/>have<sp/>read,<sp/>understood,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>and<sp/>will<sp/>comply<sp/>with<sp/>the<sp/>following<sp/>terms<sp/>and<sp/>conditions:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and<sp/>distribute<sp/>this<sp/>software<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>associated<sp/>documentation<sp/>for<sp/>any<sp/>purpose<sp/>and<sp/>without<sp/>fee<sp/>is<sp/>hereby</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>appears<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>copies,<sp/>and<sp/>that<sp/>both<sp/>that<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>appear<sp/>in<sp/>supporting<sp/>documentation,<sp/>and<sp/>that<sp/>the<sp/>name<sp/>of<sp/>Secret<sp/>Labs</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>AB<sp/>or<sp/>the<sp/>author<sp/>not<sp/>be<sp/>used<sp/>in<sp/>advertising<sp/>or<sp/>publicity<sp/>pertaining<sp/>to</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>distribution<sp/>of<sp/>the<sp/>software<sp/>without<sp/>specific,<sp/>written<sp/>prior</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>permission.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>SECRET<sp/>LABS<sp/>AB<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE,<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>FITNESS.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>SECRET<sp/>LABS<sp/>AB<sp/>OR<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>ANY<sp/>SPECIAL,<sp/>INDIRECT<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===<sp/>Internal<sp/>API<sp/>=======================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Internal<sp/>Unicode<sp/>Format<sp/>--------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Python<sp/>3.x<sp/>requires<sp/>unicode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_USING_UNICODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIZEOF_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Must<sp/>define<sp/>SIZEOF_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_SIZE<sp/>SIZEOF_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>wchar_t<sp/>can<sp/>be<sp/>used<sp/>for<sp/>UCS-4<sp/>storage,<sp/>set<sp/>Py_UNICODE_WIDE.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>Otherwise,<sp/>Unicode<sp/>strings<sp/>are<sp/>stored<sp/>as<sp/>UCS-2<sp/>(with<sp/>limited<sp/>support</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>for<sp/>UTF-16)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>Py_UNICODE_SIZE<sp/>&gt;=<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_WIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>these<sp/>flags<sp/>if<sp/>the<sp/>platform<sp/>has<sp/>&quot;wchar.h&quot;<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>wchar_t<sp/>type<sp/>is<sp/>a<sp/>16-bit<sp/>unsigned<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HAVE_WCHAR_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HAVE_USABLE_WCHAR_T<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_UNICODE<sp/>was<sp/>the<sp/>native<sp/>Unicode<sp/>storage<sp/>format<sp/>(code<sp/>unit)<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>Python<sp/>and<sp/>represents<sp/>a<sp/>single<sp/>Unicode<sp/>element<sp/>in<sp/>the<sp/>Unicode<sp/>type.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>With<sp/>PEP<sp/>393,<sp/>Py_UNICODE<sp/>is<sp/>deprecated<sp/>and<sp/>replaced<sp/>with<sp/>a</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>typedef<sp/>to<sp/>wchar_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_UNICODE_TYPE<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>Py_UNICODE;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>compiler<sp/>provides<sp/>a<sp/>wchar_t<sp/>type<sp/>we<sp/>try<sp/>to<sp/>support<sp/>it</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>through<sp/>the<sp/>interface<sp/>functions<sp/>PyUnicode_FromWideChar(),</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_AsWideChar()<sp/>and<sp/>PyUnicode_AsWideCharString().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_USABLE_WCHAR_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>HAVE_WCHAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>HAVE_WCHAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_WCHAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Work<sp/>around<sp/>a<sp/>cosmetic<sp/>bug<sp/>in<sp/>BSDI<sp/>4.x<sp/>wchar.h;<sp/>thanks<sp/>to<sp/>Thomas<sp/>Wouters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>_HAVE_BSDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_UCS4<sp/>and<sp/>Py_UCS2<sp/>are<sp/>typedefs<sp/>for<sp/>the<sp/>respective</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>unicode<sp/>representations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>Py_UCS4;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/>Py_UCS2;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/>Py_UCS1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Internal<sp/>Unicode<sp/>Operations<sp/>----------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Since<sp/>splitting<sp/>on<sp/>whitespace<sp/>is<sp/>an<sp/>important<sp/>use<sp/>case,<sp/>and</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>whitespace<sp/>in<sp/>most<sp/>situations<sp/>is<sp/>solely<sp/>ASCII<sp/>whitespace,<sp/>we</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>optimize<sp/>for<sp/>the<sp/>common<sp/>case<sp/>by<sp/>using<sp/>a<sp/>quick<sp/>look-up<sp/>table</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>_Py_ascii_whitespace<sp/>(see<sp/>below)<sp/>with<sp/>an<sp/>inlined<sp/>check.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISSPACE(ch)<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((ch)<sp/>&lt;<sp/>128U<sp/>?<sp/>_Py_ascii_whitespace[(ch)]<sp/>:<sp/>_PyUnicode_IsWhitespace(ch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISLOWER(ch)<sp/>_PyUnicode_IsLowercase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISUPPER(ch)<sp/>_PyUnicode_IsUppercase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISTITLE(ch)<sp/>_PyUnicode_IsTitlecase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISLINEBREAK(ch)<sp/>_PyUnicode_IsLinebreak(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TOLOWER(ch)<sp/>_PyUnicode_ToLowercase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TOUPPER(ch)<sp/>_PyUnicode_ToUppercase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TOTITLE(ch)<sp/>_PyUnicode_ToTitlecase(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISDECIMAL(ch)<sp/>_PyUnicode_IsDecimalDigit(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISDIGIT(ch)<sp/>_PyUnicode_IsDigit(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISNUMERIC(ch)<sp/>_PyUnicode_IsNumeric(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISPRINTABLE(ch)<sp/>_PyUnicode_IsPrintable(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TODECIMAL(ch)<sp/>_PyUnicode_ToDecimalDigit(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TODIGIT(ch)<sp/>_PyUnicode_ToDigit(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_TONUMERIC(ch)<sp/>_PyUnicode_ToNumeric(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISALPHA(ch)<sp/>_PyUnicode_IsAlpha(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_ISALNUM(ch)<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Py_UNICODE_ISALPHA(ch)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Py_UNICODE_ISDECIMAL(ch)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Py_UNICODE_ISDIGIT(ch)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Py_UNICODE_ISNUMERIC(ch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_COPY(target,<sp/>source,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>memcpy((target),<sp/>(source),<sp/>(length)*sizeof(Py_UNICODE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_FILL(target,<sp/>value,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{Py_ssize_t<sp/>i_;<sp/>Py_UNICODE<sp/>*t_<sp/>=<sp/>(target);<sp/>Py_UNICODE<sp/>v_<sp/>=<sp/>(value);\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i_<sp/>=<sp/>0;<sp/>i_<sp/>&lt;<sp/>(length);<sp/>i_++)<sp/>t_[i_]<sp/>=<sp/>v_;\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>macros<sp/>to<sp/>work<sp/>with<sp/>surrogates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_IS_SURROGATE(ch)<sp/>(0xD800<sp/>&lt;=<sp/>(ch)<sp/>&amp;&amp;<sp/>(ch)<sp/>&lt;=<sp/>0xDFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_IS_HIGH_SURROGATE(ch)<sp/>(0xD800<sp/>&lt;=<sp/>(ch)<sp/>&amp;&amp;<sp/>(ch)<sp/>&lt;=<sp/>0xDBFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_IS_LOW_SURROGATE(ch)<sp/>(0xDC00<sp/>&lt;=<sp/>(ch)<sp/>&amp;&amp;<sp/>(ch)<sp/>&lt;=<sp/>0xDFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Join<sp/>two<sp/>surrogate<sp/>characters<sp/>and<sp/>return<sp/>a<sp/>single<sp/>Py_UCS4<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_JOIN_SURROGATES(high,<sp/>low)<sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((((Py_UCS4)(high)<sp/>&amp;<sp/>0x03FF)<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((Py_UCS4)(low)<sp/>&amp;<sp/>0x03FF))<sp/>+<sp/>0x10000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>high<sp/>surrogate<sp/>=<sp/>top<sp/>10<sp/>bits<sp/>added<sp/>to<sp/>D800<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_HIGH_SURROGATE(ch)<sp/>(0xD800<sp/>-<sp/>(0x10000<sp/>&gt;&gt;<sp/>10)<sp/>+<sp/>((ch)<sp/>&gt;&gt;<sp/>10))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>low<sp/>surrogate<sp/>=<sp/>bottom<sp/>10<sp/>bits<sp/>added<sp/>to<sp/>DC00<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_LOW_SURROGATE(ch)<sp/>(0xDC00<sp/>+<sp/>((ch)<sp/>&amp;<sp/>0x3FF))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>substring<sp/>matches<sp/>at<sp/>given<sp/>offset.<sp/><sp/>The<sp/>offset<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/>valid,<sp/>and<sp/>the<sp/>substring<sp/>must<sp/>not<sp/>be<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_MATCH(string,<sp/>offset,<sp/>substring)<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((*((string)-&gt;wstr<sp/>+<sp/>(offset))<sp/>==<sp/>*((substring)-&gt;wstr))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((*((string)-&gt;wstr<sp/>+<sp/>(offset)<sp/>+<sp/>(substring)-&gt;wstr_length-1)<sp/>==<sp/>*((substring)-&gt;wstr<sp/>+<sp/>(substring)-&gt;wstr_length-1)))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>!memcmp((string)-&gt;wstr<sp/>+<sp/>(offset),<sp/>(substring)-&gt;wstr,<sp/>(substring)-&gt;wstr_length*sizeof(Py_UNICODE)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Unicode<sp/>Type<sp/>-------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ASCII-only<sp/>strings<sp/>created<sp/>through<sp/>PyUnicode_New<sp/>use<sp/>the<sp/>PyASCIIObject</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>structure.<sp/>state.ascii<sp/>and<sp/>state.compact<sp/>are<sp/>set,<sp/>and<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>follow<sp/>the<sp/>structure.<sp/>utf8_length<sp/>and<sp/>wstr_length<sp/>can<sp/>be<sp/>found</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>length<sp/>field;<sp/>the<sp/>utf8<sp/>pointer<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>data<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="struct_py_a_s_c_i_i_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>4<sp/>forms<sp/>of<sp/>Unicode<sp/>strings:</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>compact<sp/>ascii:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>structure<sp/>=<sp/>PyASCIIObject</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>test:<sp/>PyUnicode_IS_COMPACT_ASCII(op)</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>kind<sp/>=<sp/>PyUnicode_1BYTE_KIND</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compact<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ascii<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ready<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(length<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the<sp/>utf8<sp/>and<sp/>wstr<sp/>strings)</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(data<sp/>starts<sp/>just<sp/>after<sp/>the<sp/>structure)</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(since<sp/>ASCII<sp/>is<sp/>decoded<sp/>from<sp/>UTF-8,<sp/>the<sp/>utf8<sp/>string<sp/>are<sp/>the<sp/>data)</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>compact:</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>structure<sp/>=<sp/>PyCompactUnicodeObject</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>test:<sp/>PyUnicode_IS_COMPACT(op)<sp/>&amp;&amp;<sp/>!PyUnicode_IS_ASCII(op)</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>kind<sp/>=<sp/>PyUnicode_1BYTE_KIND,<sp/>PyUnicode_2BYTE_KIND<sp/>or</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_4BYTE_KIND</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compact<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ready<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ascii<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8<sp/>is<sp/>not<sp/>shared<sp/>with<sp/>data</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8_length<sp/>=<sp/>0<sp/>if<sp/>utf8<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wstr<sp/>is<sp/>shared<sp/>with<sp/>data<sp/>and<sp/>wstr_length=length</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>kind=PyUnicode_2BYTE_KIND<sp/>and<sp/>sizeof(wchar_t)=2</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>if<sp/>kind=PyUnicode_4BYTE_KIND<sp/>and<sp/>sizeof(wchar_t)=4</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wstr_length<sp/>=<sp/>0<sp/>if<sp/>wstr<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(data<sp/>starts<sp/>just<sp/>after<sp/>the<sp/>structure)</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>legacy<sp/>string,<sp/>not<sp/>ready:</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>structure<sp/>=<sp/>PyUnicodeObject</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>test:<sp/>kind<sp/>==<sp/>PyUnicode_WCHAR_KIND</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>length<sp/>=<sp/>0<sp/>(use<sp/>wstr_length)</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>hash<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>kind<sp/>=<sp/>PyUnicode_WCHAR_KIND</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compact<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ascii<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ready<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>interned<sp/>=<sp/>SSTATE_NOT_INTERNED</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wstr<sp/>is<sp/>not<sp/>NULL</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>data.any<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8_length<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>legacy<sp/>string,<sp/>ready:</highlight></codeline>
<codeline lineno="250"><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>structure<sp/>=<sp/>PyUnicodeObject<sp/>structure</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>test:<sp/>!PyUnicode_IS_COMPACT(op)<sp/>&amp;&amp;<sp/>kind<sp/>!=<sp/>PyUnicode_WCHAR_KIND</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>kind<sp/>=<sp/>PyUnicode_1BYTE_KIND,<sp/>PyUnicode_2BYTE_KIND<sp/>or</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_4BYTE_KIND</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>compact<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>ready<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>data.any<sp/>is<sp/>not<sp/>NULL</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8<sp/>is<sp/>shared<sp/>and<sp/>utf8_length<sp/>=<sp/>length<sp/>with<sp/>data.any<sp/>if<sp/>ascii<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>utf8_length<sp/>=<sp/>0<sp/>if<sp/>utf8<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wstr<sp/>is<sp/>shared<sp/>with<sp/>data.any<sp/>and<sp/>wstr_length<sp/>=<sp/>length</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>kind=PyUnicode_2BYTE_KIND<sp/>and<sp/>sizeof(wchar_t)=2</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>if<sp/>kind=PyUnicode_4BYTE_KIND<sp/>and<sp/>sizeof(wchar_4)=4</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>wstr_length<sp/>=<sp/>0<sp/>if<sp/>wstr<sp/>is<sp/>NULL</highlight></codeline>
<codeline lineno="264"><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compact<sp/>strings<sp/>use<sp/>only<sp/>one<sp/>memory<sp/>block<sp/>(structure<sp/>+<sp/>characters),</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whereas<sp/>legacy<sp/>strings<sp/>use<sp/>one<sp/>block<sp/>for<sp/>the<sp/>structure<sp/>and<sp/>one<sp/>block</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>characters.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Legacy<sp/>strings<sp/>are<sp/>created<sp/>by<sp/>PyUnicode_FromUnicode()<sp/>and</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_FromStringAndSize(NULL,<sp/>size)<sp/>functions.<sp/>They<sp/>become<sp/>ready</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>PyUnicode_READY()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>also<sp/>_PyUnicode_CheckConsistency().</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>code<sp/>points<sp/>in<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_hash_t<sp/>hash;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Hash<sp/>value;<sp/>-1<sp/>if<sp/>not<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SSTATE_NOT_INTERNED<sp/>(0)</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SSTATE_INTERNED_MORTAL<sp/>(1)</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SSTATE_INTERNED_IMMORTAL<sp/>(2)</highlight></codeline>
<codeline lineno="283"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>interned<sp/>!=<sp/>SSTATE_NOT_INTERNED,<sp/>the<sp/>two<sp/>references<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>to<sp/>this<sp/>object<sp/>are<sp/>*not*<sp/>counted<sp/>in<sp/>ob_refcnt.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interned:2;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Character<sp/>size:</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PyUnicode_WCHAR_KIND<sp/>(0):</highlight></codeline>
<codeline lineno="291"><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>character<sp/>type<sp/>=<sp/>wchar_t<sp/>(16<sp/>or<sp/>32<sp/>bits,<sp/>depending<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>platform)</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PyUnicode_1BYTE_KIND<sp/>(1):</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>character<sp/>type<sp/>=<sp/>Py_UCS1<sp/>(8<sp/>bits,<sp/>unsigned)</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>characters<sp/>are<sp/>in<sp/>the<sp/>range<sp/>U+0000-U+00FF<sp/>(latin1)</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>ascii<sp/>is<sp/>set,<sp/>all<sp/>characters<sp/>are<sp/>in<sp/>the<sp/>range<sp/>U+0000-U+007F</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ASCII),<sp/>otherwise<sp/>at<sp/>least<sp/>one<sp/>character<sp/>is<sp/>in<sp/>the<sp/>range</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U+0080-U+00FF</highlight></codeline>
<codeline lineno="302"><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PyUnicode_2BYTE_KIND<sp/>(2):</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>character<sp/>type<sp/>=<sp/>Py_UCS2<sp/>(16<sp/>bits,<sp/>unsigned)</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>characters<sp/>are<sp/>in<sp/>the<sp/>range<sp/>U+0000-U+FFFF<sp/>(BMP)</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>least<sp/>one<sp/>character<sp/>is<sp/>in<sp/>the<sp/>range<sp/>U+0100-U+FFFF</highlight></codeline>
<codeline lineno="308"><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>PyUnicode_4BYTE_KIND<sp/>(4):</highlight></codeline>
<codeline lineno="310"><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>character<sp/>type<sp/>=<sp/>Py_UCS4<sp/>(32<sp/>bits,<sp/>unsigned)</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>characters<sp/>are<sp/>in<sp/>the<sp/>range<sp/>U+0000-U+10FFFF</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>at<sp/>least<sp/>one<sp/>character<sp/>is<sp/>in<sp/>the<sp/>range<sp/>U+10000-U+10FFFF</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind:3;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compact<sp/>is<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>allocation<sp/>scheme.<sp/>Compact<sp/>unicode</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects<sp/>only<sp/>require<sp/>one<sp/>memory<sp/>block<sp/>while<sp/>non-compact<sp/>objects<sp/>use</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>block<sp/>for<sp/>the<sp/>PyUnicodeObject<sp/>struct<sp/>and<sp/>another<sp/>for<sp/>its<sp/>data</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compact:1;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>string<sp/>only<sp/>contains<sp/>characters<sp/>in<sp/>the<sp/>range<sp/>U+0000-U+007F<sp/>(ASCII)</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>kind<sp/>is<sp/>PyUnicode_1BYTE_KIND.<sp/>If<sp/>ascii<sp/>is<sp/>set<sp/>and<sp/>compact<sp/>is</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,<sp/>use<sp/>the<sp/>PyASCIIObject<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ascii:1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>ready<sp/>flag<sp/>indicates<sp/>whether<sp/>the<sp/>object<sp/>layout<sp/>is<sp/>initialized</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completely.<sp/>This<sp/>means<sp/>that<sp/>this<sp/>is<sp/>either<sp/>a<sp/>compact<sp/>object,<sp/>or</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>data<sp/>pointer<sp/>is<sp/>filled<sp/>out.<sp/>The<sp/>bit<sp/>is<sp/>redundant,<sp/>and<sp/>helps</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>minimize<sp/>the<sp/>test<sp/>in<sp/>PyUnicode_IS_READY().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ready:1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Padding<sp/>to<sp/>ensure<sp/>that<sp/>PyUnicode_DATA()<sp/>is<sp/>always<sp/>aligned<sp/>to</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>bytes<sp/>(see<sp/>issue<sp/>#19537<sp/>on<sp/>m68k).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>:24;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structstate" kindref="compound">state</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*wstr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wchar_t<sp/>representation<sp/>(null-terminated)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}<sp/><ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Non-ASCII<sp/>strings<sp/>allocated<sp/>through<sp/>PyUnicode_New<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>PyCompactUnicodeObject<sp/>structure.<sp/>state.compact<sp/>is<sp/>set,<sp/>and<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>immediately<sp/>follow<sp/>the<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="struct_py_compact_unicode_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_a_s_c_i_i_object" kindref="compound">PyASCIIObject</ref><sp/>_base;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>utf8_length;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>bytes<sp/>in<sp/>utf8,<sp/>excluding<sp/>the</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>terminating<sp/>\0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*utf8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>representation<sp/>(null-terminated)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>wstr_length;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>code<sp/>points<sp/>in<sp/>wstr,<sp/>possible</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>surrogates<sp/>count<sp/>as<sp/>two<sp/>code<sp/>points.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}<sp/><ref refid="struct_py_compact_unicode_object" kindref="compound">PyCompactUnicodeObject</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Strings<sp/>allocated<sp/>through<sp/>PyUnicode_FromUnicode(NULL,<sp/>len)<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/>PyUnicodeObject<sp/>structure.<sp/>The<sp/>actual<sp/>string<sp/>data<sp/>is<sp/>initially<sp/>in<sp/>the<sp/>wstr</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>block,<sp/>and<sp/>copied<sp/>into<sp/>the<sp/>data<sp/>block<sp/>using<sp/>_PyUnicode_Ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="struct_py_unicode_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_compact_unicode_object" kindref="compound">PyCompactUnicodeObject</ref><sp/>_base;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*any;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_UCS1<sp/>*latin1;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_UCS2<sp/>*ucs2;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*ucs4;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Canonical,<sp/>smallest-form<sp/>Unicode<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">}<sp/><ref refid="struct_py_unicode_object" kindref="compound">PyUnicodeObject</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyUnicode_Type;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyUnicodeIter_Type;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_Check(op)<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyType_FastSubclass(Py_TYPE(op),<sp/>Py_TPFLAGS_UNICODE_SUBCLASS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_CheckExact(op)<sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;PyUnicode_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fast<sp/>access<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_WSTR_LENGTH(op)<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyUnicode_IS_COMPACT_ASCII(op)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((PyASCIIObject*)op)-&gt;length<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((PyCompactUnicodeObject*)op)-&gt;wstr_length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>deprecated<sp/>Py_UNICODE<sp/>representation&apos;s<sp/>size<sp/>in<sp/>code<sp/>units</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/>(this<sp/>includes<sp/>surrogate<sp/>pairs<sp/>as<sp/>2<sp/>units).</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>Py_UNICODE<sp/>representation<sp/>is<sp/>not<sp/>available,<sp/>it<sp/>will<sp/>be<sp/>computed</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/>on<sp/>request.<sp/><sp/>Use<sp/>PyUnicode_GET_LENGTH()<sp/>for<sp/>the<sp/>length<sp/>in<sp/>code<sp/>points.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_GET_SIZE(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(((PyASCIIObject<sp/>*)(op))-&gt;wstr)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_WSTR_LENGTH(op)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((void)PyUnicode_AsUnicode((PyObject<sp/>*)(op)),<sp/><sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(((PyASCIIObject<sp/>*)(op))-&gt;wstr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_WSTR_LENGTH(op)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_GET_DATA_SIZE(op)<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyUnicode_GET_SIZE(op)<sp/>*<sp/>Py_UNICODE_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Alias<sp/>for<sp/>PyUnicode_AsUnicode().<sp/><sp/>This<sp/>will<sp/>create<sp/>a<sp/>wchar_t/Py_UNICODE</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/>representation<sp/>on<sp/>demand.<sp/><sp/>Using<sp/>this<sp/>macro<sp/>is<sp/>very<sp/>inefficient<sp/>now,</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/>try<sp/>to<sp/>port<sp/>your<sp/>code<sp/>to<sp/>use<sp/>the<sp/>new<sp/>PyUnicode_*BYTE_DATA()<sp/>macros<sp/>or</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/>use<sp/>PyUnicode_WRITE()<sp/>and<sp/>PyUnicode_READ().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_AS_UNICODE(op)<sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(((PyASCIIObject<sp/>*)(op))-&gt;wstr)<sp/>?<sp/>(((PyASCIIObject<sp/>*)(op))-&gt;wstr)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_AsUnicode((PyObject<sp/>*)(op)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_AS_DATA(op)<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((const<sp/>char<sp/>*)(PyUnicode_AS_UNICODE(op)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Flexible<sp/>String<sp/>Representation<sp/>Helper<sp/>Macros<sp/>(PEP<sp/>393)<sp/>--------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Values<sp/>for<sp/>PyASCIIObject.state:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interning<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSTATE_NOT_INTERNED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSTATE_INTERNED_MORTAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SSTATE_INTERNED_IMMORTAL<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>string<sp/>contains<sp/>only<sp/>ASCII<sp/>characters,<sp/>or<sp/>0<sp/>if<sp/>not.<sp/>The</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/>string<sp/>may<sp/>be<sp/>compact<sp/>(PyUnicode_IS_COMPACT_ASCII)<sp/>or<sp/>not,<sp/>but<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/>ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_IS_ASCII(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>assert(PyUnicode_IS_READY(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((PyASCIIObject*)op)-&gt;state.ascii)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>string<sp/>is<sp/>compact<sp/>or<sp/>0<sp/>if<sp/>not.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/>No<sp/>type<sp/>checks<sp/>or<sp/>Ready<sp/>calls<sp/>are<sp/>performed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_IS_COMPACT(op)<sp/>\</highlight></codeline>
<codeline lineno="428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((PyASCIIObject*)(op))-&gt;state.compact)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>string<sp/>is<sp/>a<sp/>compact<sp/>ASCII<sp/>string<sp/>(use<sp/>PyASCIIObject</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/>structure),<sp/>or<sp/>0<sp/>if<sp/>not.<sp/><sp/>No<sp/>type<sp/>checks<sp/>or<sp/>Ready<sp/>calls<sp/>are<sp/>performed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_IS_COMPACT_ASCII(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((PyASCIIObject*)op)-&gt;state.ascii<sp/>&amp;&amp;<sp/>PyUnicode_IS_COMPACT(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>PyUnicode_Kind<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>String<sp/>contains<sp/>only<sp/>wstr<sp/>byte<sp/>characters.<sp/><sp/>This<sp/>is<sp/>only<sp/>possible</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/>when<sp/>the<sp/>string<sp/>was<sp/>created<sp/>with<sp/>a<sp/>legacy<sp/>API<sp/>and<sp/>_PyUnicode_Ready()</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/>has<sp/>not<sp/>been<sp/>called<sp/>yet.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>PyUnicode_WCHAR_KIND<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>values<sp/>of<sp/>the<sp/>PyUnicode_KIND()<sp/>macro:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>PyUnicode_1BYTE_KIND<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>PyUnicode_2BYTE_KIND<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>PyUnicode_4BYTE_KIND<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>pointers<sp/>to<sp/>the<sp/>canonical<sp/>representation<sp/>cast<sp/>to<sp/>unsigned<sp/>char,</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/>Py_UCS2,<sp/>or<sp/>Py_UCS4<sp/>for<sp/>direct<sp/>character<sp/>access.</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/>No<sp/>checks<sp/>are<sp/>performed,<sp/>use<sp/>PyUnicode_KIND()<sp/>before<sp/>to<sp/>ensure</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/>these<sp/>will<sp/>work<sp/>correctly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_1BYTE_DATA(op)<sp/>((Py_UCS1*)PyUnicode_DATA(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_2BYTE_DATA(op)<sp/>((Py_UCS2*)PyUnicode_DATA(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_4BYTE_DATA(op)<sp/>((Py_UCS4*)PyUnicode_DATA(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>one<sp/>of<sp/>the<sp/>PyUnicode_*_KIND<sp/>values<sp/>defined<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_KIND(op)<sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>assert(PyUnicode_IS_READY(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((PyASCIIObject<sp/>*)(op))-&gt;state.kind)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>void<sp/>pointer<sp/>to<sp/>the<sp/>raw<sp/>unicode<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicode_COMPACT_DATA(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(PyUnicode_IS_ASCII(op)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void*)((PyASCIIObject*)(op)<sp/>+<sp/>1))<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((void*)((PyCompactUnicodeObject*)(op)<sp/>+<sp/>1)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicode_NONCOMPACT_DATA(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(((PyUnicodeObject*)(op))-&gt;data.any),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((((PyUnicodeObject<sp/>*)(op))-&gt;data.any)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_DATA(op)<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>PyUnicode_IS_COMPACT(op)<sp/>?<sp/>_PyUnicode_COMPACT_DATA(op)<sp/>:<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>_PyUnicode_NONCOMPACT_DATA(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>the<sp/>access<sp/>macros<sp/>below,<sp/>&quot;kind&quot;<sp/>may<sp/>be<sp/>evaluated<sp/>more<sp/>than<sp/>once.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>All<sp/>other<sp/>macro<sp/>parameters<sp/>are<sp/>evaluated<sp/>exactly<sp/>once,<sp/>so<sp/>it<sp/>is<sp/>safe</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/>to<sp/>put<sp/>side<sp/>effects<sp/>into<sp/>them<sp/>(such<sp/>as<sp/>increasing<sp/>the<sp/>index).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>into<sp/>the<sp/>canonical<sp/>representation,<sp/>this<sp/>macro<sp/>does<sp/>not<sp/>do<sp/>any<sp/>sanity</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/>checks<sp/>and<sp/>is<sp/>intended<sp/>for<sp/>usage<sp/>in<sp/>loops.<sp/><sp/>The<sp/>caller<sp/>should<sp/>cache<sp/>the</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/>kind<sp/>and<sp/>data<sp/>pointers<sp/>obtained<sp/>from<sp/>other<sp/>macro<sp/>calls.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/>index<sp/>is<sp/>the<sp/>index<sp/>in<sp/>the<sp/>string<sp/>(starts<sp/>at<sp/>0)<sp/>and<sp/>value<sp/>is<sp/>the<sp/>new</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/>code<sp/>point<sp/>value<sp/>which<sp/>should<sp/>be<sp/>written<sp/>to<sp/>that<sp/>location.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_WRITE(kind,<sp/>data,<sp/>index,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>((kind))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PyUnicode_1BYTE_KIND:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Py_UCS1<sp/>*)(data))[(index)]<sp/>=<sp/>(Py_UCS1)(value);<sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PyUnicode_2BYTE_KIND:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Py_UCS2<sp/>*)(data))[(index)]<sp/>=<sp/>(Py_UCS2)(value);<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((kind)<sp/>==<sp/>PyUnicode_4BYTE_KIND);<sp/>\</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Py_UCS4<sp/>*)(data))[(index)]<sp/>=<sp/>(Py_UCS4)(value);<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>a<sp/>code<sp/>point<sp/>from<sp/>the<sp/>string&apos;s<sp/>canonical<sp/>representation.<sp/><sp/>No<sp/>checks</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/>or<sp/>ready<sp/>calls<sp/>are<sp/>performed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_READ(kind,<sp/>data,<sp/>index)<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((Py_UCS4)<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((kind)<sp/>==<sp/>PyUnicode_1BYTE_KIND<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS1<sp/>*)(data))[(index)]<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((kind)<sp/>==<sp/>PyUnicode_2BYTE_KIND<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS2<sp/>*)(data))[(index)]<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS4<sp/>*)(data))[(index)]<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyUnicode_READ_CHAR()<sp/>is<sp/>less<sp/>efficient<sp/>than<sp/>PyUnicode_READ()<sp/>because<sp/>it</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/>calls<sp/>PyUnicode_KIND()<sp/>and<sp/>might<sp/>call<sp/>it<sp/>twice.<sp/><sp/>For<sp/>single<sp/>reads,<sp/>use</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_READ_CHAR,<sp/>for<sp/>multiple<sp/>consecutive<sp/>reads<sp/>callers<sp/>should</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/>cache<sp/>kind<sp/>and<sp/>use<sp/>PyUnicode_READ<sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_READ_CHAR(unicode,<sp/>index)<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(unicode)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>assert(PyUnicode_IS_READY(unicode)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(Py_UCS4)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyUnicode_KIND((unicode))<sp/>==<sp/>PyUnicode_1BYTE_KIND<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS1<sp/>*)(PyUnicode_DATA((unicode))))[(index)]<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyUnicode_KIND((unicode))<sp/>==<sp/>PyUnicode_2BYTE_KIND<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS2<sp/>*)(PyUnicode_DATA((unicode))))[(index)]<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((const<sp/>Py_UCS4<sp/>*)(PyUnicode_DATA((unicode))))[(index)]<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>length<sp/>of<sp/>the<sp/>unicode<sp/>string.<sp/>The<sp/>caller<sp/>has<sp/>to<sp/>make<sp/>sure<sp/>that</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>the<sp/>string<sp/>has<sp/>it&apos;s<sp/>canonical<sp/>representation<sp/>set<sp/>before<sp/>calling</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>this<sp/>macro.<sp/><sp/>Call<sp/>PyUnicode_(FAST_)Ready<sp/>to<sp/>ensure<sp/>that.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_GET_LENGTH(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>assert(PyUnicode_IS_READY(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((PyASCIIObject<sp/>*)(op))-&gt;length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fast<sp/>check<sp/>to<sp/>determine<sp/>whether<sp/>an<sp/>object<sp/>is<sp/>ready.<sp/>Equivalent<sp/>to</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_IS_COMPACT(op)<sp/>||<sp/>((PyUnicodeObject*)(op))-&gt;data.any)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_IS_READY(op)<sp/>(((PyASCIIObject*)op)-&gt;state.ready)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyUnicode_READY()<sp/>does<sp/>less<sp/>work<sp/>than<sp/>_PyUnicode_Ready()<sp/>in<sp/>the<sp/>best</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/>case.<sp/><sp/>If<sp/>the<sp/>canonical<sp/>representation<sp/>is<sp/>not<sp/>yet<sp/>set,<sp/>it<sp/>will<sp/>still<sp/>call</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/>_PyUnicode_Ready().</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>0<sp/>on<sp/>success<sp/>and<sp/>-1<sp/>on<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_READY(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_Check(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PyUnicode_IS_READY(op)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>:<sp/>_PyUnicode_Ready((PyObject<sp/>*)(op))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>maximum<sp/>character<sp/>value<sp/>which<sp/>is<sp/>suitable<sp/>for<sp/>creating<sp/>another</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/>string<sp/>based<sp/>on<sp/>op.<sp/><sp/>This<sp/>is<sp/>always<sp/>an<sp/>approximation<sp/>but<sp/>more<sp/>efficient</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/>than<sp/>iterating<sp/>over<sp/>the<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_MAX_CHAR_VALUE(op)<sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(PyUnicode_IS_READY(op)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(PyUnicode_IS_ASCII(op)<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(0x7f)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(PyUnicode_KIND(op)<sp/>==<sp/>PyUnicode_1BYTE_KIND<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xffU)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyUnicode_KIND(op)<sp/>==<sp/>PyUnicode_2BYTE_KIND<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xffffU)<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x10ffffU)))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Constants<sp/>----------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>Unicode<sp/>character<sp/>will<sp/>be<sp/>used<sp/>as<sp/>replacement<sp/>character<sp/>during</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/>decoding<sp/>if<sp/>the<sp/>errors<sp/>argument<sp/>is<sp/>set<sp/>to<sp/>&quot;replace&quot;.<sp/>Note:<sp/>the</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>character<sp/>U+FFFD<sp/>is<sp/>the<sp/>official<sp/>REPLACEMENT<sp/>CHARACTER<sp/>in</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>3.0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_UNICODE_REPLACEMENT_CHARACTER<sp/>((Py_UCS4)<sp/>0xFFFD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===<sp/>Public<sp/>API<sp/>=========================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Plain<sp/>Py_UNICODE<sp/>---------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>With<sp/>PEP<sp/>393,<sp/>this<sp/>is<sp/>the<sp/>recommended<sp/>way<sp/>to<sp/>allocate<sp/>a<sp/>new<sp/>unicode<sp/>object.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>will<sp/>allocate<sp/>the<sp/>object<sp/>and<sp/>its<sp/>buffer<sp/>in<sp/>a<sp/>single<sp/>memory</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/>block.<sp/><sp/>Objects<sp/>created<sp/>using<sp/>this<sp/>function<sp/>are<sp/>not<sp/>resizable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_New(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>code<sp/>points<sp/>in<sp/>the<sp/>new<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>maxchar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>code<sp/>point<sp/>value<sp/>in<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initializes<sp/>the<sp/>canonical<sp/>string<sp/>representation<sp/>from<sp/>the<sp/>deprecated</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/>wstr/Py_UNICODE<sp/>representation.<sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>convert<sp/>Unicode</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/><sp/>objects<sp/>which<sp/>were<sp/>created<sp/>using<sp/>the<sp/>old<sp/>API<sp/>to<sp/>the<sp/>new<sp/>flexible<sp/>format</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/>introduced<sp/>with<sp/>PEP<sp/>393.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/>Don&apos;t<sp/>call<sp/>this<sp/>function<sp/>directly,<sp/>use<sp/>the<sp/>public<sp/>PyUnicode_READY()<sp/>macro</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_Ready(</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>Unicode<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_Copy(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>character<sp/>from<sp/>one<sp/>unicode<sp/>object<sp/>into<sp/>another,<sp/>this<sp/>function<sp/>performs</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/>character<sp/>conversion<sp/>when<sp/>necessary<sp/>and<sp/>falls<sp/>back<sp/>to<sp/>memcpy()<sp/>if<sp/>possible.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/>Fail<sp/>if<sp/>to<sp/>is<sp/>too<sp/>small<sp/>(smaller<sp/>than<sp/>*how_many*<sp/>or<sp/>smaller<sp/>than</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/>len(from)-from_start),<sp/>or<sp/>if<sp/>kind(from[from_start:from_start+how_many])<sp/>&gt;</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/>kind(to),<sp/>or<sp/>if<sp/>*to*<sp/>has<sp/>more<sp/>than<sp/>1<sp/>reference.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"></highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>the<sp/>number<sp/>of<sp/>written<sp/>character,<sp/>or<sp/>return<sp/>-1<sp/>and<sp/>raise<sp/>an<sp/>exception</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"></highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/>Pseudo-code:</highlight></codeline>
<codeline lineno="623"><highlight class="comment"></highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>how_many<sp/>=<sp/>min(how_many,<sp/>len(from)<sp/>-<sp/>from_start)</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to[to_start:to_start+how_many]<sp/>=<sp/>from[from_start:from_start+how_many]</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>how_many</highlight></codeline>
<codeline lineno="627"><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/>Note:<sp/>The<sp/>function<sp/>doesn&apos;t<sp/>write<sp/>a<sp/>terminating<sp/>null<sp/>character.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_CopyCharacters(</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*to,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>to_start,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*from,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>from_start,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>how_many</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unsafe<sp/>version<sp/>of<sp/>PyUnicode_CopyCharacters():<sp/>don&apos;t<sp/>check<sp/>arguments<sp/>and<sp/>so</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/>may<sp/>crash<sp/>if<sp/>parameters<sp/>are<sp/>invalid<sp/>(e.g.<sp/>if<sp/>the<sp/>output<sp/>string</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/>is<sp/>too<sp/>short).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyUnicode_FastCopyCharacters(</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*to,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>to_start,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*from,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>from_start,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>how_many</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fill<sp/>a<sp/>string<sp/>with<sp/>a<sp/>character:<sp/>write<sp/>fill_char<sp/>into</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/>unicode[start:start+length].</highlight></codeline>
<codeline lineno="654"><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/>Fail<sp/>if<sp/>fill_char<sp/>is<sp/>bigger<sp/>than<sp/>the<sp/>string<sp/>maximum<sp/>character,<sp/>or<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/>string<sp/>has<sp/>more<sp/>than<sp/>1<sp/>reference.</highlight></codeline>
<codeline lineno="657"><highlight class="comment"></highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>the<sp/>number<sp/>of<sp/>written<sp/>character,<sp/>or<sp/>return<sp/>-1<sp/>and<sp/>raise<sp/>an<sp/>exception</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_Fill(</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>fill_char</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unsafe<sp/>version<sp/>of<sp/>PyUnicode_Fill():<sp/>don&apos;t<sp/>check<sp/>arguments<sp/>and<sp/>so<sp/>may<sp/>crash</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/>if<sp/>parameters<sp/>are<sp/>invalid<sp/>(e.g.<sp/>if<sp/>length<sp/>is<sp/>longer<sp/>than<sp/>the<sp/>string).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyUnicode_FastFill(</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>fill_char</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>Unicode<sp/>Object<sp/>from<sp/>the<sp/>Py_UNICODE<sp/>buffer<sp/>u<sp/>of<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/>size.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/>u<sp/>may<sp/>be<sp/>NULL<sp/>which<sp/>causes<sp/>the<sp/>contents<sp/>to<sp/>be<sp/>undefined.<sp/>It<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>user&apos;s<sp/>responsibility<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>needed<sp/>data<sp/>afterwards.<sp/>Note</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/>that<sp/>modifying<sp/>the<sp/>Unicode<sp/>object<sp/>contents<sp/>after<sp/>construction<sp/>is</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/>only<sp/>allowed<sp/>if<sp/>u<sp/>was<sp/>set<sp/>to<sp/>NULL.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"></highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/>The<sp/>buffer<sp/>is<sp/>copied<sp/>into<sp/>the<sp/>new<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromUnicode(</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_FromUnicode(),<sp/>but<sp/>u<sp/>points<sp/>to<sp/>UTF-8<sp/>encoded<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromStringAndSize(</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_FromUnicode(),<sp/>but<sp/>u<sp/>points<sp/>to<sp/>null-terminated</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/>UTF-8<sp/>encoded<sp/>bytes.<sp/><sp/>The<sp/>size<sp/>is<sp/>determined<sp/>with<sp/>strlen().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromString(</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*u<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>string<sp/>from<sp/>a<sp/>buffer<sp/>of<sp/>Py_UCS1,<sp/>Py_UCS2<sp/>or<sp/>Py_UCS4<sp/>characters.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/>Scan<sp/>the<sp/>string<sp/>to<sp/>find<sp/>the<sp/>maximum<sp/>character.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromKindAndData(</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>string<sp/>from<sp/>a<sp/>buffer<sp/>of<sp/>ASCII<sp/>characters.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/>WARNING:<sp/>Don&apos;t<sp/>check<sp/>if<sp/>the<sp/>string<sp/>contains<sp/>any<sp/>non-ASCII<sp/>character.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_FromASCII(</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Substring(</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>maximum<sp/>character<sp/>of<sp/>the<sp/>substring<sp/>unicode[start:end].</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>127<sp/>for<sp/>an<sp/>empty<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">PyAPI_FUNC(Py_UCS4)<sp/>_PyUnicode_FindMaxChar<sp/>(</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>string<sp/>into<sp/>a<sp/>UCS4<sp/>buffer<sp/>including<sp/>the<sp/>null<sp/>character<sp/>if<sp/>copy_null</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/>is<sp/>set.<sp/>Return<sp/>NULL<sp/>and<sp/>raise<sp/>an<sp/>exception<sp/>on<sp/>error.<sp/>Raise<sp/>a<sp/>SystemError<sp/>if</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/>the<sp/>buffer<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>string.<sp/>Return<sp/>buffer<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/>buflen<sp/>is<sp/>the<sp/>length<sp/>of<sp/>the<sp/>buffer<sp/>in<sp/>(Py_UCS4)<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">PyAPI_FUNC(Py_UCS4*)<sp/>PyUnicode_AsUCS4(</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4*<sp/>buffer,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>buflen,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copy_null);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>string<sp/>into<sp/>a<sp/>UCS4<sp/>buffer.<sp/>A<sp/>new<sp/>buffer<sp/>is<sp/>allocated<sp/>using</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>PyMem_Malloc;<sp/>if<sp/>this<sp/>fails,<sp/>NULL<sp/>is<sp/>returned<sp/>with<sp/>a<sp/>memory<sp/>error</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/>exception<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">PyAPI_FUNC(Py_UCS4*)<sp/>PyUnicode_AsUCS4Copy(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>read-only<sp/>pointer<sp/>to<sp/>the<sp/>Unicode<sp/>object&apos;s<sp/>internal</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/>Py_UNICODE<sp/>buffer.</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>wchar_t/Py_UNICODE<sp/>representation<sp/>is<sp/>not<sp/>yet<sp/>available,<sp/>this</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/>function<sp/>will<sp/>calculate<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">PyAPI_FUNC(Py_UNICODE<sp/>*)<sp/>PyUnicode_AsUnicode(</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_AsUnicode(),<sp/>but<sp/>raises<sp/>a<sp/>ValueError<sp/>if<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/>contains<sp/>null<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*)<sp/>_PyUnicode_AsUnicode(</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>read-only<sp/>pointer<sp/>to<sp/>the<sp/>Unicode<sp/>object&apos;s<sp/>internal</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/>Py_UNICODE<sp/>buffer<sp/>and<sp/>save<sp/>the<sp/>length<sp/>at<sp/>size.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/>If<sp/>the<sp/>wchar_t/Py_UNICODE<sp/>representation<sp/>is<sp/>not<sp/>yet<sp/>available,<sp/>this</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/>function<sp/>will<sp/>calculate<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">PyAPI_FUNC(Py_UNICODE<sp/>*)<sp/>PyUnicode_AsUnicodeAndSize(</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>location<sp/>where<sp/>to<sp/>save<sp/>the<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>length<sp/>of<sp/>the<sp/>Unicode<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_GetLength(</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode</highlight></codeline>
<codeline lineno="787"><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>units<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/>string<sp/>representation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_GetSize(</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>a<sp/>character<sp/>from<sp/>the<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">PyAPI_FUNC(Py_UCS4)<sp/>PyUnicode_ReadChar(</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>index</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>a<sp/>character<sp/>to<sp/>the<sp/>string.<sp/>The<sp/>string<sp/>must<sp/>have<sp/>been<sp/>created<sp/>through</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_New,<sp/>must<sp/>not<sp/>be<sp/>shared,<sp/>and<sp/>must<sp/>not<sp/>have<sp/>been<sp/>hashed<sp/>yet.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"></highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_WriteChar(</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>index,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>character</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>maximum<sp/>ordinal<sp/>for<sp/>a<sp/>Unicode<sp/>character.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">PyAPI_FUNC(Py_UNICODE)<sp/>PyUnicode_GetMax(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Resize<sp/>a<sp/>Unicode<sp/>object.<sp/>The<sp/>length<sp/>is<sp/>the<sp/>number<sp/>of<sp/>characters,<sp/>except</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/>if<sp/>the<sp/>kind<sp/>of<sp/>the<sp/>string<sp/>is<sp/>PyUnicode_WCHAR_KIND:<sp/>in<sp/>this<sp/>case,<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/>is<sp/>the<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>characters.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/>*unicode<sp/>is<sp/>modified<sp/>to<sp/>point<sp/>to<sp/>the<sp/>new<sp/>(resized)<sp/>object<sp/>and<sp/>0</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/>returned<sp/>on<sp/>success.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"></highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/>Try<sp/>to<sp/>resize<sp/>the<sp/>string<sp/>in<sp/>place<sp/>(which<sp/>is<sp/>usually<sp/>faster<sp/>than<sp/>allocating</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/>a<sp/>new<sp/>string<sp/>and<sp/>copy<sp/>characters),<sp/>or<sp/>create<sp/>a<sp/>new<sp/>string.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"></highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/>Error<sp/>handling<sp/>is<sp/>implemented<sp/>as<sp/>follows:<sp/>an<sp/>exception<sp/>is<sp/>set,<sp/>-1</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/>is<sp/>returned<sp/>and<sp/>*unicode<sp/>left<sp/>untouched.</highlight></codeline>
<codeline lineno="834"><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/>WARNING:<sp/>The<sp/>function<sp/>doesn&apos;t<sp/>check<sp/>string<sp/>content,<sp/>the<sp/>result<sp/>may<sp/>not<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>in<sp/>canonical<sp/>representation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_Resize(</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>the<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>New<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>obj<sp/>to<sp/>a<sp/>Unicode<sp/>object.</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/>bytes,<sp/>bytearray<sp/>and<sp/>other<sp/>bytes-like<sp/>objects<sp/>are<sp/>decoded<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/>given<sp/>encoding<sp/>and<sp/>error<sp/>handler.<sp/>The<sp/>encoding<sp/>and<sp/>error<sp/>handler<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/>NULL<sp/>to<sp/>have<sp/>the<sp/>interface<sp/>use<sp/>UTF-8<sp/>and<sp/>&quot;strict&quot;.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"></highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/>All<sp/>other<sp/>objects<sp/>(including<sp/>Unicode<sp/>objects)<sp/>raise<sp/>an<sp/>exception.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"></highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/>The<sp/>API<sp/>returns<sp/>NULL<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.<sp/>The<sp/>caller<sp/>is<sp/>responsible</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/>for<sp/>decref&apos;ing<sp/>the<sp/>returned<sp/>objects.</highlight></codeline>
<codeline lineno="853"><highlight class="comment"></highlight></codeline>
<codeline lineno="854"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromEncodedObject(</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>an<sp/>instance<sp/>of<sp/>a<sp/>Unicode<sp/>subtype<sp/>to<sp/>a<sp/>new<sp/>true<sp/>Unicode<sp/>object<sp/>if</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/>necessary.<sp/>If<sp/>obj<sp/>is<sp/>already<sp/>a<sp/>true<sp/>Unicode<sp/>object<sp/>(not<sp/>a<sp/>subtype),<sp/>return</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/>the<sp/>reference<sp/>with<sp/>*incremented*<sp/>refcount.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"></highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/>The<sp/>API<sp/>returns<sp/>NULL<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.<sp/>The<sp/>caller<sp/>is<sp/>responsible</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/>for<sp/>decref&apos;ing<sp/>the<sp/>returned<sp/>objects.</highlight></codeline>
<codeline lineno="868"><highlight class="comment"></highlight></codeline>
<codeline lineno="869"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromObject(</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_FromFormatV(</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>vargs</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_FromFormat(</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="struct___py_unicode_writer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*buffer;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>PyUnicode_Kind<sp/>kind;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>maxchar;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>pos;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>number<sp/>of<sp/>allocated<sp/>characters<sp/>(default:<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>min_length;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimum<sp/>character<sp/>(default:<sp/>127,<sp/>ASCII)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>min_char;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>non-zero,<sp/>overallocate<sp/>the<sp/>buffer<sp/>(default:<sp/>0).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>overallocate;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>readonly<sp/>is<sp/>1,<sp/>buffer<sp/>is<sp/>a<sp/>shared<sp/>string<sp/>(cannot<sp/>be<sp/>modified)</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>size<sp/>is<sp/>set<sp/>to<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>readonly;</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}<sp/><ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>a<sp/>Unicode<sp/>writer.</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*<sp/>By<sp/>default,<sp/>the<sp/>minimum<sp/>buffer<sp/>size<sp/>is<sp/>0<sp/>character<sp/>and<sp/>overallocation<sp/>is</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*<sp/>disabled.<sp/>Set<sp/>min_length,<sp/>min_char<sp/>and<sp/>overallocate<sp/>attributes<sp/>to<sp/>control</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>the<sp/>allocation<sp/>of<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">_PyUnicodeWriter_Init(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Prepare<sp/>the<sp/>buffer<sp/>to<sp/>write<sp/>&apos;length&apos;<sp/>characters</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/>with<sp/>the<sp/>specified<sp/>maximum<sp/>character.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"></highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicodeWriter_Prepare(WRITER,<sp/>LENGTH,<sp/>MAXCHAR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="920"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((MAXCHAR)<sp/>&lt;=<sp/>(WRITER)-&gt;maxchar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(LENGTH)<sp/>&lt;=<sp/>(WRITER)-&gt;size<sp/>-<sp/>(WRITER)-&gt;pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="922"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>?<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>(((LENGTH)<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_PyUnicodeWriter_PrepareInternal((WRITER),<sp/>(LENGTH),<sp/>(MAXCHAR))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>call<sp/>this<sp/>function<sp/>directly,<sp/>use<sp/>the<sp/>_PyUnicodeWriter_Prepare()<sp/>macro</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">_PyUnicodeWriter_PrepareInternal(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/>Py_UCS4<sp/>maxchar);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Prepare<sp/>the<sp/>buffer<sp/>to<sp/>have<sp/>at<sp/>least<sp/>the<sp/>kind<sp/>KIND.</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/>For<sp/>example,<sp/>kind=PyUnicode_2BYTE_KIND<sp/>ensures<sp/>that<sp/>the<sp/>writer<sp/>will</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/><sp/>support<sp/>characters<sp/>in<sp/>range<sp/>U+000-U+FFFF.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"></highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicodeWriter_PrepareKind(WRITER,<sp/>KIND)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert((KIND)<sp/>!=<sp/>PyUnicode_WCHAR_KIND),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(KIND)<sp/>&lt;=<sp/>(WRITER)-&gt;kind<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>?<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>_PyUnicodeWriter_PrepareKindInternal((WRITER),<sp/>(KIND)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>call<sp/>this<sp/>function<sp/>directly,<sp/>use<sp/>the<sp/>_PyUnicodeWriter_PrepareKind()</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/>macro<sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="947"><highlight class="normal">_PyUnicodeWriter_PrepareKindInternal(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>PyUnicode_Kind<sp/>kind);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>a<sp/>Unicode<sp/>character.</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">_PyUnicodeWriter_WriteChar(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>a<sp/>Unicode<sp/>string.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="960"><highlight class="normal">_PyUnicodeWriter_WriteStr(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>a<sp/>substring<sp/>of<sp/>a<sp/>Unicode<sp/>string.</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="967"><highlight class="normal">_PyUnicodeWriter_WriteSubstring(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>an<sp/>ASCII-encoded<sp/>byte<sp/>string.</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="976"><highlight class="normal">_PyUnicodeWriter_WriteASCIIString(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>byte<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bytes,<sp/>or<sp/>-1<sp/>if<sp/>unknown<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Append<sp/>a<sp/>latin1-encoded<sp/>byte<sp/>string.</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/>Return<sp/>0<sp/>on<sp/>success,<sp/>raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="984"><highlight class="normal">_PyUnicodeWriter_WriteLatin1String(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>latin1-encoded<sp/>byte<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>in<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>writer<sp/>as<sp/>a<sp/>Unicode<sp/>string.<sp/>Clear<sp/>the</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/>buffer<sp/>of<sp/>the<sp/>writer.<sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>NULL</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/><sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)</highlight></codeline>
<codeline lineno="993"><highlight class="normal">_PyUnicodeWriter_Finish(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deallocate<sp/>memory<sp/>of<sp/>a<sp/>writer<sp/>(clear<sp/>its<sp/>internal<sp/>buffer).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="997"><highlight class="normal">_PyUnicodeWriter_Dealloc(<ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Format<sp/>the<sp/>object<sp/>based<sp/>on<sp/>the<sp/>format_spec,<sp/>as<sp/>defined<sp/>in<sp/>PEP<sp/>3101</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/>(Advanced<sp/>String<sp/>Formatting).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_FormatAdvancedWriter(</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py_unicode_writer" kindref="compound">_PyUnicodeWriter</ref><sp/>*writer,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*format_spec,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyUnicode_InternInPlace(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyUnicode_InternImmortal(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_InternFromString(</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*u<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_ReleaseInternedUnicodeStrings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>only<sp/>if<sp/>you<sp/>know<sp/>it&apos;s<sp/>a<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyUnicode_CHECK_INTERNED(op)<sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((PyASCIIObject<sp/>*)(op))-&gt;state.interned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>wchar_t<sp/>support<sp/>for<sp/>platforms<sp/>which<sp/>support<sp/>it<sp/>---------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_WCHAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>Unicode<sp/>Object<sp/>from<sp/>the<sp/>wchar_t<sp/>buffer<sp/>w<sp/>of<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/>size.</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"></highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/>The<sp/>buffer<sp/>is<sp/>copied<sp/>into<sp/>the<sp/>new<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromWideChar(</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*w,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wchar_t<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copies<sp/>the<sp/>Unicode<sp/>Object<sp/>contents<sp/>into<sp/>the<sp/>wchar_t<sp/>buffer<sp/>w.<sp/><sp/>At</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/>most<sp/>size<sp/>wchar_t<sp/>characters<sp/>are<sp/>copied.</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>the<sp/>resulting<sp/>wchar_t<sp/>string<sp/>may<sp/>or<sp/>may<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/>0-terminated.<sp/><sp/>It<sp/>is<sp/>the<sp/>responsibility<sp/>of<sp/>the<sp/>caller<sp/>to<sp/>make<sp/>sure</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/>that<sp/>the<sp/>wchar_t<sp/>string<sp/>is<sp/>0-terminated<sp/>in<sp/>case<sp/>this<sp/>is<sp/>required<sp/>by</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>wchar_t<sp/>characters<sp/>copied<sp/>(excluding<sp/>a</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/>possibly<sp/>trailing<sp/>0-termination<sp/>character)<sp/>or<sp/>-1<sp/>in<sp/>case<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/><sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_AsWideChar(</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*w,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wchar_t<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Convert<sp/>the<sp/>Unicode<sp/>object<sp/>to<sp/>a<sp/>wide<sp/>character<sp/>string.<sp/>The<sp/>output<sp/>string</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/>always<sp/>ends<sp/>with<sp/>a<sp/>nul<sp/>character.<sp/>If<sp/>size<sp/>is<sp/>not<sp/>NULL,<sp/>write<sp/>the<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/>wide<sp/>characters<sp/>(excluding<sp/>the<sp/>null<sp/>character)<sp/>into<sp/>*size.</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"></highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>a<sp/>buffer<sp/>allocated<sp/>by<sp/>PyMem_Malloc()<sp/>(use<sp/>PyMem_Free()<sp/>to<sp/>free<sp/>it)</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/><sp/>on<sp/>success.<sp/>On<sp/>error,<sp/>returns<sp/>NULL,<sp/>*size<sp/>is<sp/>undefined<sp/>and<sp/>raises<sp/>a</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/>MemoryError.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*)<sp/>PyUnicode_AsWideCharString(</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>characters<sp/>of<sp/>the<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_AsWideCharString(unicode,<sp/>NULL),<sp/>but<sp/>check<sp/>if</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/><sp/>the<sp/>string<sp/>contains<sp/>null<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*)<sp/>_PyUnicode_AsWideCharString(</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>_PyUnicode_AsKind(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kind);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Unicode<sp/>ordinals<sp/>---------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>Unicode<sp/>Object<sp/>from<sp/>the<sp/>given<sp/>Unicode<sp/>code<sp/>point<sp/>ordinal.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"></highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/>The<sp/>ordinal<sp/>must<sp/>be<sp/>in<sp/>range(0x110000).<sp/>A<sp/>ValueError<sp/>is</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/><sp/><sp/>raised<sp/>in<sp/>case<sp/>it<sp/>is<sp/>not.</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"></highlight></codeline>
<codeline lineno="1088"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_FromOrdinal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordinal);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Free-list<sp/>management<sp/>-----------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>free<sp/>list<sp/>used<sp/>by<sp/>the<sp/>Unicode<sp/>implementation.</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"></highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/>This<sp/>can<sp/>be<sp/>used<sp/>to<sp/>release<sp/>memory<sp/>used<sp/>for<sp/>objects<sp/>on<sp/>the<sp/>free</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/>list<sp/>back<sp/>to<sp/>the<sp/>Python<sp/>memory<sp/>allocator.</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"></highlight></codeline>
<codeline lineno="1099"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_ClearFreeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===<sp/>Builtin<sp/>Codecs<sp/>=====================================================</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"></highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/>Many<sp/>of<sp/>these<sp/>APIs<sp/>take<sp/>two<sp/>arguments<sp/>encoding<sp/>and<sp/>errors.<sp/>These</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/>parameters<sp/>encoding<sp/>and<sp/>errors<sp/>have<sp/>the<sp/>same<sp/>semantics<sp/>as<sp/>the<sp/>ones</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>builtin<sp/>str()<sp/>API.</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/><sp/>Setting<sp/>encoding<sp/>to<sp/>NULL<sp/>causes<sp/>the<sp/>default<sp/>encoding<sp/>(UTF-8)<sp/>to<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"></highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/>Error<sp/>handling<sp/>is<sp/>set<sp/>by<sp/>errors<sp/>which<sp/>may<sp/>also<sp/>be<sp/>set<sp/>to<sp/>NULL</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/>meaning<sp/>to<sp/>use<sp/>the<sp/>default<sp/>handling<sp/>defined<sp/>for<sp/>the<sp/>codec.<sp/>Default</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/>error<sp/>handling<sp/>for<sp/>all<sp/>builtin<sp/>codecs<sp/>is<sp/>&quot;strict&quot;<sp/>(ValueErrors<sp/>are</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/>raised).</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"></highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/>The<sp/>codecs<sp/>all<sp/>use<sp/>a<sp/>similar<sp/>interface.<sp/>Only<sp/>deviation<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/>generic<sp/>ones<sp/>are<sp/>documented.</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"></highlight></codeline>
<codeline lineno="1119"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Manage<sp/>the<sp/>default<sp/>encoding<sp/>----------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>default<sp/>encoding<sp/>(UTF-8)<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>object<sp/>unicode<sp/>and<sp/>the<sp/>size<sp/>of<sp/>the<sp/>encoded<sp/>representation</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/>in<sp/>bytes<sp/>stored<sp/>in<sp/>*size.</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/>In<sp/>case<sp/>of<sp/>an<sp/>error,<sp/>no<sp/>*size<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>caches<sp/>the<sp/>UTF-8<sp/>encoded<sp/>string<sp/>in<sp/>the<sp/>unicodeobject</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/>and<sp/>subsequent<sp/>calls<sp/>will<sp/>return<sp/>the<sp/>same<sp/>string.<sp/><sp/>The<sp/>memory<sp/>is<sp/>released</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/>when<sp/>the<sp/>unicodeobject<sp/>is<sp/>deallocated.</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"></highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/>_PyUnicode_AsStringAndSize<sp/>is<sp/>a<sp/>#define<sp/>for<sp/>PyUnicode_AsUTF8AndSize<sp/>to</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/>support<sp/>the<sp/>previous<sp/>internal<sp/>function<sp/>with<sp/>the<sp/>same<sp/>behaviour.</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"></highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/>***<sp/>This<sp/>API<sp/>is<sp/>for<sp/>interpreter<sp/>INTERNAL<sp/>USE<sp/>ONLY<sp/>and<sp/>will<sp/>likely</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/>***<sp/>be<sp/>removed<sp/>or<sp/>changed<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"></highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/>***<sp/>If<sp/>you<sp/>need<sp/>to<sp/>access<sp/>the<sp/>Unicode<sp/>object<sp/>as<sp/>UTF-8<sp/>bytes<sp/>string,</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/>***<sp/>please<sp/>use<sp/>PyUnicode_AsUTF8String()<sp/>instead.</highlight></codeline>
<codeline lineno="1141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>PyUnicode_AsUTF8AndSize(</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*size);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicode_AsStringAndSize<sp/>PyUnicode_AsUTF8AndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>default<sp/>encoding<sp/>(UTF-8)<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>object<sp/>unicode.</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/>Like<sp/>PyUnicode_AsUTF8AndSize(),<sp/>this<sp/>also<sp/>caches<sp/>the<sp/>UTF-8<sp/>representation</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/>in<sp/>the<sp/>unicodeobject.</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"></highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/>_PyUnicode_AsString<sp/>is<sp/>a<sp/>#define<sp/>for<sp/>PyUnicode_AsUTF8<sp/>to</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/>support<sp/>the<sp/>previous<sp/>internal<sp/>function<sp/>with<sp/>the<sp/>same<sp/>behaviour.</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"></highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>of<sp/>this<sp/>API<sp/>is<sp/>DEPRECATED<sp/>since<sp/>no<sp/>size<sp/>information<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/>extracted<sp/>from<sp/>the<sp/>returned<sp/>data.</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"></highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/>***<sp/>This<sp/>API<sp/>is<sp/>for<sp/>interpreter<sp/>INTERNAL<sp/>USE<sp/>ONLY<sp/>and<sp/>will<sp/>likely</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/>***<sp/>be<sp/>removed<sp/>or<sp/>changed<sp/>for<sp/>Python<sp/>3.1.</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"></highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/>***<sp/>If<sp/>you<sp/>need<sp/>to<sp/>access<sp/>the<sp/>Unicode<sp/>object<sp/>as<sp/>UTF-8<sp/>bytes<sp/>string,</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/>***<sp/>please<sp/>use<sp/>PyUnicode_AsUTF8String()<sp/>instead.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"></highlight></codeline>
<codeline lineno="1168"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>PyUnicode_AsUTF8(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicode_AsString<sp/>PyUnicode_AsUTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>&quot;utf-8&quot;.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>PyUnicode_GetDefaultEncoding(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Generic<sp/>Codecs<sp/>-----------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>Unicode<sp/>object<sp/>by<sp/>decoding<sp/>the<sp/>encoded<sp/>string<sp/>s<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/><sp/>given<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Decode(</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>Unicode<sp/>object<sp/>unicode<sp/>and<sp/>return<sp/>the<sp/>result<sp/>as<sp/>Python</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/>object.</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"></highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/>This<sp/>API<sp/>is<sp/>DEPRECATED.<sp/>The<sp/>only<sp/>supported<sp/>standard<sp/>encoding<sp/>is<sp/>rot13.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>PyCodec_Decode()<sp/>to<sp/>decode<sp/>with<sp/>rot13<sp/>and<sp/>non-standard<sp/>codecs</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/>that<sp/>decode<sp/>from<sp/>str.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsDecodedObject(</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>Py_DEPRECATED(3.6);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>Unicode<sp/>object<sp/>unicode<sp/>and<sp/>return<sp/>the<sp/>result<sp/>as<sp/>Unicode</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/>object.</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"></highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/><sp/><sp/>This<sp/>API<sp/>is<sp/>DEPRECATED.<sp/>The<sp/>only<sp/>supported<sp/>standard<sp/>encoding<sp/>is<sp/>rot13.</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>PyCodec_Decode()<sp/>to<sp/>decode<sp/>with<sp/>rot13<sp/>and<sp/>non-standard<sp/>codecs</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/>that<sp/>decode<sp/>from<sp/>str<sp/>to<sp/>str.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsDecodedUnicode(</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>Py_DEPRECATED(3.6);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encodes<sp/>a<sp/>Py_UNICODE<sp/>buffer<sp/>of<sp/>the<sp/>given<sp/>size<sp/>and<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/>Python<sp/>string<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Encode(</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encodes<sp/>a<sp/>Unicode<sp/>object<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>as<sp/>Python</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/>object.</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"></highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/>This<sp/>API<sp/>is<sp/>DEPRECATED.<sp/><sp/>It<sp/>is<sp/>superceeded<sp/>by<sp/>PyUnicode_AsEncodedString()</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/>since<sp/>all<sp/>standard<sp/>encodings<sp/>(except<sp/>rot13)<sp/>encode<sp/>str<sp/>to<sp/>bytes.</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>PyCodec_Encode()<sp/>for<sp/>encoding<sp/>with<sp/>rot13<sp/>and<sp/>non-standard<sp/>codecs</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/>that<sp/>encode<sp/>form<sp/>str<sp/>to<sp/>non-bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsEncodedObject(</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>Py_DEPRECATED(3.6);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encodes<sp/>a<sp/>Unicode<sp/>object<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>as<sp/>Python<sp/>string</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsEncodedString(</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encodes<sp/>a<sp/>Unicode<sp/>object<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>as<sp/>Unicode</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/><sp/><sp/>object.</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"></highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/>This<sp/>API<sp/>is<sp/>DEPRECATED.<sp/><sp/>The<sp/>only<sp/>supported<sp/>standard<sp/>encodings<sp/>is<sp/>rot13.</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>PyCodec_Encode()<sp/>to<sp/>encode<sp/>with<sp/>rot13<sp/>and<sp/>non-standard<sp/>codecs</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/>that<sp/>encode<sp/>from<sp/>str<sp/>to<sp/>str.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsEncodedUnicode(</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>Py_DEPRECATED(3.6);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Build<sp/>an<sp/>encoding<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_BuildEncodingMap(</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>256<sp/>character<sp/>map<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>UTF-7<sp/>Codecs<sp/>-------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF7(</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-7<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF7Stateful(</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-7<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeUTF7(</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base64SetO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>RFC2152<sp/>Set<sp/>O<sp/>characters<sp/>in<sp/>base64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base64WhiteSpace,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>whitespace<sp/>(sp,<sp/>ht,<sp/>nl,<sp/>cr)<sp/>in<sp/>base64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_EncodeUTF7(</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base64SetO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>RFC2152<sp/>Set<sp/>O<sp/>characters<sp/>in<sp/>base64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base64WhiteSpace,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encode<sp/>whitespace<sp/>(sp,<sp/>ht,<sp/>nl,<sp/>cr)<sp/>in<sp/>base64<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>UTF-8<sp/>Codecs<sp/>-------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF8(</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF8Stateful(</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-8<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsUTF8String(</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_AsUTF8String(</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeUTF8(</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>UTF-32<sp/>Codecs<sp/>------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decodes<sp/>length<sp/>bytes<sp/>from<sp/>a<sp/>UTF-32<sp/>encoded<sp/>buffer<sp/>string<sp/>and<sp/>returns</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/>the<sp/>corresponding<sp/>Unicode<sp/>object.</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"></highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/><sp/>errors<sp/>(if<sp/>non-NULL)<sp/>defines<sp/>the<sp/>error<sp/>handling.<sp/>It<sp/>defaults</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/><sp/>to<sp/>&quot;strict&quot;.</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"></highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>non-NULL,<sp/>the<sp/>decoder<sp/>starts<sp/>decoding<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/>given<sp/>byte<sp/>order:</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"></highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>-1:<sp/>little<sp/>endian</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>0:<sp/><sp/>native<sp/>order</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>1:<sp/><sp/>big<sp/>endian</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"></highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/><sp/>In<sp/>native<sp/>mode,<sp/>the<sp/>first<sp/>four<sp/>bytes<sp/>of<sp/>the<sp/>stream<sp/>are<sp/>checked<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/><sp/><sp/>BOM<sp/>mark.<sp/>If<sp/>found,<sp/>the<sp/>BOM<sp/>mark<sp/>is<sp/>analysed,<sp/>the<sp/>byte<sp/>order</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/><sp/><sp/>adjusted<sp/>and<sp/>the<sp/>BOM<sp/>skipped.<sp/><sp/>In<sp/>the<sp/>other<sp/>modes,<sp/>no<sp/>BOM<sp/>mark</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/>interpretation<sp/>is<sp/>done.<sp/>After<sp/>completion,<sp/>*byteorder<sp/>is<sp/>set<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/><sp/>current<sp/>byte<sp/>order<sp/>at<sp/>the<sp/>end<sp/>of<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"></highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>NULL,<sp/>the<sp/>codec<sp/>starts<sp/>in<sp/>native<sp/>order<sp/>mode.</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"></highlight></codeline>
<codeline lineno="1356"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF32(</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-32<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>byteorder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="1363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0=native;-1=LE,1=BE;<sp/>updated<sp/>on</highlight></codeline>
<codeline lineno="1364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF32Stateful(</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-32<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*byteorder,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>byteorder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0=native;-1=LE,1=BE;<sp/>updated<sp/>on</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>Python<sp/>string<sp/>using<sp/>the<sp/>UTF-32<sp/>encoding<sp/>in<sp/>native<sp/>byte</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/><sp/>order.<sp/>The<sp/>string<sp/>always<sp/>starts<sp/>with<sp/>a<sp/>BOM<sp/>mark.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsUTF32String(</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>Python<sp/>string<sp/>object<sp/>holding<sp/>the<sp/>UTF-32<sp/>encoded<sp/>value<sp/>of</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/><sp/>the<sp/>Unicode<sp/>data.</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"></highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>not<sp/>0,<sp/>output<sp/>is<sp/>written<sp/>according<sp/>to<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/><sp/>byte<sp/>order:</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"></highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>-1:<sp/>little<sp/>endian</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>0:<sp/><sp/>native<sp/>byte<sp/>order<sp/>(writes<sp/>a<sp/>BOM<sp/>mark)</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>1:<sp/><sp/>big<sp/>endian</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"></highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>0,<sp/>the<sp/>output<sp/>string<sp/>will<sp/>always<sp/>start<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>BOM<sp/>mark<sp/>(U+FEFF).<sp/>In<sp/>the<sp/>other<sp/>two<sp/>modes,<sp/>no<sp/>BOM<sp/>mark<sp/>is</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/><sp/><sp/>prepended.</highlight></codeline>
<codeline lineno="1397"><highlight class="comment"></highlight></codeline>
<codeline lineno="1398"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeUTF32(</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>byteorder<sp/>to<sp/>use<sp/>0=BOM+native;-1=LE,1=BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_EncodeUTF32(</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>byteorder<sp/>to<sp/>use<sp/>0=BOM+native;-1=LE,1=BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>UTF-16<sp/>Codecs<sp/>------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decodes<sp/>length<sp/>bytes<sp/>from<sp/>a<sp/>UTF-16<sp/>encoded<sp/>buffer<sp/>string<sp/>and<sp/>returns</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/><sp/>the<sp/>corresponding<sp/>Unicode<sp/>object.</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"></highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/><sp/>errors<sp/>(if<sp/>non-NULL)<sp/>defines<sp/>the<sp/>error<sp/>handling.<sp/>It<sp/>defaults</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/>to<sp/>&quot;strict&quot;.</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"></highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>non-NULL,<sp/>the<sp/>decoder<sp/>starts<sp/>decoding<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/><sp/>given<sp/>byte<sp/>order:</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"></highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>-1:<sp/>little<sp/>endian</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>0:<sp/><sp/>native<sp/>order</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/><sp/><sp/><sp/>*byteorder<sp/>==<sp/>1:<sp/><sp/>big<sp/>endian</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"></highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/><sp/>In<sp/>native<sp/>mode,<sp/>the<sp/>first<sp/>two<sp/>bytes<sp/>of<sp/>the<sp/>stream<sp/>are<sp/>checked<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/><sp/>BOM<sp/>mark.<sp/>If<sp/>found,<sp/>the<sp/>BOM<sp/>mark<sp/>is<sp/>analysed,<sp/>the<sp/>byte<sp/>order</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/><sp/>adjusted<sp/>and<sp/>the<sp/>BOM<sp/>skipped.<sp/><sp/>In<sp/>the<sp/>other<sp/>modes,<sp/>no<sp/>BOM<sp/>mark</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/><sp/>interpretation<sp/>is<sp/>done.<sp/>After<sp/>completion,<sp/>*byteorder<sp/>is<sp/>set<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/><sp/>current<sp/>byte<sp/>order<sp/>at<sp/>the<sp/>end<sp/>of<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"></highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>NULL,<sp/>the<sp/>codec<sp/>starts<sp/>in<sp/>native<sp/>order<sp/>mode.</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"></highlight></codeline>
<codeline lineno="1437"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF16(</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-16<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>byteorder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0=native;-1=LE,1=BE;<sp/>updated<sp/>on</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUTF16Stateful(</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UTF-16<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*byteorder,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>byteorder<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0=native;-1=LE,1=BE;<sp/>updated<sp/>on</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>Python<sp/>string<sp/>using<sp/>the<sp/>UTF-16<sp/>encoding<sp/>in<sp/>native<sp/>byte</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/><sp/><sp/>order.<sp/>The<sp/>string<sp/>always<sp/>starts<sp/>with<sp/>a<sp/>BOM<sp/>mark.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsUTF16String(</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>a<sp/>Python<sp/>string<sp/>object<sp/>holding<sp/>the<sp/>UTF-16<sp/>encoded<sp/>value<sp/>of</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/><sp/>the<sp/>Unicode<sp/>data.</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"></highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>not<sp/>0,<sp/>output<sp/>is<sp/>written<sp/>according<sp/>to<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/><sp/>byte<sp/>order:</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"></highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>-1:<sp/>little<sp/>endian</highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>0:<sp/><sp/>native<sp/>byte<sp/>order<sp/>(writes<sp/>a<sp/>BOM<sp/>mark)</highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/><sp/><sp/>byteorder<sp/>==<sp/>1:<sp/><sp/>big<sp/>endian</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"></highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/><sp/><sp/>If<sp/>byteorder<sp/>is<sp/>0,<sp/>the<sp/>output<sp/>string<sp/>will<sp/>always<sp/>start<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>BOM<sp/>mark<sp/>(U+FEFF).<sp/>In<sp/>the<sp/>other<sp/>two<sp/>modes,<sp/>no<sp/>BOM<sp/>mark<sp/>is</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/><sp/><sp/>prepended.</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"></highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>Py_UNICODE<sp/>data<sp/>is<sp/>being<sp/>interpreted<sp/>as<sp/>UTF-16<sp/>reduced<sp/>to</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/><sp/>UCS-2.<sp/>This<sp/>trick<sp/>makes<sp/>it<sp/>possible<sp/>to<sp/>add<sp/>full<sp/>UTF-16<sp/>capabilities</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"><sp/><sp/><sp/>at<sp/>a<sp/>later<sp/>point<sp/>without<sp/>compromising<sp/>the<sp/>APIs.</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"></highlight></codeline>
<codeline lineno="1483"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeUTF16(</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>byteorder<sp/>to<sp/>use<sp/>0=BOM+native;-1=LE,1=BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_EncodeUTF16(</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/>unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byteorder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>byteorder<sp/>to<sp/>use<sp/>0=BOM+native;-1=LE,1=BE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Unicode-Escape<sp/>Codecs<sp/>----------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeUnicodeEscape(</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode-Escape<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>for<sp/>PyUnicode_DecodeUnicodeEscape<sp/>that<sp/>detects<sp/>invalid<sp/>escape</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/><sp/>chars.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_DecodeUnicodeEscape(</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode-Escape<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**first_invalid_escape<sp/><sp/></highlight><highlight class="comment">/*<sp/>on<sp/>return,<sp/>points<sp/>to<sp/>first</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>escaped<sp/>char<sp/>in</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsUnicodeEscapeString(</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeUnicodeEscape(</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Raw-Unicode-Escape<sp/>Codecs<sp/>------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeRawUnicodeEscape(</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Raw-Unicode-Escape<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsRawUnicodeEscapeString(</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeRawUnicodeEscape(</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Unicode<sp/>Internal<sp/>Codec<sp/>---------------------------------------------</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"></highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/><sp/><sp/><sp/>Only<sp/>for<sp/>internal<sp/>use<sp/>in<sp/>_codecsmodule.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*_PyUnicode_DecodeUnicodeInternal(</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Latin-1<sp/>Codecs<sp/>-----------------------------------------------------</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"></highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/><sp/>Note:<sp/>Latin-1<sp/>corresponds<sp/>to<sp/>the<sp/>first<sp/>256<sp/>Unicode<sp/>ordinals.</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"></highlight></codeline>
<codeline lineno="1566"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeLatin1(</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Latin-1<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsLatin1String(</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_AsLatin1String(</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/>unicode,</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>errors);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeLatin1(</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>ASCII<sp/>Codecs<sp/>-------------------------------------------------------</highlight></codeline>
<codeline lineno="1591"><highlight class="comment"></highlight></codeline>
<codeline lineno="1592"><highlight class="comment"><sp/><sp/><sp/>Only<sp/>7-bit<sp/>ASCII<sp/>data<sp/>is<sp/>excepted.<sp/>All<sp/>other<sp/>codes<sp/>generate<sp/>errors.</highlight></codeline>
<codeline lineno="1593"><highlight class="comment"></highlight></codeline>
<codeline lineno="1594"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeASCII(</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsASCIIString(</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_AsASCIIString(</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/>unicode,</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>errors);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeASCII(</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Character<sp/>Map<sp/>Codecs<sp/>-----------------------------------------------</highlight></codeline>
<codeline lineno="1619"><highlight class="comment"></highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/><sp/><sp/>This<sp/>codec<sp/>uses<sp/>mappings<sp/>to<sp/>encode<sp/>and<sp/>decode<sp/>characters.</highlight></codeline>
<codeline lineno="1621"><highlight class="comment"></highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/><sp/><sp/>Decoding<sp/>mappings<sp/>must<sp/>map<sp/>byte<sp/>ordinals<sp/>(integers<sp/>in<sp/>the<sp/>range<sp/>from<sp/>0<sp/>to</highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/><sp/><sp/>255)<sp/>to<sp/>Unicode<sp/>strings,<sp/>integers<sp/>(which<sp/>are<sp/>then<sp/>interpreted<sp/>as<sp/>Unicode</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/><sp/>ordinals)<sp/>or<sp/>None.<sp/><sp/>Unmapped<sp/>data<sp/>bytes<sp/>(ones<sp/>which<sp/>cause<sp/>a<sp/>LookupError)</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/><sp/><sp/>as<sp/>well<sp/>as<sp/>mapped<sp/>to<sp/>None,<sp/>0xFFFE<sp/>or<sp/>&apos;\ufffe&apos;<sp/>are<sp/>treated<sp/>as<sp/>&quot;undefined</highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/><sp/><sp/>mapping&quot;<sp/>and<sp/>cause<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="1627"><highlight class="comment"></highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/><sp/><sp/>Encoding<sp/>mappings<sp/>must<sp/>map<sp/>Unicode<sp/>ordinal<sp/>integers<sp/>to<sp/>bytes<sp/>objects,</highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/><sp/>integers<sp/>in<sp/>the<sp/>range<sp/>from<sp/>0<sp/>to<sp/>255<sp/>or<sp/>None.<sp/><sp/>Unmapped<sp/>character</highlight></codeline>
<codeline lineno="1630"><highlight class="comment"><sp/><sp/><sp/>ordinals<sp/>(ones<sp/>which<sp/>cause<sp/>a<sp/>LookupError)<sp/>as<sp/>well<sp/>as<sp/>mapped<sp/>to</highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/><sp/>None<sp/>are<sp/>treated<sp/>as<sp/>&quot;undefined<sp/>mapping&quot;<sp/>and<sp/>cause<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="1632"><highlight class="comment"></highlight></codeline>
<codeline lineno="1633"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeCharmap(</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*mapping,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decoding<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsCharmapString(</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*mapping<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeCharmap(</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*mapping,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_EncodeCharmap(</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*mapping,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoding<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Translate<sp/>a<sp/>Py_UNICODE<sp/>buffer<sp/>of<sp/>the<sp/>given<sp/>length<sp/>by<sp/>applying<sp/>a</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/>character<sp/>mapping<sp/>table<sp/>to<sp/>it<sp/>and<sp/>return<sp/>the<sp/>resulting<sp/>Unicode</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/>object.</highlight></codeline>
<codeline lineno="1664"><highlight class="comment"></highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/><sp/><sp/>The<sp/>mapping<sp/>table<sp/>must<sp/>map<sp/>Unicode<sp/>ordinal<sp/>integers<sp/>to<sp/>Unicode<sp/>strings,</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>ordinal<sp/>integers<sp/>or<sp/>None<sp/>(causing<sp/>deletion<sp/>of<sp/>the<sp/>character).</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"></highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/><sp/>Mapping<sp/>tables<sp/>may<sp/>be<sp/>dictionaries<sp/>or<sp/>sequences.<sp/>Unmapped<sp/>character</highlight></codeline>
<codeline lineno="1669"><highlight class="comment"><sp/><sp/><sp/>ordinals<sp/>(ones<sp/>which<sp/>cause<sp/>a<sp/>LookupError)<sp/>are<sp/>left<sp/>untouched<sp/>and</highlight></codeline>
<codeline lineno="1670"><highlight class="comment"><sp/><sp/><sp/>are<sp/>copied<sp/>as-is.</highlight></codeline>
<codeline lineno="1671"><highlight class="comment"></highlight></codeline>
<codeline lineno="1672"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_TranslateCharmap(</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*table,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Translate<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>MBCS<sp/>codecs<sp/>for<sp/>Windows<sp/>--------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeMBCS(</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MBCS<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeMBCSStateful(</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MBCS<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeCodePageStateful(</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_page,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>page<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*consumed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bytes<sp/>consumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_AsMBCSString(</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeMBCS(</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*data,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>char<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeCodePage(</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_page,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>code<sp/>page<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MS_WINDOWS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Decimal<sp/>Encoder<sp/>----------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Takes<sp/>a<sp/>Unicode<sp/>string<sp/>holding<sp/>a<sp/>decimal<sp/>value<sp/>and<sp/>writes<sp/>it<sp/>into</highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/><sp/>an<sp/>output<sp/>buffer<sp/>using<sp/>standard<sp/>ASCII<sp/>digit<sp/>codes.</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/><sp/>The<sp/>output<sp/>buffer<sp/>has<sp/>to<sp/>provide<sp/>at<sp/>least<sp/>length+1<sp/>bytes<sp/>of<sp/>storage</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/><sp/><sp/>area.<sp/>The<sp/>output<sp/>string<sp/>is<sp/>0-terminated.</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"></highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/>The<sp/>encoder<sp/>converts<sp/>whitespace<sp/>to<sp/>&apos;<sp/>&apos;,<sp/>decimal<sp/>characters<sp/>to<sp/>their</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/>corresponding<sp/>ASCII<sp/>digit<sp/>and<sp/>all<sp/>other<sp/>Latin-1<sp/>characters<sp/>except</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/><sp/>\0<sp/>as-is.<sp/>Characters<sp/>outside<sp/>this<sp/>range<sp/>(Unicode<sp/>ordinals<sp/>1-256)</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"><sp/><sp/><sp/>are<sp/>treated<sp/>as<sp/>errors.<sp/>This<sp/>includes<sp/>embedded<sp/>NULL<sp/>bytes.</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"></highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/><sp/><sp/>Error<sp/>handling<sp/>is<sp/>defined<sp/>by<sp/>the<sp/>errors<sp/>argument:</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"></highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>or<sp/>&quot;strict&quot;:<sp/>raise<sp/>a<sp/>ValueError</highlight></codeline>
<codeline lineno="1748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ignore&quot;:<sp/>ignore<sp/>the<sp/>wrong<sp/>characters<sp/>(these<sp/>are<sp/>not<sp/>copied<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>buffer)</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;replace&quot;:<sp/>replaces<sp/>illegal<sp/>characters<sp/>with<sp/>&apos;?&apos;</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"></highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"></highlight></codeline>
<codeline lineno="1754"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_EncodeDecimal(</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>buffer;<sp/>must<sp/>have<sp/>size<sp/>&gt;=<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Transforms<sp/>code<sp/>points<sp/>that<sp/>have<sp/>decimal<sp/>digit<sp/>property<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1766"><highlight class="comment"><sp/><sp/><sp/>corresponding<sp/>ASCII<sp/>digit<sp/>code<sp/>points.</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"></highlight></codeline>
<codeline lineno="1768"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>a<sp/>new<sp/>Unicode<sp/>string<sp/>on<sp/>success,<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="1769"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_TransformDecimalToASCII(</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>Py_UNICODE<sp/>chars<sp/>to<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_TransformDecimalToASCII(),<sp/>but<sp/>takes<sp/>a<sp/>PyObject</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/><sp/><sp/>as<sp/>argument<sp/>instead<sp/>of<sp/>a<sp/>raw<sp/>buffer<sp/>and<sp/>length.<sp/><sp/>This<sp/>function<sp/>additionally</highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/><sp/>transforms<sp/>spaces<sp/>to<sp/>ASCII<sp/>because<sp/>this<sp/>is<sp/>what<sp/>the<sp/>callers<sp/>in<sp/>longobject,</highlight></codeline>
<codeline lineno="1781"><highlight class="comment"><sp/><sp/><sp/>floatobject,<sp/>and<sp/>complexobject<sp/>did<sp/>anyways.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_TransformDecimalAndSpaceToASCII(</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Locale<sp/>encoding<sp/>---------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>string<sp/>from<sp/>the<sp/>current<sp/>locale<sp/>encoding.<sp/>The<sp/>decoder<sp/>is<sp/>strict<sp/>if</highlight></codeline>
<codeline lineno="1793"><highlight class="comment"><sp/><sp/><sp/>*surrogateescape*<sp/>is<sp/>equal<sp/>to<sp/>zero,<sp/>otherwise<sp/>it<sp/>uses<sp/>the<sp/>&apos;surrogateescape&apos;</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/><sp/>error<sp/>handler<sp/>(PEP<sp/>383)<sp/>to<sp/>escape<sp/>undecodable<sp/>bytes.<sp/>If<sp/>a<sp/>byte<sp/>sequence<sp/>can</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/><sp/>be<sp/>decoded<sp/>as<sp/>a<sp/>surrogate<sp/>character<sp/>and<sp/>*surrogateescape*<sp/>is<sp/>not<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/><sp/>zero,<sp/>the<sp/>byte<sp/>sequence<sp/>is<sp/>escaped<sp/>using<sp/>the<sp/>&apos;surrogateescape&apos;<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/><sp/>instead<sp/>of<sp/>being<sp/>decoded.<sp/>*str*<sp/>must<sp/>end<sp/>with<sp/>a<sp/>null<sp/>character<sp/>but<sp/>cannot</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/><sp/>contain<sp/>embedded<sp/>null<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeLocaleAndSize(</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len,</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>PyUnicode_DecodeLocaleAndSize(),<sp/>but<sp/>compute<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/>length<sp/>using<sp/>strlen().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeLocale(</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encode<sp/>a<sp/>Unicode<sp/>object<sp/>to<sp/>the<sp/>current<sp/>locale<sp/>encoding.<sp/>The<sp/>encoder<sp/>is</highlight></codeline>
<codeline lineno="1813"><highlight class="comment"><sp/><sp/><sp/>strict<sp/>is<sp/>*surrogateescape*<sp/>is<sp/>equal<sp/>to<sp/>zero,<sp/>otherwise<sp/>the</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/><sp/><sp/>&quot;surrogateescape&quot;<sp/>error<sp/>handler<sp/>is<sp/>used.<sp/>Return<sp/>a<sp/>bytes<sp/>object.<sp/>The<sp/>string</highlight></codeline>
<codeline lineno="1815"><highlight class="comment"><sp/><sp/><sp/>cannot<sp/>contain<sp/>embedded<sp/>null<sp/>characters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeLocale(</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>File<sp/>system<sp/>encoding<sp/>----------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ParseTuple<sp/>converter:<sp/>encode<sp/>str<sp/>objects<sp/>to<sp/>bytes<sp/>using</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_EncodeFSDefault();<sp/>bytes<sp/>objects<sp/>are<sp/>output<sp/>as-is.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_FSConverter(<ref refid="struct__object" kindref="compound">PyObject</ref>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ParseTuple<sp/>converter:<sp/>decode<sp/>bytes<sp/>objects<sp/>to<sp/>unicode<sp/>using</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_DecodeFSDefaultAndSize();<sp/>str<sp/>objects<sp/>are<sp/>output<sp/>as-is.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_FSDecoder(<ref refid="struct__object" kindref="compound">PyObject</ref>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>null-terminated<sp/>string<sp/>using<sp/>Py_FileSystemDefaultEncoding</highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/><sp/><sp/>and<sp/>the<sp/>&quot;surrogateescape&quot;<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"></highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/><sp/>If<sp/>Py_FileSystemDefaultEncoding<sp/>is<sp/>not<sp/>set,<sp/>fall<sp/>back<sp/>to<sp/>the<sp/>locale</highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/><sp/><sp/>encoding.</highlight></codeline>
<codeline lineno="1840"><highlight class="comment"></highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/><sp/><sp/>Use<sp/>PyUnicode_DecodeFSDefaultAndSize()<sp/>if<sp/>the<sp/>string<sp/>length<sp/>is<sp/>known.</highlight></codeline>
<codeline lineno="1842"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeFSDefault(</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Decode<sp/>a<sp/>string<sp/>using<sp/>Py_FileSystemDefaultEncoding</highlight></codeline>
<codeline lineno="1849"><highlight class="comment"><sp/><sp/><sp/>and<sp/>the<sp/>&quot;surrogateescape&quot;<sp/>error<sp/>handler.</highlight></codeline>
<codeline lineno="1850"><highlight class="comment"></highlight></codeline>
<codeline lineno="1851"><highlight class="comment"><sp/><sp/><sp/>If<sp/>Py_FileSystemDefaultEncoding<sp/>is<sp/>not<sp/>set,<sp/>fall<sp/>back<sp/>to<sp/>the<sp/>locale</highlight></codeline>
<codeline lineno="1852"><highlight class="comment"><sp/><sp/><sp/>encoding.</highlight></codeline>
<codeline lineno="1853"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_DecodeFSDefaultAndSize(</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Encode<sp/>a<sp/>Unicode<sp/>object<sp/>to<sp/>Py_FileSystemDefaultEncoding<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1861"><highlight class="comment"><sp/><sp/><sp/>&quot;surrogateescape&quot;<sp/>error<sp/>handler,<sp/>and<sp/>return<sp/>bytes.</highlight></codeline>
<codeline lineno="1862"><highlight class="comment"></highlight></codeline>
<codeline lineno="1863"><highlight class="comment"><sp/><sp/><sp/>If<sp/>Py_FileSystemDefaultEncoding<sp/>is<sp/>not<sp/>set,<sp/>fall<sp/>back<sp/>to<sp/>the<sp/>locale</highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/><sp/><sp/>encoding.</highlight></codeline>
<codeline lineno="1865"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_EncodeFSDefault(</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Methods<sp/>&amp;<sp/>Slots<sp/>----------------------------------------------------</highlight></codeline>
<codeline lineno="1872"><highlight class="comment"></highlight></codeline>
<codeline lineno="1873"><highlight class="comment"><sp/><sp/><sp/>These<sp/>are<sp/>capable<sp/>of<sp/>handling<sp/>Unicode<sp/>objects<sp/>and<sp/>strings<sp/>on<sp/>input</highlight></codeline>
<codeline lineno="1874"><highlight class="comment"><sp/><sp/><sp/>(we<sp/>refer<sp/>to<sp/>them<sp/>as<sp/>strings<sp/>in<sp/>the<sp/>descriptions)<sp/>and<sp/>return</highlight></codeline>
<codeline lineno="1875"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>objects<sp/>or<sp/>integers<sp/>as<sp/>appropriate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Concat<sp/>two<sp/>strings<sp/>giving<sp/>a<sp/>new<sp/>Unicode<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Concat(</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Concat<sp/>two<sp/>strings<sp/>and<sp/>put<sp/>the<sp/>result<sp/>in<sp/>*pleft</highlight></codeline>
<codeline lineno="1885"><highlight class="comment"><sp/><sp/><sp/>(sets<sp/>*pleft<sp/>to<sp/>NULL<sp/>on<sp/>error)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyUnicode_Append(</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**pleft,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Concat<sp/>two<sp/>strings,<sp/>put<sp/>the<sp/>result<sp/>in<sp/>*pleft<sp/>and<sp/>drop<sp/>the<sp/>right<sp/>object</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/><sp/>(sets<sp/>*pleft<sp/>to<sp/>NULL<sp/>on<sp/>error)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyUnicode_AppendAndDel(</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**pleft,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Split<sp/>a<sp/>string<sp/>giving<sp/>a<sp/>list<sp/>of<sp/>Unicode<sp/>strings.</highlight></codeline>
<codeline lineno="1901"><highlight class="comment"></highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/><sp/><sp/>If<sp/>sep<sp/>is<sp/>NULL,<sp/>splitting<sp/>will<sp/>be<sp/>done<sp/>at<sp/>all<sp/>whitespace</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/><sp/><sp/>substrings.<sp/>Otherwise,<sp/>splits<sp/>occur<sp/>at<sp/>the<sp/>given<sp/>separator.</highlight></codeline>
<codeline lineno="1904"><highlight class="comment"></highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/><sp/><sp/>At<sp/>most<sp/>maxsplit<sp/>splits<sp/>will<sp/>be<sp/>done.<sp/>If<sp/>negative,<sp/>no<sp/>limit<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="1906"><highlight class="comment"></highlight></codeline>
<codeline lineno="1907"><highlight class="comment"><sp/><sp/><sp/>Separators<sp/>are<sp/>not<sp/>included<sp/>in<sp/>the<sp/>resulting<sp/>list.</highlight></codeline>
<codeline lineno="1908"><highlight class="comment"></highlight></codeline>
<codeline lineno="1909"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Split(</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>to<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>separator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>maxsplit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Maxsplit<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Dito,<sp/>but<sp/>split<sp/>at<sp/>line<sp/>breaks.</highlight></codeline>
<codeline lineno="1918"><highlight class="comment"></highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/><sp/><sp/>CRLF<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>one<sp/>line<sp/>break.<sp/>Line<sp/>breaks<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/><sp/>included<sp/>in<sp/>the<sp/>resulting<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Splitlines(</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>to<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keepends<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>true,<sp/>line<sp/>end<sp/>markers<sp/>are<sp/>included<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Partition<sp/>a<sp/>string<sp/>using<sp/>a<sp/>given<sp/>separator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Partition(</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>to<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*sep<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>separator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Partition<sp/>a<sp/>string<sp/>using<sp/>a<sp/>given<sp/>separator,<sp/>searching<sp/>from<sp/>the<sp/>end<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/><sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_RPartition(</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>to<sp/>partition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*sep<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>separator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Split<sp/>a<sp/>string<sp/>giving<sp/>a<sp/>list<sp/>of<sp/>Unicode<sp/>strings.</highlight></codeline>
<codeline lineno="1943"><highlight class="comment"></highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/><sp/>If<sp/>sep<sp/>is<sp/>NULL,<sp/>splitting<sp/>will<sp/>be<sp/>done<sp/>at<sp/>all<sp/>whitespace</highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/><sp/><sp/>substrings.<sp/>Otherwise,<sp/>splits<sp/>occur<sp/>at<sp/>the<sp/>given<sp/>separator.</highlight></codeline>
<codeline lineno="1946"><highlight class="comment"></highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/><sp/>At<sp/>most<sp/>maxsplit<sp/>splits<sp/>will<sp/>be<sp/>done.<sp/>But<sp/>unlike<sp/>PyUnicode_Split</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/><sp/>PyUnicode_RSplit<sp/>splits<sp/>from<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string.<sp/>If<sp/>negative,</highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/><sp/>no<sp/>limit<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="1950"><highlight class="comment"></highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/><sp/>Separators<sp/>are<sp/>not<sp/>included<sp/>in<sp/>the<sp/>resulting<sp/>list.</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"></highlight></codeline>
<codeline lineno="1953"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_RSplit(</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>to<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>separator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>maxsplit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Maxsplit<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Translate<sp/>a<sp/>string<sp/>by<sp/>applying<sp/>a<sp/>character<sp/>mapping<sp/>table<sp/>to<sp/>it<sp/>and</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/><sp/>return<sp/>the<sp/>resulting<sp/>Unicode<sp/>object.</highlight></codeline>
<codeline lineno="1963"><highlight class="comment"></highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/><sp/><sp/>The<sp/>mapping<sp/>table<sp/>must<sp/>map<sp/>Unicode<sp/>ordinal<sp/>integers<sp/>to<sp/>Unicode<sp/>strings,</highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/><sp/><sp/>Unicode<sp/>ordinal<sp/>integers<sp/>or<sp/>None<sp/>(causing<sp/>deletion<sp/>of<sp/>the<sp/>character).</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"></highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/><sp/>Mapping<sp/>tables<sp/>may<sp/>be<sp/>dictionaries<sp/>or<sp/>sequences.<sp/>Unmapped<sp/>character</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/><sp/><sp/>ordinals<sp/>(ones<sp/>which<sp/>cause<sp/>a<sp/>LookupError)<sp/>are<sp/>left<sp/>untouched<sp/>and</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/><sp/>are<sp/>copied<sp/>as-is.</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"></highlight></codeline>
<codeline lineno="1971"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_Translate(</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*table,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Translate<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*errors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>handling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Join<sp/>a<sp/>sequence<sp/>of<sp/>strings<sp/>using<sp/>the<sp/>given<sp/>separator<sp/>and<sp/>return</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/><sp/>the<sp/>resulting<sp/>Unicode<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyUnicode_Join(</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*separator,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Separator<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*seq<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sequence<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyUnicode_JoinArray(</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*separator,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**items,</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>seqlen</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>1<sp/>if<sp/>substr<sp/>matches<sp/>str[start:end]<sp/>at<sp/>the<sp/>given<sp/>tail<sp/>end,<sp/>0</highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/><sp/>otherwise.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_Tailmatch(</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*substr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prefix<sp/>or<sp/>Suffix<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tail<sp/>end:<sp/>-1<sp/>prefix,<sp/>+1<sp/>suffix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>first<sp/>position<sp/>of<sp/>substr<sp/>in<sp/>str[start:end]<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/>given<sp/>search<sp/>direction<sp/>or<sp/>-1<sp/>if<sp/>not<sp/>found.<sp/>-2<sp/>is<sp/>returned<sp/>in<sp/>case</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/>an<sp/>error<sp/>occurred<sp/>and<sp/>an<sp/>exception<sp/>is<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_Find(</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*substr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Substring<sp/>to<sp/>find<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>direction:<sp/>+1<sp/>forward,<sp/>-1<sp/>backward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>PyUnicode_Find,<sp/>but<sp/>search<sp/>for<sp/>single<sp/>character<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_FindChar(</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch,</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>occurrences<sp/>of<sp/>substr<sp/>in<sp/>str[start:end].<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyUnicode_Count(</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*substr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Substring<sp/>to<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>start,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>end<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Replace<sp/>at<sp/>most<sp/>maxcount<sp/>occurrences<sp/>of<sp/>substr<sp/>in<sp/>str<sp/>with<sp/>replstr</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/><sp/><sp/>and<sp/>return<sp/>the<sp/>resulting<sp/>Unicode<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_Replace(</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*substr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Substring<sp/>to<sp/>find<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*replstr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Substring<sp/>to<sp/>replace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>maxcount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Max.<sp/>number<sp/>of<sp/>replacements<sp/>to<sp/>apply;</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/>=<sp/>all<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compare<sp/>two<sp/>strings<sp/>and<sp/>return<sp/>-1,<sp/>0,<sp/>1<sp/>for<sp/>less<sp/>than,<sp/>equal,</highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/><sp/>greater<sp/>than<sp/>resp.</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/><sp/><sp/>Raise<sp/>an<sp/>exception<sp/>and<sp/>return<sp/>-1<sp/>on<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_Compare(</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>whether<sp/>a<sp/>unicode<sp/>is<sp/>equal<sp/>to<sp/>ASCII<sp/>identifier.<sp/><sp/>Return<sp/>1<sp/>if<sp/>true,</highlight></codeline>
<codeline lineno="2060"><highlight class="comment"><sp/><sp/><sp/>0<sp/>otherwise.<sp/><sp/>The<sp/>right<sp/>argument<sp/>must<sp/>be<sp/>ASCII<sp/>identifier.</highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/><sp/>Any<sp/>error<sp/>occurs<sp/>inside<sp/>will<sp/>be<sp/>cleared<sp/>before<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_EqualToASCIIId(</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>identifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compare<sp/>a<sp/>Unicode<sp/>object<sp/>with<sp/>C<sp/>string<sp/>and<sp/>return<sp/>-1,<sp/>0,<sp/>1<sp/>for<sp/>less<sp/>than,</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/><sp/><sp/>equal,<sp/>and<sp/>greater<sp/>than,<sp/>respectively.<sp/><sp/>It<sp/>is<sp/>best<sp/>to<sp/>pass<sp/>only</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/><sp/><sp/>ASCII-encoded<sp/>strings,<sp/>but<sp/>the<sp/>function<sp/>interprets<sp/>the<sp/>input<sp/>string<sp/>as</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/><sp/>ISO-8859-1<sp/>if<sp/>it<sp/>contains<sp/>non-ASCII<sp/>characters.</highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/><sp/><sp/>This<sp/>function<sp/>does<sp/>not<sp/>raise<sp/>exceptions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_CompareWithASCIIString(</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>whether<sp/>a<sp/>unicode<sp/>is<sp/>equal<sp/>to<sp/>ASCII<sp/>string.<sp/><sp/>Return<sp/>1<sp/>if<sp/>true,</highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/><sp/>0<sp/>otherwise.<sp/><sp/>The<sp/>right<sp/>argument<sp/>must<sp/>be<sp/>ASCII-encoded<sp/>string.</highlight></codeline>
<codeline lineno="2083"><highlight class="comment"><sp/><sp/><sp/>Any<sp/>error<sp/>occurs<sp/>inside<sp/>will<sp/>be<sp/>cleared<sp/>before<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_EqualToASCIIString(</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ASCII-encoded<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Rich<sp/>compare<sp/>two<sp/>strings<sp/>and<sp/>return<sp/>one<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"></highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/><sp/><sp/>-<sp/>NULL<sp/>in<sp/>case<sp/>an<sp/>exception<sp/>was<sp/>raised</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Py_True<sp/>or<sp/>Py_False<sp/>for<sp/>successful<sp/>comparisons</highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Py_NotImplemented<sp/>in<sp/>case<sp/>the<sp/>type<sp/>combination<sp/>is<sp/>unknown</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"></highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/>Possible<sp/>values<sp/>for<sp/>op:</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"></highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Py_GT,<sp/>Py_GE,<sp/>Py_EQ,<sp/>Py_NE,<sp/>Py_LT,<sp/>Py_LE</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"></highlight></codeline>
<codeline lineno="2101"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_RichCompare(</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*left,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*right,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operation:<sp/>Py_EQ,<sp/>Py_NE,<sp/>Py_GT,<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Apply<sp/>an<sp/>argument<sp/>tuple<sp/>or<sp/>dictionary<sp/>to<sp/>a<sp/>format<sp/>string<sp/>and<sp/>return</highlight></codeline>
<codeline lineno="2110"><highlight class="comment"><sp/><sp/><sp/>the<sp/>resulting<sp/>Unicode<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyUnicode_Format(</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*format,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Format<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Argument<sp/>tuple<sp/>or<sp/>dictionary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Checks<sp/>whether<sp/>element<sp/>is<sp/>contained<sp/>in<sp/>container<sp/>and<sp/>return<sp/>1/0</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/><sp/>accordingly.</highlight></codeline>
<codeline lineno="2119"><highlight class="comment"></highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/><sp/>element<sp/>has<sp/>to<sp/>coerce<sp/>to<sp/>a<sp/>one<sp/>element<sp/>Unicode<sp/>string.<sp/>-1<sp/>is</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/><sp/>returned<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_Contains(</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*container,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Container<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*element<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Element<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Checks<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>valid<sp/>identifier.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyUnicode_IsIdentifier(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Externally<sp/>visible<sp/>for<sp/>str.strip(unicode)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_PyUnicode_XStrip(</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>striptype,</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*sepobj</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Using<sp/>explicit<sp/>passed-in<sp/>values,<sp/>insert<sp/>the<sp/>thousands<sp/>grouping</highlight></codeline>
<codeline lineno="2142"><highlight class="comment"><sp/><sp/><sp/>into<sp/>the<sp/>string<sp/>pointed<sp/>to<sp/>by<sp/>buffer.<sp/><sp/>For<sp/>the<sp/>argument<sp/>descriptions,</highlight></codeline>
<codeline lineno="2143"><highlight class="comment"><sp/><sp/><sp/>see<sp/>Objects/stringlib/localeutil.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>_PyUnicode_InsertThousandsGrouping(</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode,</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>index,</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>n_buffer,</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*digits,</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>n_digits,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>min_width,</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*grouping,</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*thousands_sep,</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*maxchar);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===<sp/>Characters<sp/>Type<sp/>APIs<sp/>===============================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>array<sp/>used<sp/>by<sp/>Py_UNICODE_ISSPACE().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>_Py_ascii_whitespace[];</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>should<sp/>not<sp/>be<sp/>used<sp/>directly.<sp/>Use<sp/>the<sp/>Py_UNICODE_IS*<sp/>and</highlight></codeline>
<codeline lineno="2164"><highlight class="comment"><sp/><sp/><sp/>Py_UNICODE_TO*<sp/>macros<sp/>instead.</highlight></codeline>
<codeline lineno="2165"><highlight class="comment"></highlight></codeline>
<codeline lineno="2166"><highlight class="comment"><sp/><sp/><sp/>These<sp/>APIs<sp/>are<sp/>implemented<sp/>in<sp/>Objects/unicodectype.c.</highlight></codeline>
<codeline lineno="2167"><highlight class="comment"></highlight></codeline>
<codeline lineno="2168"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsLowercase(</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsUppercase(</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsTitlecase(</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsXidStart(</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsXidContinue(</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsWhitespace(</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsLinebreak(</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal">PyAPI_FUNC(Py_UCS4)<sp/>_PyUnicode_ToLowercase(</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal">PyAPI_FUNC(Py_UCS4)<sp/>_PyUnicode_ToUppercase(</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal">PyAPI_FUNC(Py_UCS4)<sp/>_PyUnicode_ToTitlecase(</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToLowerFull(</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*res</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToTitleFull(</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*res</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToUpperFull(</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*res</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToFoldedFull(</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>*res</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsCaseIgnorable(</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsCased(</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToDecimalDigit(</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_ToDigit(</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>_PyUnicode_ToNumeric(</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsDecimalDigit(</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsDigit(</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsNumeric(</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsPrintable(</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_IsAlpha(</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UCS4<sp/>ch<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unicode<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>Py_UNICODE_strlen(</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*u</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>Py_UNICODE_strcpy(</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>*s1,</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s2);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>Py_UNICODE_strcat(</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s2);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>Py_UNICODE_strncpy(</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>*s1,</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s2,</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_UNICODE_strcmp(</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s1,</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s2</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_UNICODE_strncmp(</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s1,</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s2,</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>Py_UNICODE_strchr(</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s,</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>c</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>Py_UNICODE_strrchr(</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*s,</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_UNICODE<sp/>c</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_FormatLong(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>unicode<sp/>string<sp/>ending<sp/>with<sp/>a<sp/>nul<sp/>character.<sp/>Return<sp/>NULL</highlight></codeline>
<codeline lineno="2310"><highlight class="comment"><sp/><sp/><sp/>and<sp/>raise<sp/>a<sp/>MemoryError<sp/>exception<sp/>on<sp/>memory<sp/>allocation<sp/>failure,<sp/>otherwise</highlight></codeline>
<codeline lineno="2311"><highlight class="comment"><sp/><sp/><sp/>return<sp/>a<sp/>new<sp/>allocated<sp/>buffer<sp/>(use<sp/>PyMem_Free()<sp/>to<sp/>free<sp/>the<sp/>buffer).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal">PyAPI_FUNC(Py_UNICODE*)<sp/>PyUnicode_AsUnicodeCopy(</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*unicode</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(Py_DEBUG)<sp/>&amp;&amp;<sp/>!defined(Py_LIMITED_API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_CheckConsistency(</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*op,</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_content);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>asserts<sp/>that<sp/>call<sp/>_PyUnicode_CheckConsistency(),<sp/>which<sp/>would</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>be<sp/>a<sp/>problem<sp/>when<sp/>building<sp/>with<sp/>asserts<sp/>but<sp/>without<sp/>Py_DEBUG.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyUnicode_CheckConsistency(op,<sp/>check_content)<sp/>PyUnicode_Check(op)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>an<sp/>interned<sp/>Unicode<sp/>object<sp/>for<sp/>an<sp/>Identifier;<sp/>may<sp/>fail<sp/>if<sp/>there<sp/>is<sp/>no<sp/>memory.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyUnicode_FromId(<ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref>*);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clear<sp/>all<sp/>static<sp/>strings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyUnicode_ClearStaticStrings(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fast<sp/>equality<sp/>check<sp/>when<sp/>the<sp/>inputs<sp/>are<sp/>known<sp/>to<sp/>be<sp/>exact<sp/>unicode<sp/>types</highlight></codeline>
<codeline lineno="2335"><highlight class="comment"><sp/><sp/><sp/>and<sp/>where<sp/>the<sp/>hash<sp/>values<sp/>are<sp/>equal<sp/>(i.e.<sp/>a<sp/>very<sp/>probable<sp/>match)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyUnicode_EQ(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_UNICODEOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/unicodeobject.h"/>
  </compounddef>
</doxygen>
