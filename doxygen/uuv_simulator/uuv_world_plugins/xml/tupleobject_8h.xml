<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tupleobject_8h" kind="file" language="C++">
    <compoundname>tupleobject.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="3776">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3773">
        <label>/usr/include/python3.6m/tupleobject.h</label>
        <link refid="tupleobject_8h"/>
        <childnode refid="3774" relation="include">
        </childnode>
      </node>
      <node id="3777">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3779">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3774">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3775" relation="include">
        </childnode>
        <childnode refid="3777" relation="include">
        </childnode>
        <childnode refid="3778" relation="include">
        </childnode>
        <childnode refid="3779" relation="include">
        </childnode>
        <childnode refid="3780" relation="include">
        </childnode>
      </node>
      <node id="3780">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3775">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3776" relation="include">
        </childnode>
      </node>
      <node id="3778">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_tuple_object" prot="public">PyTupleObject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="tupleobject_8h_1a1d3ce3e630d562bb965714a0d87e120b" prot="public" static="no">
        <name>PyTuple_Check</name>
        <param><defname>op</defname></param>
        <initializer>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TUPLE_SUBCLASS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="39" column="9" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tupleobject_8h_1aeef1066d08ddca46b7cb9d5ecbbf7d38" prot="public" static="no">
        <name>PyTuple_CheckExact</name>
        <param><defname>op</defname></param>
        <initializer>(Py_TYPE(op) == &amp;PyTuple_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="41" column="9" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tupleobject_8h_1a60fafb5a8571f1bf02523a0aa5742cfc" prot="public" static="no">
        <name>PyTuple_GET_ITEM</name>
        <param><defname>op</defname></param>
        <param><defname>i</defname></param>
        <initializer>(((<ref refid="struct_py_tuple_object" kindref="compound">PyTupleObject</ref> *)(op))-&gt;ob_item[i])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="58" column="9" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tupleobject_8h_1ae09726b3e4fea952ea830c68d5e53cd1" prot="public" static="no">
        <name>PyTuple_GET_SIZE</name>
        <param><defname>op</defname></param>
        <initializer>Py_SIZE(op)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="59" column="9" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tupleobject_8h_1ad1cd05f4a9bc9d996a501aa2fff1989c" prot="public" static="no">
        <name>PyTuple_SET_ITEM</name>
        <param><defname>op</defname></param>
        <param><defname>i</defname></param>
        <param><defname>v</defname></param>
        <initializer>(((<ref refid="struct_py_tuple_object" kindref="compound">PyTupleObject</ref> *)(op))-&gt;ob_item[i] = v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="62" column="9" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="tupleobject_8h_1a3655899f66ca98255b47208712b31518" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="45" column="1" bodyfile="/usr/include/python3.6m/tupleobject.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tupleobject_8h_1a2160047e0ed4be606e9bf2622ae67d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyTuple_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="tupleobject_8h_1af21fe532ccd5b44b7515768a3caec97b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyTuple_New(Py_ssize_t size)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="tupleobject_8h_1a924e86e41f015f093384d4ad38a450a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) PyTuple_Size(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="tupleobject_8h_1a70f8c5eacb280bd427ff827472cd9e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyTuple_SetItem(PyObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="tupleobject_8h_1a27f67bb9ad99bc2f90a9efd82e125744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) _PyTuple_MaybeUntrack(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/tupleobject.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tuple<sp/>object<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_TUPLEOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TUPLEOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment">Another<sp/>generally<sp/>useful<sp/>object<sp/>type<sp/>is<sp/>a<sp/>tuple<sp/>of<sp/>object<sp/>pointers.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">For<sp/>Python,<sp/>this<sp/>is<sp/>an<sp/>immutable<sp/>type.<sp/><sp/>C<sp/>code<sp/>can<sp/>change<sp/>the<sp/>tuple<sp/>items</highlight></codeline>
<codeline lineno="13"><highlight class="comment">(but<sp/>not<sp/>their<sp/>number),<sp/>and<sp/>even<sp/>use<sp/>tuples<sp/>are<sp/>general-purpose<sp/>arrays<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment">object<sp/>references,<sp/>but<sp/>in<sp/>general<sp/>only<sp/>brand<sp/>new<sp/>tuples<sp/>should<sp/>be<sp/>mutated,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">not<sp/>ones<sp/>that<sp/>might<sp/>already<sp/>have<sp/>been<sp/>exposed<sp/>to<sp/>Python<sp/>code.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">***<sp/>WARNING<sp/>***<sp/>PyTuple_SetItem<sp/>does<sp/>not<sp/>increment<sp/>the<sp/>new<sp/>item&apos;s<sp/>reference</highlight></codeline>
<codeline lineno="18"><highlight class="comment">count,<sp/>but<sp/>does<sp/>decrement<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>item<sp/>it<sp/>replaces,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">if<sp/>not<sp/>nil.<sp/><sp/>It<sp/>does<sp/>*decrement*<sp/>the<sp/>reference<sp/>count<sp/>if<sp/>it<sp/>is<sp/>*not*</highlight></codeline>
<codeline lineno="20"><highlight class="comment">inserted<sp/>in<sp/>the<sp/>tuple.<sp/><sp/>Similarly,<sp/>PyTuple_GetItem<sp/>does<sp/>not<sp/>increment<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment">returned<sp/>item&apos;s<sp/>reference<sp/>count.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="struct_py_tuple_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_VAR_HEAD</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*ob_item[1];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ob_item<sp/>contains<sp/>space<sp/>for<sp/>&apos;ob_size&apos;<sp/>elements.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Items<sp/>must<sp/>normally<sp/>not<sp/>be<sp/>NULL,<sp/>except<sp/>during<sp/>construction<sp/>when</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>tuple<sp/>is<sp/>not<sp/>yet<sp/>visible<sp/>outside<sp/>the<sp/>function<sp/>that<sp/>builds<sp/>it.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="struct_py_tuple_object" kindref="compound">PyTupleObject</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyTuple_Type;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyTupleIter_Type;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTuple_Check(op)<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyType_FastSubclass(Py_TYPE(op),<sp/>Py_TPFLAGS_TUPLE_SUBCLASS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTuple_CheckExact(op)<sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;PyTuple_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyTuple_New(Py_ssize_t<sp/>size);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>PyTuple_Size(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyTuple_GetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyTuple_SetItem(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyTuple_GetSlice(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>Py_ssize_t,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTuple_Resize(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyTuple_Pack(Py_ssize_t,<sp/>...);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTuple_MaybeUntrack(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro,<sp/>trading<sp/>safety<sp/>for<sp/>speed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTuple_GET_ITEM(op,<sp/>i)<sp/>(((PyTupleObject<sp/>*)(op))-&gt;ob_item[i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTuple_GET_SIZE(op)<sp/><sp/><sp/><sp/>Py_SIZE(op)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro,<sp/>*only*<sp/>to<sp/>be<sp/>used<sp/>to<sp/>fill<sp/>in<sp/>brand<sp/>new<sp/>tuples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTuple_SET_ITEM(op,<sp/>i,<sp/>v)<sp/>(((PyTupleObject<sp/>*)(op))-&gt;ob_item[i]<sp/>=<sp/>v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyTuple_ClearFreeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTuple_DebugMallocStats(FILE<sp/>*out);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_TUPLEOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/tupleobject.h"/>
  </compounddef>
</doxygen>
