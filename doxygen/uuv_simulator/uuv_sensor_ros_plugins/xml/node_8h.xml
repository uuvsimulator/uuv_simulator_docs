<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="node_8h" kind="file" language="C++">
    <compoundname>node.h</compoundname>
    <innerclass refid="struct__node" prot="public">_node</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="node_8h_1aa48e3121238ad7f5a038d00ce32f3aeb" prot="public" static="no">
        <name>NCH</name>
        <param><defname>n</defname></param>
        <initializer>((n)-&gt;n_nchildren)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="28" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1a16760997ad087b4f2c25ac8eeb3982bb" prot="public" static="no">
        <name>CHILD</name>
        <param><defname>n</defname></param>
        <param><defname>i</defname></param>
        <initializer>(&amp;(n)-&gt;n_child[i])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="30" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1ae36e76c681f41c2d10d730b5d4a0c1c5" prot="public" static="no">
        <name>RCHILD</name>
        <param><defname>n</defname></param>
        <param><defname>i</defname></param>
        <initializer>(CHILD(n, NCH(n) + i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="31" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1a71fef1a9182c7451b07752233174cac2" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>n</defname></param>
        <initializer>((n)-&gt;n_type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="32" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1aa039726a60de283dd121a4a761266ac2" prot="public" static="no">
        <name>STR</name>
        <param><defname>n</defname></param>
        <initializer>((n)-&gt;n_str)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="33" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1a838d3fc6db67740e0e3fbbd96db1478e" prot="public" static="no">
        <name>LINENO</name>
        <param><defname>n</defname></param>
        <initializer>((n)-&gt;n_lineno)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="34" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="node_8h_1af71929eb520068c1cafca386caf66d3d" prot="public" static="no">
        <name>REQ</name>
        <param><defname>n</defname></param>
        <param><defname>type</defname></param>
        <initializer>assert(TYPE(n) == (type))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="37" column="9" bodyfile="/usr/include/python3.6m/node.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="node_8h_1addb697c9bca6f8981a870daa4953af4f" prot="public" static="no">
        <type>struct <ref refid="struct__node" kindref="compound">_node</ref></type>
        <definition>typedef struct _node  node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="17" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="node_8h_1ac765329451135abec74c45e1897abf26" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="20" column="1" bodyfile="/usr/include/python3.6m/node.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="node_8h_1a62b34ca1362fe946082b7aa0cd9be844" prot="public" static="no" mutable="no">
        <type>int char *</type>
        <definition>int char* str</definition>
        <argsstring></argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="21" column="1" bodyfile="/usr/include/python3.6m/node.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="node_8h_1ac0303cf5e831e3ccd0f51fe700458b6f" prot="public" static="no" mutable="no">
        <type>int char int</type>
        <definition>const char int lineno</definition>
        <argsstring></argsstring>
        <name>lineno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="21" column="1" bodyfile="/usr/include/python3.6m/node.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="node_8h_1a9ed71ceb7fb2ff5c9cec940bc6880192" prot="public" static="no" mutable="no">
        <type>int char int int</type>
        <definition>int int col_offset</definition>
        <argsstring></argsstring>
        <name>col_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="21" column="1" bodyfile="/usr/include/python3.6m/node.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="node_8h_1a61d67fd646c376492b296295f438da9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(node *) PyNode_New(int type)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__node" kindref="compound">node</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="node_8h_1a7bcc965d6c9d081a3aad670586b75fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyNode_AddChild(node *n</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="node_8h_1a40ec62bc4496aeec6a9b58e82416853b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyNode_Free(node *n)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="node_8h_1a5043c05d359aa362f67aae3c2793fb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) _PyNode_SizeOf(node *n)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/node.h" line="24" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Parse<sp/>tree<sp/>node<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_NODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_NODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="struct__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__node" kindref="compound">_node</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_type;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n_str;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_lineno;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_col_offset;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_nchildren;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__node" kindref="compound">_node</ref><sp/><sp/><sp/><sp/>*n_child;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}<sp/><ref refid="struct__node" kindref="compound">node</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__node" kindref="compound">node</ref><sp/>*)<sp/>PyNode_New(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyNode_AddChild(<ref refid="struct__node" kindref="compound">node</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col_offset);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyNode_Free(<ref refid="struct__node" kindref="compound">node</ref><sp/>*n);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>_PyNode_SizeOf(<ref refid="struct__node" kindref="compound">node</ref><sp/>*n);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Node<sp/>access<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NCH(n)<sp/><sp/><sp/><sp/><sp/><sp/>((n)-&gt;n_nchildren)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHILD(n,<sp/>i)<sp/>(&amp;(n)-&gt;n_child[i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RCHILD(n,<sp/>i)<sp/><sp/><sp/><sp/>(CHILD(n,<sp/>NCH(n)<sp/>+<sp/>i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE(n)<sp/><sp/><sp/><sp/><sp/>((n)-&gt;n_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STR(n)<sp/><sp/><sp/><sp/><sp/><sp/>((n)-&gt;n_str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINENO(n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((n)-&gt;n_lineno)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assert<sp/>that<sp/>the<sp/>type<sp/>of<sp/>a<sp/>node<sp/>is<sp/>what<sp/>we<sp/>expect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQ(n,<sp/>type)<sp/>assert(TYPE(n)<sp/>==<sp/>(type))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyNode_ListTree(<ref refid="struct__node" kindref="compound">node</ref><sp/>*);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_NODE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/node.h"/>
  </compounddef>
</doxygen>
