<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gazebo__ros__image__sonar_8cpp" kind="file" language="C++">
    <compoundname>gazebo_ros_image_sonar.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">boost/thread/thread.hpp</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes refid="gazebo__ros__image__sonar_8hh" local="no">uuv_sensor_ros_plugins/gazebo_ros_image_sonar.hh</includes>
    <includes local="no">gazebo/sensors/Sensor.hh</includes>
    <includes local="no">sdf/sdf.hh</includes>
    <includes local="no">gazebo/sensors/SensorTypes.hh</includes>
    <includes local="no">sensor_msgs/point_cloud2_iterator.h</includes>
    <includes local="no">tf/tf.h</includes>
    <includes local="no">sensor_msgs/image_encodings.h</includes>
    <includes local="no">cv_bridge/cv_bridge.h</includes>
    <includes local="no">opencv2/core/core.hpp</includes>
    <incdepgraph>
      <node id="477">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="462">
        <label>sensor_msgs/PointCloud2.h</label>
      </node>
      <node id="471">
        <label>gazebo/msgs/MessageTypes.hh</label>
      </node>
      <node id="472">
        <label>gazebo/common/Time.hh</label>
      </node>
      <node id="455">
        <label>assert.h</label>
      </node>
      <node id="464">
        <label>sensor_msgs/CameraInfo.h</label>
      </node>
      <node id="456">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="467">
        <label>image_transport/image_transport.h</label>
      </node>
      <node id="486">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="465">
        <label>sensor_msgs/fill_image.h</label>
      </node>
      <node id="463">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="453">
        <label>/home/musamorena/catkin_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/src/gazebo_ros_image_sonar.cpp</label>
        <link refid="gazebo__ros__image__sonar_8cpp"/>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
      </node>
      <node id="485">
        <label>cv_bridge/cv_bridge.h</label>
      </node>
      <node id="483">
        <label>tf/tf.h</label>
      </node>
      <node id="473">
        <label>gazebo/sensors/SensorTypes.hh</label>
      </node>
      <node id="475">
        <label>gazebo_plugins/GazeboRosCameraConfig.h</label>
      </node>
      <node id="466">
        <label>std_msgs/Float64.h</label>
      </node>
      <node id="476">
        <label>dynamic_reconfigure/server.h</label>
      </node>
      <node id="484">
        <label>sensor_msgs/image_encodings.h</label>
      </node>
      <node id="480">
        <label>gazebo/sensors/Sensor.hh</label>
      </node>
      <node id="481">
        <label>sdf/sdf.hh</label>
      </node>
      <node id="479">
        <label>opencv2/core.hpp</label>
      </node>
      <node id="460">
        <label>ros/callback_queue.h</label>
      </node>
      <node id="468">
        <label>sdf/Param.hh</label>
      </node>
      <node id="470">
        <label>gazebo/transport/TransportTypes.hh</label>
      </node>
      <node id="459">
        <label>ros/ros.h</label>
      </node>
      <node id="474">
        <label>gazebo/plugins/DepthCameraPlugin.hh</label>
      </node>
      <node id="458">
        <label>uuv_sensor_ros_plugins/gazebo_ros_image_sonar.hh</label>
        <link refid="gazebo__ros__image__sonar_8hh_source"/>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="457">
        <label>boost/bind.hpp</label>
      </node>
      <node id="469">
        <label>gazebo/physics/physics.hh</label>
      </node>
      <node id="478">
        <label>gazebo_plugins/gazebo_ros_camera_utils.h</label>
      </node>
      <node id="482">
        <label>sensor_msgs/point_cloud2_iterator.h</label>
      </node>
      <node id="454">
        <label>algorithm</label>
      </node>
      <node id="461">
        <label>ros/advertise_options.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacegazebo">gazebo</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>was<sp/>modified<sp/>from<sp/>the<sp/>original<sp/>version<sp/>within<sp/>Gazebo:</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2014<sp/>Open<sp/>Source<sp/>Robotics<sp/>Foundation</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Modifications:</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018<sp/>Nils<sp/>Bore<sp/>(nbore@kth.se)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;smarc_gazebo_ros_plugins/gazebo_ros_image_sonar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uuv_sensor_ros_plugins/gazebo_ros_image_sonar.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gazebo/sensors/Sensor.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sdf/sdf.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gazebo/sensors/SensorTypes.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/point_cloud2_iterator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf/tf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/image_encodings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cv_bridge/cv_bridge.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/core/core.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegazebo" kindref="compound">gazebo</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Register<sp/>this<sp/>plugin<sp/>with<sp/>the<sp/>simulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">GZ_REGISTER_SENSOR_PLUGIN(GazeboRosImageSonar)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a9fb946272527f8dff40658553986b0e4" kindref="member">GazeboRosImageSonar::GazeboRosImageSonar</ref>()<sp/>:<sp/>SensorPlugin(),<sp/>width(0),<sp/>height(0),<sp/>depth(0)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_connect_count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>this-&gt;depth_info_connect_count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>this-&gt;last_depth_image_camera_info_update_time_<sp/>=<sp/>common::Time(0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a4db6c96c5b7844bbdc65cf50cf233be6" kindref="member">GazeboRosImageSonar::~GazeboRosImageSonar</ref>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>this-&gt;newDepthFrameConnection.reset();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>this-&gt;newRGBPointCloudConnection.reset();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>this-&gt;newImageFrameConnection.reset();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor.reset();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>this-&gt;depthCamera.reset();</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">//<sp/>Load<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a572dcea1d62a05f9f2ba2f278c7eb369" kindref="member">GazeboRosImageSonar::Load</ref>(sensors::SensorPtr<sp/>_parent,<sp/>sdf::ElementPtr<sp/>_sdf)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor<sp/>=</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;sensors::DepthCameraSensor&gt;(_parent);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>this-&gt;depthCamera<sp/>=<sp/>this-&gt;parentSensor-&gt;DepthCamera();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;parentSensor)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>gzerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DepthCameraPlugin<sp/>not<sp/>attached<sp/>to<sp/>a<sp/>depthCamera<sp/>sensor\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>this-&gt;width<sp/>=<sp/>this-&gt;depthCamera-&gt;ImageWidth();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>this-&gt;height<sp/>=<sp/>this-&gt;depthCamera-&gt;ImageHeight();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>this-&gt;depth<sp/>=<sp/>this-&gt;depthCamera-&gt;ImageDepth();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>this-&gt;format<sp/>=<sp/>this-&gt;depthCamera-&gt;ImageFormat();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>this-&gt;newDepthFrameConnection<sp/>=<sp/>this-&gt;depthCamera-&gt;ConnectNewDepthFrame(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a8d42e68da5678b0a5cb85291790e5ddf" kindref="member">GazeboRosImageSonar::OnNewDepthFrame</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_3,<sp/>std::placeholders::_4,<sp/>std::placeholders::_5));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>this-&gt;newRGBPointCloudConnection<sp/>=<sp/>this-&gt;depthCamera-&gt;ConnectNewRGBPointCloud(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a38389595a6606d68a9c9d0c0203d4c7f" kindref="member">GazeboRosImageSonar::OnNewRGBPointCloud</ref>,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_3,<sp/>std::placeholders::_4,<sp/>std::placeholders::_5));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>this-&gt;newImageFrameConnection<sp/>=<sp/>this-&gt;depthCamera-&gt;ConnectNewImageFrame(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a9dab1f74d823f6df56c384e6af18da22" kindref="member">GazeboRosImageSonar::OnNewImageFrame</ref>,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_3,<sp/>std::placeholders::_4,<sp/>std::placeholders::_5));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>ROS<sp/>node<sp/>for<sp/>Gazebo<sp/>has<sp/>already<sp/>been<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ros::isInitialized())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_FATAL_STREAM_NAMED(</highlight><highlight class="stringliteral">&quot;depth_camera&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>ROS<sp/>node<sp/>for<sp/>Gazebo<sp/>has<sp/>not<sp/>been<sp/>initialized,<sp/>unable<sp/>to<sp/>load<sp/>plugin.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>the<sp/>Gazebo<sp/>system<sp/>plugin<sp/>&apos;libgazebo_ros_api_plugin.so&apos;<sp/>in<sp/>the<sp/>gazebo_ros<sp/>package)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copying<sp/>from<sp/>DepthCameraPlugin<sp/>into<sp/>GazeboRosCameraUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor_<sp/>=<sp/>this-&gt;parentSensor;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>this-&gt;width_<sp/>=<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>this-&gt;height_<sp/>=<sp/>this-&gt;height;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>this-&gt;depth_<sp/>=<sp/>this-&gt;depth;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>this-&gt;format_<sp/>=<sp/>this-&gt;format;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>this-&gt;camera_<sp/>=<sp/>this-&gt;depthCamera;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>a<sp/>different<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;imageTopicName&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;image_topic_name_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ir/image_raw&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;cameraInfoTopicName&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;camera_info_topic_name_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ir/camera_info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>cloud<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;pointCloudTopicName&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;point_cloud_topic_name_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;points&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;point_cloud_topic_name_<sp/>=<sp/>_sdf-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;pointCloudTopicName&quot;</highlight><highlight class="normal">)-&gt;Get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>depth<sp/>image<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;depthImageTopicName&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;depth/image_raw&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_<sp/>=<sp/>_sdf-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;depthImageTopicName&quot;</highlight><highlight class="normal">)-&gt;Get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;depthImageCameraInfoTopicName&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;depth_image_camera_info_topic_name_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;depth/camera_info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;depth_image_camera_info_topic_name_<sp/>=<sp/>_sdf-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;depthImageCameraInfoTopicName&quot;</highlight><highlight class="normal">)-&gt;Get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;pointCloudCutoff&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;point_cloud_cutoff_<sp/>=<sp/>0.4;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;point_cloud_cutoff_<sp/>=<sp/>_sdf-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;pointCloudCutoff&quot;</highlight><highlight class="normal">)-&gt;Get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_sdf-&gt;HasElement(</highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>gzerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>do<sp/>not<sp/>have<sp/>clip&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>gzerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;We<sp/>do<sp/>have<sp/>clip&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>gzerr<sp/>&lt;&lt;<sp/>_sdf-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">)-&gt;GetElement(</highlight><highlight class="stringliteral">&quot;far&quot;</highlight><highlight class="normal">)-&gt;Get&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>load_connection_<sp/>=<sp/>GazeboRosCameraUtils::OnLoad(boost::bind(&amp;<ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1ab4d294c942ec9805d38b5ab651d79611" kindref="member">GazeboRosImageSonar::Advertise</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>GazeboRosCameraUtils::Load(_parent,<sp/>_sdf);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1ab4d294c942ec9805d38b5ab651d79611" kindref="member">GazeboRosImageSonar::Advertise</ref>()</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>point_cloud_ao<sp/>=</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;sensor_msgs::PointCloud2<sp/>&gt;(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_topic_name_,1,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::PointCloudConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::PointCloudDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(point_cloud_ao);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>depth_image_ao<sp/>=</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;<sp/>sensor_msgs::Image<sp/>&gt;(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_,1,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::DepthImageConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::DepthImageDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(depth_image_ao);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>normal_image_ao<sp/>=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;<sp/>sensor_msgs::Image<sp/>&gt;(</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_+</highlight><highlight class="stringliteral">&quot;_normals&quot;</highlight><highlight class="normal">,1,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::NormalImageConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::NormalImageDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>this-&gt;normal_image_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(normal_image_ao);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>multibeam_image_ao<sp/>=</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;<sp/>sensor_msgs::Image<sp/>&gt;(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_+</highlight><highlight class="stringliteral">&quot;_multibeam&quot;</highlight><highlight class="normal">,1,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::MultibeamImageConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::MultibeamImageDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>this-&gt;multibeam_image_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(multibeam_image_ao);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>sonar_image_ao<sp/>=</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;<sp/>sensor_msgs::Image<sp/>&gt;(</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_+</highlight><highlight class="stringliteral">&quot;_sonar&quot;</highlight><highlight class="normal">,1,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::SonarImageConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::SonarImageDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>this-&gt;sonar_image_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(sonar_image_ao);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>raw_sonar_image_ao<sp/>=</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;<sp/>sensor_msgs::Image<sp/>&gt;(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_topic_name_+</highlight><highlight class="stringliteral">&quot;_raw_sonar&quot;</highlight><highlight class="normal">,1,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::RawSonarImageConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::RawSonarImageDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>this-&gt;raw_sonar_image_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(raw_sonar_image_ao);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>ros::AdvertiseOptions<sp/>depth_image_camera_info_ao<sp/>=</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::AdvertiseOptions::create&lt;sensor_msgs::CameraInfo&gt;(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_camera_info_topic_name_,1,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::DepthInfoConnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(<sp/>&amp;GazeboRosImageSonar::DepthInfoDisconnect,</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ros::VoidPtr(),<sp/>&amp;this-&gt;camera_queue_);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_camera_info_pub_<sp/>=<sp/>this-&gt;rosnode_-&gt;advertise(depth_image_camera_info_ao);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::PointCloudConnect()</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_connect_count_++;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>(*this-&gt;image_connect_count_)++;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::PointCloudDisconnect()</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_connect_count_--;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>(*this-&gt;image_connect_count_)--;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::DepthImageConnect()</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_++;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::DepthImageDisconnect()</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_--;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::NormalImageConnect()</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_++;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::NormalImageDisconnect()</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_--;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::MultibeamImageConnect()</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_++;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::MultibeamImageDisconnect()</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_--;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::SonarImageConnect()</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_++;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::SonarImageDisconnect()</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_--;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::RawSonarImageConnect()</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_++;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::RawSonarImageDisconnect()</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_connect_count_--;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="comment">//<sp/>Increment<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::DepthInfoConnect()</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>this-&gt;depth_info_connect_count_++;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="comment">//<sp/>Decrement<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::DepthInfoDisconnect()</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>this-&gt;depth_info_connect_count_--;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="comment">//<sp/>Update<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a8d42e68da5678b0a5cb85291790e5ddf" kindref="member">GazeboRosImageSonar::OnNewDepthFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*_image,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_depth,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_format)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initialized_<sp/>||<sp/>this-&gt;height_<sp/>&lt;=0<sp/>||<sp/>this-&gt;width_<sp/>&lt;=0)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>this-&gt;depth_sensor_update_time_<sp/>=<sp/>this-&gt;parentSensor-&gt;LastMeasurementTime();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;parentSensor-&gt;IsActive())</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&lt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_connect_count_<sp/>&lt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this-&gt;image_connect_count_)<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;FillPointdCloud(_image);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;depth_image_connect_count_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this-&gt;FillDepthImage(_image);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;ComputeSonarImage(_image);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&gt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;depth_image_connect_count_<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>this<sp/>first<sp/>so<sp/>there&apos;s<sp/>chance<sp/>for<sp/>sensor<sp/>to<sp/>run<sp/>1<sp/>frame<sp/>after<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">//<sp/>Update<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a38389595a6606d68a9c9d0c0203d4c7f" kindref="member">GazeboRosImageSonar::OnNewRGBPointCloud</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*_pcd,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_depth,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_format)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initialized_<sp/>||<sp/>this-&gt;height_<sp/>&lt;=0<sp/>||<sp/>this-&gt;width_<sp/>&lt;=0)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>this-&gt;depth_sensor_update_time_<sp/>=<sp/>this-&gt;parentSensor-&gt;LastMeasurementTime();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;parentSensor-&gt;IsActive())</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>this<sp/>first<sp/>so<sp/>there&apos;s<sp/>chance<sp/>for<sp/>sensor<sp/>to<sp/>run<sp/>1<sp/>frame<sp/>after<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;point_cloud_connect_count_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;lock_.lock();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.header.frame_id<sp/>=<sp/>this-&gt;frame_name_;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.header.stamp.sec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.sec;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.header.stamp.nsec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.nsec;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.width<sp/>=<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.height<sp/>=<sp/>this-&gt;height;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_msg_.row_step<sp/>=<sp/>this-&gt;point_cloud_msg_.point_step<sp/>*<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2Modifier<sp/>pcd_modifier(point_cloud_msg_);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcd_modifier.setPointCloud2FieldsByString(2,<sp/></highlight><highlight class="stringliteral">&quot;xyz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rgb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcd_modifier.resize(_width*_height);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point_cloud_msg_.is_dense<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_x(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_y(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_z(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_rgb(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;rgb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_width;<sp/>i++)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>_height;<sp/>j++,<sp/>++iter_x,<sp/>++iter_y,<sp/>++iter_z,<sp/>++iter_rgb)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>(j<sp/>*<sp/>_width)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_x<sp/>=<sp/>_pcd[4<sp/>*<sp/>index];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_y<sp/>=<sp/>_pcd[4<sp/>*<sp/>index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_z<sp/>=<sp/>_pcd[4<sp/>*<sp/>index<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_rgb<sp/>=<sp/>_pcd[4<sp/>*<sp/>index<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>_width<sp/>/2<sp/>&amp;&amp;<sp/>j<sp/>==<sp/>_height<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>rgb<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;(*iter_rgb));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>r<sp/>=<sp/>(rgb<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0x0000ff;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>g<sp/>=<sp/>(rgb<sp/>&gt;&gt;<sp/>8)<sp/><sp/>&amp;<sp/>0x0000ff;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>b<sp/>=<sp/>(rgb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>0x0000ff;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>(int)r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)g<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(int)b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;point_cloud_pub_.publish(this-&gt;point_cloud_msg_);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;lock_.unlock();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="comment">//<sp/>Update<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_gazebo_ros_image_sonar_1a9dab1f74d823f6df56c384e6af18da22" kindref="member">GazeboRosImageSonar::OnNewImageFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_image,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_height,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_depth,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_format)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;initialized_<sp/>||<sp/>this-&gt;height_<sp/>&lt;=0<sp/>||<sp/>this-&gt;width_<sp/>&lt;=0)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ROS_ERROR_NAMED(&quot;depth_camera&quot;,<sp/>&quot;camera_<sp/>new<sp/>frame<sp/>%s<sp/>%s&quot;,this-&gt;parentSensor_-&gt;GetName().c_str(),this-&gt;frame_name_.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>this-&gt;sensor_update_time_<sp/>=<sp/>this-&gt;parentSensor-&gt;LastMeasurementTime();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;parentSensor-&gt;IsActive())</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*this-&gt;image_connect_count_)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>this<sp/>first<sp/>so<sp/>there&apos;s<sp/>chance<sp/>for<sp/>sensor<sp/>to<sp/>run<sp/>1<sp/>frame<sp/>after<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;parentSensor-&gt;SetActive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*this-&gt;image_connect_count_)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;PutCameraData(_image);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(lucasw)<sp/>publish<sp/>camera<sp/>info<sp/>with<sp/>depth<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this-&gt;PublishCameraInfo(sensor_update_time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">//<sp/>Put<sp/>camera<sp/>data<sp/>to<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::FillPointdCloud(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*_src)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>this-&gt;lock_.lock();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.header.frame_id<sp/>=<sp/>this-&gt;frame_name_;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.header.stamp.sec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.sec;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.header.stamp.nsec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.nsec;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.width<sp/>=<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.height<sp/>=<sp/>this-&gt;height;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_msg_.row_step<sp/>=<sp/>this-&gt;point_cloud_msg_.point_step<sp/>*<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>FillPointCloudHelper(this-&gt;point_cloud_msg_,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;height,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;width,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;skip_,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)_src<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>this-&gt;point_cloud_pub_.publish(this-&gt;point_cloud_msg_);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>this-&gt;lock_.unlock();</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="comment">//<sp/>Put<sp/>depth<sp/>image<sp/>data<sp/>to<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::FillDepthImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*_src)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>this-&gt;lock_.lock();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>into<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.frame_id<sp/>=<sp/>this-&gt;frame_name_;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.stamp.sec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.sec;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.stamp.nsec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.nsec;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>FillDepthImageHelper(this-&gt;depth_image_msg_,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;height,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;width,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;skip_,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)_src<sp/>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_pub_.publish(this-&gt;depth_image_msg_);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>this-&gt;lock_.unlock();</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>depth<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::FillPointCloudHelper(</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::PointCloud2<sp/>&amp;point_cloud_msg,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rows_arg,<sp/>uint32_t<sp/>cols_arg,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>step_arg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_arg)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>sensor_msgs::PointCloud2Modifier<sp/>pcd_modifier(point_cloud_msg);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>pcd_modifier.setPointCloud2FieldsByString(2,<sp/></highlight><highlight class="stringliteral">&quot;xyz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rgb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>pcd_modifier.resize(rows_arg*cols_arg);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_x(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_y(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;float&gt;<sp/>iter_z(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>sensor_msgs::PointCloud2Iterator&lt;uint8_t&gt;<sp/>iter_rgb(point_cloud_msg_,<sp/></highlight><highlight class="stringliteral">&quot;rgb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>point_cloud_msg.is_dense<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>toCopyFrom<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)data_arg;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hfov<sp/>=<sp/>this-&gt;parentSensor-&gt;DepthCamera()-&gt;HFOV().Radian();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fl<sp/>=<sp/>((double)this-&gt;width)<sp/>/<sp/>(2.0<sp/>*tan(hfov/2.0));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>depth<sp/>to<sp/>point<sp/>cloud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j=0;<sp/>j&lt;rows_arg;<sp/>j++)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pAngle;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows_arg&gt;1)<sp/>pAngle<sp/>=<sp/>atan2(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)j<sp/>-<sp/>0.5*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(rows_arg-1),<sp/>fl);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pAngle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i=0;<sp/>i&lt;cols_arg;<sp/>i++,<sp/>++iter_x,<sp/>++iter_y,<sp/>++iter_z,<sp/>++iter_rgb)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yAngle;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cols_arg&gt;1)<sp/>yAngle<sp/>=<sp/>atan2(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i<sp/>-<sp/>0.5*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(cols_arg-1),<sp/>fl);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yAngle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>toCopyFrom[index++];</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>optical<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardcoded<sp/>rotation<sp/>rpy(-M_PI/2,<sp/>0,<sp/>-M_PI/2)<sp/>is<sp/>built-in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>urdf,<sp/>where<sp/>the<sp/>*_optical_frame<sp/>should<sp/>have<sp/>above<sp/>relative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation<sp/>from<sp/>the<sp/>physical<sp/>camera<sp/>*_frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter_x<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>depth<sp/>*<sp/>tan(yAngle);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter_y<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>depth<sp/>*<sp/>tan(pAngle);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(depth<sp/>&gt;<sp/>this-&gt;point_cloud_cutoff_)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_z<sp/><sp/><sp/><sp/>=<sp/>depth;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//point<sp/>in<sp/>the<sp/>unseeable<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter_x<sp/>=<sp/>*iter_y<sp/>=<sp/>*iter_z<sp/>=<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN<sp/>();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_cloud_msg.is_dense<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>image<sp/>color<sp/>data<sp/>for<sp/>each<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/>image_src<sp/>=<sp/>(uint8_t*)(&amp;(this-&gt;image_msg_.data[0]));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;image_msg_.data.size()<sp/>==<sp/>rows_arg*cols_arg*3)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[0]<sp/>=<sp/>image_src[i*3+j*cols_arg*3+0];</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[1]<sp/>=<sp/>image_src[i*3+j*cols_arg*3+1];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[2]<sp/>=<sp/>image_src[i*3+j*cols_arg*3+2];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;image_msg_.data.size()<sp/>==<sp/>rows_arg*cols_arg)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mono<sp/>(or<sp/>bayer?<sp/><sp/>@todo;<sp/>fix<sp/>for<sp/>bayer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[0]<sp/>=<sp/>image_src[i+j*cols_arg];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[1]<sp/>=<sp/>image_src[i+j*cols_arg];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[2]<sp/>=<sp/>image_src[i+j*cols_arg];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter_rgb[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>depth<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::FillDepthImageHelper(</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::Image&amp;<sp/>image_msg,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rows_arg,<sp/>uint32_t<sp/>cols_arg,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>step_arg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_arg)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>image_msg.encoding<sp/>=<sp/>sensor_msgs::image_encodings::TYPE_32FC1;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>image_msg.height<sp/>=<sp/>rows_arg;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>image_msg.width<sp/>=<sp/>cols_arg;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>image_msg.step<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>cols_arg;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>image_msg.data.resize(rows_arg<sp/>*<sp/>cols_arg<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>image_msg.is_bigendian<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bad_point<sp/>=<sp/>std::numeric_limits&lt;float&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dest<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(&amp;(image_msg.data[0]));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>toCopyFrom<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)data_arg;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>depth<sp/>to<sp/>point<sp/>cloud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>rows_arg;<sp/>j++)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cols_arg;<sp/>i++)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>toCopyFrom[index++];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>&gt;<sp/>this-&gt;point_cloud_cutoff_)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i<sp/>+<sp/>j<sp/>*<sp/>cols_arg]<sp/>=<sp/>depth;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//point<sp/>in<sp/>the<sp/>unseeable<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i<sp/>+<sp/>j<sp/>*<sp/>cols_arg]<sp/>=<sp/>bad_point;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">cv::Mat<sp/>GazeboRosImageSonar::ComputeNormalImage(cv::Mat&amp;<sp/>depth)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>into<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>this-&gt;normal_image_msg_.header.frame_id<sp/>=<sp/>this-&gt;frame_name_;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>this-&gt;normal_image_msg_.header.stamp.sec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.sec;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>this-&gt;normal_image_msg_.header.stamp.nsec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.nsec;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>cv::Mat_&lt;float&gt;<sp/>f1<sp/>=<sp/>(cv::Mat_&lt;float&gt;(3,<sp/>3)<sp/>&lt;&lt;<sp/>1,<sp/><sp/>2,<sp/><sp/>1,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-2,<sp/>-1)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>cv::Mat_&lt;float&gt;<sp/>f2<sp/>=<sp/>(cv::Mat_&lt;float&gt;(3,<sp/>3)<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>-1,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>0,<sp/>-2,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>0,<sp/>-1)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>f1m,<sp/>f2m;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>cv::flip(f1,<sp/>f1m,<sp/>0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>cv::flip(f2,<sp/>f2m,<sp/>1);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>n1,<sp/>n2;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>cv::filter2D(depth,<sp/>n1,<sp/>-1,<sp/>f1m,<sp/>cv::Point(-1,<sp/>-1),<sp/>0,<sp/>cv::BORDER_REPLICATE);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>cv::filter2D(depth,<sp/>n2,<sp/>-1,<sp/>f2m,<sp/>cv::Point(-1,<sp/>-1),<sp/>0,<sp/>cv::BORDER_REPLICATE);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>no_readings;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>cv::erode(depth<sp/>==<sp/>0,<sp/>no_readings,<sp/>cv::Mat(),<sp/>cv::Point(-1,<sp/>-1),<sp/>2,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cv::dilate(no_readings,<sp/>no_readings,<sp/>cv::Mat(),<sp/>cv::Point(-1,<sp/>-1),<sp/>2,<sp/>1,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>n1.setTo(0,<sp/>no_readings);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>n2.setTo(0,<sp/>no_readings);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Mat&gt;<sp/>images(3);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>white<sp/>=<sp/>cv::Mat::ones(depth.rows,<sp/>depth.cols,<sp/>CV_32FC1);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>with<sp/>different<sp/>focal<sp/>lengths,<sp/>the<sp/>expression<sp/>becomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(-dzx*fy,<sp/>-dzy*fx,<sp/>fx*fy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>images.at(0)<sp/>=<sp/>n1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>green<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>images.at(1)<sp/>=<sp/>n2;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>red<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>images.at(2)<sp/>=<sp/>1./this-&gt;focal_length_*depth;<sp/></highlight><highlight class="comment">//for<sp/>blue<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>normal_image;<sp/></highlight><highlight class="comment">//<sp/>=<sp/>cv::Mat::zeros(depth.rows,<sp/>depth.cols,<sp/>CV_32FC3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>cv::merge(images,<sp/>normal_image);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>we<sp/>should<sp/>do<sp/>this<sp/>on<sp/>the<sp/>split<sp/>images<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>normal_image.rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>normal_image.cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cv::Vec3f&amp;<sp/>n<sp/>=<sp/>normal_image.at&lt;cv::Vec3f&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>cv::normalize(n);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>cv::split(normal_image.clone(),<sp/>images);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>cv::Vec3d<sp/>minVec,<sp/>maxVec;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::minMaxLoc(images[i],<sp/>&amp;minVec[i],<sp/>&amp;maxVec[i]);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>images[i]<sp/>-=<sp/>minVec[i];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>images[i]<sp/>*=<sp/>1./(maxVec[i]<sp/>-<sp/>minVec[i]);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>cv::merge(images,<sp/>normal_image);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>normal_image8;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>normal_image.convertTo(normal_image8,<sp/>CV_8UC3,<sp/>255.0);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>cv_bridge::CvImage<sp/>img_bridge;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>img_bridge<sp/>=<sp/>cv_bridge::CvImage(this-&gt;normal_image_msg_.header,<sp/>sensor_msgs::image_encodings::RGB8,<sp/>normal_image8);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>img_bridge.toImageMsg(this-&gt;normal_image_msg_);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>cv_bridge<sp/>to<sp/>sensor_msgs::Image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>this-&gt;normal_image_pub_.publish(this-&gt;normal_image_msg_);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normal_image;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">cv::Mat<sp/>GazeboRosImageSonar::ConstructSonarImage(cv::Mat&amp;<sp/>depth,<sp/>cv::Mat&amp;<sp/>normals)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>std::vector&lt;cv::Mat&gt;<sp/>images(3);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>cv::split(normals,<sp/>images);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>100.;<sp/></highlight><highlight class="comment">//<sp/>target<sp/>strength</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SL<sp/>=<sp/>200.;<sp/></highlight><highlight class="comment">//<sp/>source<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NL<sp/>=<sp/>30;<sp/></highlight><highlight class="comment">//<sp/>noise<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DI<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//<sp/>directivity<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_matrix_.empty())<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>t_x,<sp/>t_y;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>depth.cols;<sp/>i++)<sp/>t_x.push_back((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(i)<sp/>-<sp/>this-&gt;cx_)/this-&gt;focal_length_);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>depth.rows;<sp/>i++)<sp/>t_y.push_back((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(i)<sp/>-<sp/>this-&gt;cy_)/this-&gt;focal_length_);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>X,<sp/>Y;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::repeat(cv::Mat(t_x).reshape(1,1),<sp/>t_y.size(),<sp/>1,<sp/>X);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::repeat(cv::Mat(t_y).reshape(1,1).t(),<sp/>1,<sp/>t_x.size(),<sp/>Y);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>dist_matrix_<sp/>=<sp/>cv::Mat::zeros(depth.rows,<sp/>depth.cols,<sp/>CV_32FC1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::multiply(X,<sp/>X,<sp/>X);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::multiply(Y,<sp/>Y,<sp/>Y);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::sqrt(X<sp/>+<sp/>Y<sp/>+<sp/>1,<sp/>dist_matrix_);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>make<sp/>these<sp/>into<sp/>proper<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>TS<sp/>=<sp/>intensity*images[2];<sp/></highlight><highlight class="comment">//<sp/>target<sp/>strength,<sp/>probably<sp/>dir<sp/>should<sp/>be<sp/>DI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>TL<sp/>=<sp/>5*depth;<sp/></highlight><highlight class="comment">//<sp/>transmission<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>cv::multiply(TL,<sp/>dist_matrix_,<sp/>TL);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>SNR<sp/>=<sp/>SL<sp/>-<sp/>2.0*TL<sp/>-<sp/>(NL-DI)<sp/>+<sp/>TS;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>SNR.setTo(0.,<sp/>SNR<sp/>&lt;<sp/>0.);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minVal,<sp/>maxVal;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>cv::minMaxLoc(SNR,<sp/>&amp;minVal,<sp/>&amp;maxVal);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>SNR<sp/>-=<sp/>minVal;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>SNR<sp/>*=<sp/>1./(maxVal<sp/>-<sp/>minVal);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>sonar_image8;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>SNR.convertTo(sonar_image8,<sp/>CV_8UC3,<sp/>255.0);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>cv_bridge::CvImage<sp/>img_bridge;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>img_bridge<sp/>=<sp/>cv_bridge::CvImage(this-&gt;multibeam_image_msg_.header,<sp/>sensor_msgs::image_encodings::MONO8,<sp/>sonar_image8);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>img_bridge.toImageMsg(this-&gt;multibeam_image_msg_);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>cv_bridge<sp/>to<sp/>sensor_msgs::Image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>this-&gt;multibeam_image_pub_.publish(this-&gt;multibeam_image_msg_);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SNR;<sp/></highlight><highlight class="comment">//sonar_image8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::ApplySpeckleNoise(cv::Mat&amp;<sp/>scan,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>std::normal_distribution&lt;double&gt;<sp/>speckle_dist(1.0,<sp/>0.1);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scan.rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>scan.cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>a<sp/>=<sp/>scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speckle<sp/>=<sp/>fabs(speckle_dist(generator));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>*=<sp/>speckle;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::ApplySmoothing(cv::Mat&amp;<sp/>scan,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrolls<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_size<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle_range_indices_.empty())<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>angle_range_indices_.resize(scan.rows/1);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>angle_nbr_indices_.resize(scan.rows/2,<sp/>0);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>tan(fov);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>scan.cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scan.rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>fabs(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(scan.cols)/2.<sp/>-<sp/>j);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>scan.rows<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>int(sqrt(x*x+y*y))/2;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;=<sp/>scan.rows/2<sp/>||<sp/>fabs(x)/y<sp/>&gt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_range_indices_[dist].push_back(scan.cols*i+j);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_nbr_indices_[dist]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>std::discrete_distribution&lt;&gt;<sp/>range_dist(angle_nbr_indices_.begin(),<sp/>angle_nbr_indices_.end());</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>index_dist(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>kernel(window_size);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>window_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>float(i-window_size/2)/float(window_size/4.);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel[i]<sp/>=<sp/>exp(-0.5*diff);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>conv_results(2*window_size);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrolls;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampled_range<sp/>=<sp/>range_dist(generator);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(angle_nbr_indices_[sampled_range]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sampled_index<sp/>=<sp/>int(index_dist(generator)*angle_nbr_indices_[sampled_range]);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_start<sp/>=<sp/>std::max(0,<sp/>sampled_index-window_size);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window_end<sp/>=<sp/>std::min(angle_nbr_indices_[sampled_range],<sp/>sampled_index+window_size);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>window_start;<sp/>i<sp/>&lt;<sp/>window_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conv_results[i<sp/>-<sp/>window_start]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>conv_mass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>window_size;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>i<sp/>+<sp/>j<sp/>-<sp/>window_size/2;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>angle_nbr_indices_[sampled_range])<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conv_results[i<sp/>-<sp/>window_start]<sp/>+=<sp/>kernel[j]*scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(angle_range_indices_[sampled_range][index]);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conv_mass<sp/>+=<sp/>kernel[j];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conv_mass<sp/>==<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conv_results[i<sp/>-<sp/>window_start]<sp/>=<sp/>scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(angle_range_indices_[sampled_range][i]);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conv_results[i<sp/>-<sp/>window_start]<sp/>*=<sp/>1./conv_mass;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>window_start;<sp/>i<sp/>&lt;<sp/>window_end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(angle_range_indices_[sampled_range][i])<sp/>=<sp/>conv_results[i<sp/>-<sp/>window_start];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::ApplyMedianFilter(cv::Mat&amp;<sp/>scan)</highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>is_zero<sp/>=<sp/>scan<sp/>==<sp/>0.;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>is_bg<sp/>=<sp/>scan<sp/>==<sp/>0.2;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>cv::bitwise_or(is_zero,<sp/>is_bg,<sp/>is_zero);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>element<sp/>=<sp/>cv::getStructuringElement(cv::MORPH_ELLIPSE,<sp/>cv::Size(3,<sp/>9));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>scan_dilated;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>cv::dilate(scan,<sp/>scan_dilated,<sp/>element,<sp/>cv::Point(-1,<sp/>-1),<sp/>1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//scan.setTo(scan_dilated,<sp/>is_zero);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>scan_dilated.copyTo(scan,<sp/>is_zero);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">cv::Mat<sp/>GazeboRosImageSonar::ConstructScanImage(cv::Mat&amp;<sp/>depth,<sp/>cv::Mat&amp;<sp/>SNR)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>400;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>a<sp/>parameter<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>17.;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>get<sp/>this<sp/>from<sp/>the<sp/>sensor<sp/>config<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov<sp/>=<sp/>depthCamera-&gt;HFOV().Degree();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/>2*int(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(rows)*sin(M_PI/180.*fov/2.))+20;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>scan<sp/>=<sp/>cv::Mat::zeros(rows,<sp/>cols,<sp/>CV_32FC1);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>fov<sp/>=<sp/>180./M_PI*2.*asin(this-&gt;cx_/this-&gt;focal_length_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>cv::Point<sp/>center(scan.cols/2,<sp/>scan.rows);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>cv::Size<sp/>full_axes(scan.rows,<sp/>scan.rows);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>full_axes,<sp/>-90,<sp/>-fov/2.,<sp/>fov/2.,<sp/>0.2,<sp/>-1);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>cv::Size<sp/>third_axes(scan.rows/3,<sp/>scan.rows/3);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>third_axes,<sp/>-90,<sp/>-fov/2.,<sp/>fov/2.,<sp/>0,<sp/>-1);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mapped_range<sp/>=<sp/>float(scan.rows);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>depth.rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>depth.cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>depth.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uchar<sp/>a<sp/>=<sp/>SNR.at&lt;uchar&gt;(i,<sp/>j);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>SNR.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>0<sp/>||<sp/>a<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(float(j)<sp/>-<sp/>this-&gt;cx_)/this-&gt;focal_length_;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(float(i)<sp/>-<sp/>this-&gt;cy_)/this-&gt;focal_length_;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>d*sqrt(y*y<sp/>+<sp/>z*z);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>z;<sp/>y<sp/>*=<sp/>z;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>scan.rows<sp/>-<sp/>1<sp/>-<sp/>int(z/range*mapped_range);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pj<sp/>=<sp/>scan.cols/2<sp/>+<sp/>int(x/range*mapped_range);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pi<sp/>&lt;<sp/>scan.rows<sp/>&amp;&amp;<sp/>pi<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>pj<sp/>&lt;<sp/>scan.cols<sp/>&amp;&amp;<sp/>pj<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>x*x<sp/>+<sp/>z*z<sp/>&lt;<sp/>range*range)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(pi,<sp/>pj)<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>this-&gt;ApplyMedianFilter(scan);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>this-&gt;ApplySpeckleNoise(scan,<sp/>fov);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this-&gt;ApplySmoothing(scan,<sp/>fov);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>cv_bridge::CvImage<sp/>img_bridge;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>img_bridge<sp/>=<sp/>cv_bridge::CvImage(this-&gt;raw_sonar_image_msg_.header,<sp/>sensor_msgs::image_encodings::TYPE_32FC1,<sp/>scan);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>img_bridge.toImageMsg(this-&gt;raw_sonar_image_msg_);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>cv_bridge<sp/>to<sp/>sensor_msgs::Image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>this-&gt;raw_sonar_image_pub_.publish(this-&gt;raw_sonar_image_msg_);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scan;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">cv::Mat<sp/>GazeboRosImageSonar::ConstructVisualScanImage(cv::Mat&amp;<sp/>raw_scan)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fov<sp/>=<sp/>depthCamera-&gt;HFOV().Degree();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mapped_range<sp/>=<sp/>float(raw_scan.rows);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>cv::Scalar<sp/>blue(15,<sp/>48,<sp/>102);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>cv::Scalar<sp/>black(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>scan(raw_scan.rows,<sp/>raw_scan.cols,<sp/>CV_8UC3);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>scan.setTo(blue);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>cv::Point<sp/>center(scan.cols/2,<sp/>scan.rows);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>cv::Size<sp/>axes(scan.rows+3,<sp/>scan.rows+3);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>axes,<sp/>-90,<sp/>-fov/2.,<sp/>fov/2.,<sp/>black,<sp/>-1);<sp/></highlight><highlight class="comment">//,<sp/>int<sp/>lineType=LINE_8,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scan.rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>scan.cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>raw_scan.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(i,<sp/>j);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0.8)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan.at&lt;cv::Vec3b&gt;(i,<sp/>j)<sp/>=<sp/>cv::Vec3b(255*1.25*a,<sp/>255*0.78*a,<sp/>255*0.50*a);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>&lt;<sp/>1.)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan.at&lt;cv::Vec3b&gt;(i,<sp/>j)<sp/>=<sp/>cv::Vec3b(255*a,<sp/>255*(1.88*a-0.88),<sp/>255*(-1.99*a+1.99));</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scan.at&lt;cv::Vec3b&gt;(i,<sp/>j)<sp/>=<sp/>cv::Vec3b(255,<sp/>255*(1.88-0.88),<sp/>255*(-1.99+1.99));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>cv::Scalar<sp/>white(255,<sp/>255,<sp/>255);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>cv::Size<sp/>axes1(2./3.*scan.rows,<sp/>2./3.*scan.rows);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>cv::Size<sp/>axes2(1./3.*scan.rows,<sp/>1./3.*scan.rows);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>axes,<sp/>-90,<sp/>-fov/2.-0.5,<sp/>fov/2.,<sp/>white,<sp/>1,<sp/>CV_AA);<sp/></highlight><highlight class="comment">//,<sp/>int<sp/>lineType=LINE_8,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>axes1,<sp/>-90,<sp/>-fov/2.,<sp/>fov/2.,<sp/>white,<sp/>1,<sp/>CV_AA);<sp/></highlight><highlight class="comment">//,<sp/>int<sp/>lineType=LINE_8,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>cv::ellipse(scan,<sp/>center,<sp/>axes2,<sp/>-90,<sp/>-fov/2.,<sp/>fov/2.,<sp/>white,<sp/>1,<sp/>CV_AA);<sp/></highlight><highlight class="comment">//,<sp/>int<sp/>lineType=LINE_8,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>-fov/2.-0.5<sp/>+<sp/>(fov+0.5)*i/float(5-1);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cornerx<sp/>=<sp/>int(mapped_range*sin(M_PI/180.*angle));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cornery<sp/>=<sp/>int(mapped_range*cos(M_PI/180.*angle));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cv::Point<sp/>left_corner(scan.cols/2-cornerx,<sp/>scan.rows-cornery);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cv::Point<sp/>right_corner(scan.cols/2+cornerx,<sp/>scan.rows-cornery);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point<sp/>corner(scan.cols/2+cornerx,<sp/>scan.rows-cornery);<sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cv::line(scan,<sp/>center,<sp/>left_corner,<sp/>white,<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cv::line(scan,<sp/>center,<sp/>right_corner,<sp/>white,<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::line(scan,<sp/>center,<sp/>corner,<sp/>white,<sp/>1,<sp/>CV_AA);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>cv_bridge::CvImage<sp/>img_bridge;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>img_bridge<sp/>=<sp/>cv_bridge::CvImage(this-&gt;sonar_image_msg_.header,<sp/>sensor_msgs::image_encodings::RGB8,<sp/>scan);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>img_bridge.toImageMsg(this-&gt;sonar_image_msg_);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>cv_bridge<sp/>to<sp/>sensor_msgs::Image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>this-&gt;sonar_image_pub_.publish(this-&gt;sonar_image_msg_);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scan;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="comment">//<sp/>Put<sp/>depth<sp/>image<sp/>data<sp/>to<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::ComputeSonarImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*_src)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>this-&gt;lock_.lock();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>into<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.frame_id<sp/>=<sp/>this-&gt;frame_name_;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.stamp.sec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.sec;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_msg_.header.stamp.nsec<sp/>=<sp/>this-&gt;depth_sensor_update_time_.nsec;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>from<sp/>depth<sp/>to<sp/>depth<sp/>image<sp/>(OpenCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows_arg<sp/>=<sp/>this-&gt;height;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols_arg<sp/>=<sp/>this-&gt;width;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_arg<sp/>=<sp/>this-&gt;skip_;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>sensor_msgs::Image<sp/>image_msg;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>image_msg.encoding<sp/>=<sp/>sensor_msgs::image_encodings::TYPE_32FC1;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>image_msg.height<sp/>=<sp/>rows_arg;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>image_msg.width<sp/>=<sp/>cols_arg;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>image_msg.step<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>cols_arg;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>image_msg.data.resize(rows_arg<sp/>*<sp/>cols_arg<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>image_msg.is_bigendian<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cv::Mat<sp/>depth_image<sp/>=<sp/>cv::Mat(rows_arg,<sp/>cols_arg,<sp/>CV_32FC1,<sp/>(float*)_src).clone();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>depth_image(rows_arg,<sp/>cols_arg,<sp/>CV_32FC1,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)_src);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>publish<sp/>normal<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>normal_image<sp/>=<sp/>this-&gt;ComputeNormalImage(depth_image);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>multibeam_image<sp/>=<sp/>this-&gt;ConstructSonarImage(depth_image,<sp/>normal_image);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>raw_scan<sp/>=<sp/>this-&gt;ConstructScanImage(depth_image,<sp/>multibeam_image);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>visual_scan<sp/>=<sp/>this-&gt;ConstructVisualScanImage(raw_scan);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>cv_bridge::CvImage<sp/>img_bridge;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>img_bridge<sp/>=<sp/>cv_bridge::CvImage(this-&gt;depth_image_msg_.header,<sp/>sensor_msgs::image_encodings::TYPE_32FC1,<sp/>depth_image);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>img_bridge.toImageMsg(this-&gt;depth_image_msg_);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>cv_bridge<sp/>to<sp/>sensor_msgs::Image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>this-&gt;depth_image_pub_.publish(this-&gt;depth_image_msg_);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>this-&gt;lock_.unlock();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GazeboRosImageSonar::PublishCameraInfo()</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>ROS_DEBUG_NAMED(</highlight><highlight class="stringliteral">&quot;depth_camera&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;publishing<sp/>default<sp/>camera<sp/>info,<sp/>then<sp/>depth<sp/>camera<sp/>info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>GazeboRosCameraUtils::PublishCameraInfo();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;depth_info_connect_count_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>common::Time<sp/>sensor_update_time<sp/>=<sp/>this-&gt;parentSensor_-&gt;LastMeasurementTime();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sensor_update_time_<sp/>=<sp/>sensor_update_time;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_update_time<sp/>-<sp/>this-&gt;last_depth_image_camera_info_update_time_<sp/>&gt;=<sp/>this-&gt;update_period_)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;PublishCameraInfo(this-&gt;depth_image_camera_info_pub_);<sp/><sp/></highlight><highlight class="comment">//<sp/>,<sp/>sensor_update_time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;last_depth_image_camera_info_update_time_<sp/>=<sp/>sensor_update_time;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//@todo:<sp/>publish<sp/>disparity<sp/>similar<sp/>to<sp/>openni_camera_deprecated/src/nodelets/openni_nodelet.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">#include<sp/>&lt;stereo_msgs/DisparityImage.h&gt;</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">pub_disparity_<sp/>=<sp/>comm_nh.advertise&lt;stereo_msgs::DisparityImage<sp/>&gt;<sp/>(&quot;depth/disparity&quot;,<sp/>5,<sp/>subscriberChanged2,<sp/>subscriberChanged2);</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">void<sp/>GazeboRosImageSonar::PublishDisparityImage(const<sp/>DepthImage&amp;<sp/>depth,<sp/>ros::Time<sp/>time)</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/>stereo_msgs::DisparityImagePtr<sp/>disp_msg<sp/>=<sp/>boost::make_shared&lt;stereo_msgs::DisparityImage<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/>disp_msg-&gt;header.stamp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/>disp_msg-&gt;header.frame_id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>device_-&gt;isDepthRegistered<sp/>()<sp/>?<sp/>rgb_frame_id_<sp/>:<sp/>depth_frame_id_;</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>disp_msg-&gt;header;</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.encoding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sensor_msgs::image_encodings::TYPE_32FC1;</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.height<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>depth_height_;</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.width<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>depth_width_;</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.step<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>disp_msg-&gt;image.width<sp/>*<sp/>sizeof<sp/>(float);</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/>disp_msg-&gt;image.data.resize<sp/>(disp_msg-&gt;image.height<sp/>*<sp/>disp_msg-&gt;image.step);</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/>disp_msg-&gt;T<sp/>=<sp/>depth.getBaseline<sp/>();</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/>disp_msg-&gt;f<sp/>=<sp/>depth.getFocalLength<sp/>()<sp/>*<sp/>depth_width_<sp/>/<sp/>depth.getWidth<sp/>();</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/>disp_msg-&gt;min_disparity<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/>disp_msg-&gt;max_disparity<sp/>=<sp/>disp_msg-&gt;T<sp/>*<sp/>disp_msg-&gt;f<sp/>/<sp/>0.3;</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/>disp_msg-&gt;delta_d<sp/>=<sp/>0.125;</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/>depth.fillDisparityImage<sp/>(depth_width_,<sp/>depth_height_,<sp/>reinterpret_cast&lt;float*&gt;(&amp;disp_msg-&gt;image.data[0]),<sp/>disp_msg-&gt;image.step);</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/><sp/>pub_disparity_.publish<sp/>(disp_msg);</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/musamorena/catkin_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/src/gazebo_ros_image_sonar.cpp"/>
  </compounddef>
</doxygen>
