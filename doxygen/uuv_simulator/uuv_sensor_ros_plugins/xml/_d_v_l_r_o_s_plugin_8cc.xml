<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_d_v_l_r_o_s_plugin_8cc" kind="file" language="C++">
    <compoundname>DVLROSPlugin.cc</compoundname>
    <includes refid="_d_v_l_r_o_s_plugin_8hh" local="no">uuv_sensor_ros_plugins/DVLROSPlugin.hh</includes>
    <incdepgraph>
      <node id="446">
        <label>uuv_sensor_ros_plugins_msgs/DVL.h</label>
      </node>
      <node id="425">
        <label>gazebo/common/Plugin.hh</label>
      </node>
      <node id="428">
        <label>gazebo/common/common.hh</label>
      </node>
      <node id="441">
        <label>functional</label>
      </node>
      <node id="420">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="424">
        <label>uuv_sensor_ros_plugins/ROSBaseModelPlugin.hh</label>
        <link refid="_r_o_s_base_model_plugin_8hh_source"/>
        <childnode refid="425" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>SensorDvl.pb.h</label>
      </node>
      <node id="448">
        <label>message_filters/subscriber.h</label>
      </node>
      <node id="421">
        <label>geometry_msgs/TwistWithCovarianceStamped.h</label>
      </node>
      <node id="444">
        <label>tf/transform_listener.h</label>
      </node>
      <node id="445">
        <label>tf/transform_broadcaster.h</label>
      </node>
      <node id="432">
        <label>std_msgs/Bool.h</label>
      </node>
      <node id="430">
        <label>string</label>
      </node>
      <node id="429">
        <label>uuv_sensor_ros_plugins/Common.hh</label>
        <link refid="_common_8hh_source"/>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
      </node>
      <node id="440">
        <label>map</label>
      </node>
      <node id="437">
        <label>tf/tf.h</label>
      </node>
      <node id="417">
        <label>gazebo/gazebo.hh</label>
      </node>
      <node id="447">
        <label>uuv_sensor_ros_plugins_msgs/DVLBeam.h</label>
      </node>
      <node id="439">
        <label>random</label>
      </node>
      <node id="431">
        <label>Eigen/Dense</label>
      </node>
      <node id="415">
        <label>/home/musamorena/catkin_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/src/DVLROSPlugin.cc</label>
        <link refid="_d_v_l_r_o_s_plugin_8cc"/>
        <childnode refid="416" relation="include">
        </childnode>
      </node>
      <node id="434">
        <label>geometry_msgs/TransformStamped.h</label>
      </node>
      <node id="416">
        <label>uuv_sensor_ros_plugins/DVLROSPlugin.hh</label>
        <link refid="_d_v_l_r_o_s_plugin_8hh_source"/>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>tf/transform_datatypes.h</label>
      </node>
      <node id="422">
        <label>geometry_msgs/PoseStamped.h</label>
      </node>
      <node id="435">
        <label>gazebo/sensors/Noise.hh</label>
      </node>
      <node id="423">
        <label>sensor_msgs/Range.h</label>
      </node>
      <node id="450">
        <label>vector</label>
      </node>
      <node id="449">
        <label>message_filters/time_synchronizer.h</label>
      </node>
      <node id="433">
        <label>uuv_sensor_ros_plugins_msgs/ChangeSensorState.h</label>
      </node>
      <node id="418">
        <label>ros/ros.h</label>
      </node>
      <node id="419">
        <label>boost/bind.hpp</label>
      </node>
      <node id="438">
        <label>chrono</label>
      </node>
      <node id="426">
        <label>gazebo/physics/physics.hh</label>
      </node>
      <node id="436">
        <label>tf/tfMessage.h</label>
      </node>
      <node id="427">
        <label>uuv_sensor_ros_plugins/ROSBasePlugin.hh</label>
        <link refid="_r_o_s_base_plugin_8hh_source"/>
        <childnode refid="428" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
      <node id="442">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacegazebo">gazebo</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2016<sp/>The<sp/>UUV<sp/>Simulator<sp/>Authors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uuv_sensor_ros_plugins/DVLROSPlugin.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegazebo" kindref="compound">gazebo</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1aad4cc11ec091d06a2be743656c7bbcce" kindref="member">DVLROSPlugin::DVLROSPlugin</ref>()<sp/>:<sp/>ROSBaseModelPlugin()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>this-&gt;beamTransformsInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1a5941c8fe25d52a179799bb526dfd96de" kindref="member">DVLROSPlugin::~DVLROSPlugin</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1ad64840822bab803a6f89d589fe6c0a9f" kindref="member">DVLROSPlugin::Load</ref>(physics::ModelPtr<sp/>_model,<sp/>sdf::ElementPtr<sp/>_sdf)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classgazebo_1_1_r_o_s_base_model_plugin_1a9201b96ddee1a64ce43e59f3cf1ff2e9" kindref="member">ROSBaseModelPlugin::Load</ref>(_model,<sp/>_sdf);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>link<sp/>names<sp/>for<sp/>all<sp/>the<sp/>beams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::string<sp/>beamLinkName;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_link_name_0&quot;</highlight><highlight class="normal">,<sp/>beamLinkName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamLinkName.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>0<sp/>link<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>this-&gt;beamsLinkNames.push_back(beamLinkName);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_link_name_1&quot;</highlight><highlight class="normal">,<sp/>beamLinkName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamLinkName.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>1<sp/>link<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>this-&gt;beamsLinkNames.push_back(beamLinkName);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_link_name_2&quot;</highlight><highlight class="normal">,<sp/>beamLinkName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamLinkName.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>2<sp/>link<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>this-&gt;beamsLinkNames.push_back(beamLinkName);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_link_name_3&quot;</highlight><highlight class="normal">,<sp/>beamLinkName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamLinkName.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>3<sp/>link<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>this-&gt;beamsLinkNames.push_back(beamLinkName);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>beam<sp/>output<sp/>topic<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::string<sp/>beamTopic;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_topic_0&quot;</highlight><highlight class="normal">,<sp/>beamTopic,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamTopic.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>0<sp/>topic<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>this-&gt;beamTopics.push_back(beamTopic);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_topic_1&quot;</highlight><highlight class="normal">,<sp/>beamTopic,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamTopic.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>1<sp/>topic<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>this-&gt;beamTopics.push_back(beamTopic);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_topic_2&quot;</highlight><highlight class="normal">,<sp/>beamTopic,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamTopic.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>2<sp/>topic<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>this-&gt;beamTopics.push_back(beamTopic);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>GetSDFParam&lt;std::string&gt;(_sdf,<sp/></highlight><highlight class="stringliteral">&quot;beam_topic_3&quot;</highlight><highlight class="normal">,<sp/>beamTopic,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>GZ_ASSERT(!beamTopic.empty(),<sp/></highlight><highlight class="stringliteral">&quot;Beam<sp/>3<sp/>topic<sp/>name<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>this-&gt;beamTopics.push_back(beamTopic);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>beam<sp/>subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>this-&gt;beamSub0.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>message_filters::Subscriber&lt;sensor_msgs::Range&gt;(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>*this-&gt;rosNode.get(),<sp/>this-&gt;beamTopics[0],<sp/>1));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>this-&gt;beamSub1.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>message_filters::Subscriber&lt;sensor_msgs::Range&gt;(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>*this-&gt;rosNode.get(),<sp/>this-&gt;beamTopics[1],<sp/>1));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>this-&gt;beamSub2.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>message_filters::Subscriber&lt;sensor_msgs::Range&gt;(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*this-&gt;rosNode.get(),<sp/>this-&gt;beamTopics[2],<sp/>1));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>this-&gt;beamSub3.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>message_filters::Subscriber&lt;sensor_msgs::Range&gt;(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>*this-&gt;rosNode.get(),<sp/>this-&gt;beamTopics[3],<sp/>1));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs.push_back(uuv_sensor_ros_plugins_msgs::DVLBeam());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Synchronize<sp/>the<sp/>beam<sp/>topics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>this-&gt;syncBeamMessages.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>message_filters::TimeSynchronizer&lt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::Range,<sp/>sensor_msgs::Range,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::Range,<sp/>sensor_msgs::Range&gt;(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*this-&gt;beamSub0.get(),<sp/>*this-&gt;beamSub1.get(),<sp/>*this-&gt;beamSub2.get(),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*this-&gt;beamSub3.get(),<sp/>10));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>synchronized<sp/>callback<sp/>function<sp/>for<sp/>the<sp/>DVL<sp/>beams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>this-&gt;syncBeamMessages-&gt;registerCallback(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::bind(&amp;<ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1a6196f3792d05d27c197321fa760b6e0f" kindref="member">DVLROSPlugin::OnBeamCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>default<sp/>DVL<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>this-&gt;rosSensorOutputPub<sp/>=</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;rosNode-&gt;advertise&lt;uuv_sensor_ros_plugins_msgs::DVL&gt;(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sensorOutputTopic,<sp/>1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>this-&gt;twistPub<sp/>=</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;rosNode-&gt;advertise&lt;geometry_msgs::TwistWithCovarianceStamped&gt;(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;sensorOutputTopic<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_twist&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>ROS<sp/>messages<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;enableLocalNEDFrame)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>local<sp/>NED<sp/>frame<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlROSMsg.header.frame_id<sp/>=<sp/>this-&gt;tfLocalNEDFrame.child_frame_id_;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;twistROSMsg.header.frame_id<sp/>=<sp/>this-&gt;tfLocalNEDFrame.child_frame_id_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>link&apos;s<sp/>frame<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlROSMsg.header.frame_id<sp/>=<sp/>this-&gt;link-&gt;GetName();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;twistROSMsg.header.frame_id<sp/>=<sp/>this-&gt;link-&gt;GetName();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance<sp/>=<sp/>this-&gt;noiseSigma<sp/>*<sp/>this-&gt;noiseSigma;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>covariance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;dvlROSMsg.velocity_covariance[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity_covariance[0]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity_covariance[4]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity_covariance[8]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>36;<sp/>i++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[0]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[7]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[14]<sp/>=<sp/>variance;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[21]<sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[28]<sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.covariance[35]<sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>if<sp/>(this-&gt;gazeboMsgEnabled)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gazeboSensorOutputPub<sp/>=</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;gazeboNode-&gt;Advertise&lt;sensor_msgs::msgs::Dvl&gt;(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;robotNamespace<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>this-&gt;sensorOutputTopic,<sp/>1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1a2ce9099e6bd976d4d845bc9c16741125" kindref="member">DVLROSPlugin::OnUpdate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>common::UpdateInfo&amp;<sp/>_info)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>sensor<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>this-&gt;PublishState();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;EnableMeasurement(_info))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;enableLocalNEDFrame)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SendLocalNEDTransform();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ignition::math::Vector3d<sp/>bodyVel;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;UpdateBeamTransforms())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>true<sp/>body<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Temporary<sp/>solution<sp/>to<sp/>generate<sp/>DVL<sp/>message,<sp/>use<sp/>beams<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GAZEBO_MAJOR_VERSION<sp/>&gt;=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>bodyVel<sp/>=<sp/>this-&gt;link-&gt;RelativeLinearVel();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>bodyVel<sp/>=<sp/>this-&gt;link-&gt;GetRelativeLinearVel().Ign();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>bodyVel.X()<sp/>+=<sp/>this-&gt;GetGaussianNoise(this-&gt;noiseAmp);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>bodyVel.Y()<sp/>+=<sp/>this-&gt;GetGaussianNoise(this-&gt;noiseAmp);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>bodyVel.Z()<sp/>+=<sp/>this-&gt;GetGaussianNoise(this-&gt;noiseAmp);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;enableLocalNEDFrame)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>bodyVel<sp/>=<sp/>this-&gt;localNEDFrame.Rot().RotateVector(bodyVel);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;gazeboMsgEnabled)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::msgs::Dvl<sp/>dvlGazeboMsg;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance<sp/>=<sp/>this-&gt;noiseSigma<sp/>*<sp/>this-&gt;noiseSigma;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0<sp/>||<sp/>i<sp/>==<sp/>4<sp/>||<sp/>i<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvlGazeboMsg.add_linear_velocity_covariance(variance);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvlGazeboMsg.add_linear_velocity_covariance(0.0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>simulated<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>gazebo::msgs::Vector3d*<sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>gazebo::msgs::Vector3d();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;set_x(bodyVel.X());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;set_y(bodyVel.Y());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>v-&gt;set_z(bodyVel.Z());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>dvlGazeboMsg.set_allocated_linear_velocity(v);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;gazeboSensorOutputPub-&gt;Publish(dvlGazeboMsg);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Publish<sp/>ROS<sp/>DVL<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.header.stamp.sec<sp/>=<sp/>_info.simTime.sec;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.header.stamp.nsec<sp/>=<sp/>_info.simTime.nsec;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.altitude<sp/>=<sp/>this-&gt;altitude;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.beams<sp/>=<sp/>this-&gt;dvlBeamMsgs;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity.x<sp/>=<sp/>bodyVel.X();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity.y<sp/>=<sp/>bodyVel.Y();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>this-&gt;dvlROSMsg.velocity.z<sp/>=<sp/>bodyVel.Z();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>this-&gt;rosSensorOutputPub.publish(this-&gt;dvlROSMsg);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.header.stamp<sp/>=<sp/>this-&gt;dvlROSMsg.header.stamp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.twist.linear.x<sp/>=<sp/>bodyVel.X();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.twist.linear.y<sp/>=<sp/>bodyVel.Y();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>this-&gt;twistROSMsg.twist.twist.linear.z<sp/>=<sp/>bodyVel.Z();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>this-&gt;twistPub.publish(this-&gt;twistROSMsg);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>current<sp/>simulation<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>GAZEBO_MAJOR_VERSION<sp/>&gt;=<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;lastMeasurementTime<sp/>=<sp/>this-&gt;world-&gt;SimTime();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;lastMeasurementTime<sp/>=<sp/>this-&gt;world-&gt;GetSimTime();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1a6196f3792d05d27c197321fa760b6e0f" kindref="member">DVLROSPlugin::OnBeamCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::RangeConstPtr&amp;<sp/>_range0,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::RangeConstPtr&amp;<sp/>_range1,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::RangeConstPtr&amp;<sp/>_range2,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::RangeConstPtr&amp;<sp/>_range3)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_range0-&gt;range<sp/>==<sp/>_range0-&gt;min_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range1-&gt;range<sp/>==<sp/>_range1-&gt;min_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range2-&gt;range<sp/>==<sp/>_range2-&gt;min_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range3-&gt;range<sp/>==<sp/>_range3-&gt;min_range)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;altitude<sp/>=<sp/>ALTITUDE_OUT_OF_RANGE;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_range0-&gt;range<sp/>==<sp/>_range0-&gt;max_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range1-&gt;range<sp/>==<sp/>_range1-&gt;max_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range2-&gt;range<sp/>==<sp/>_range2-&gt;max_range<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_range3-&gt;range<sp/>==<sp/>_range3-&gt;max_range)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;altitude<sp/>=<sp/>ALTITUDE_OUT_OF_RANGE;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Compute<sp/>the<sp/>altitude<sp/>taking<sp/>into<sp/>account<sp/>the<sp/>vehicle&apos;s<sp/>orientation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>this-&gt;altitude<sp/>=</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>0.25<sp/>*<sp/>(_range0-&gt;range<sp/>+<sp/>_range1-&gt;range<sp/>+<sp/>_range2-&gt;range<sp/>+<sp/>_range3-&gt;range);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>this-&gt;dvlBeamMsgs[0].range<sp/>=<sp/>_range0-&gt;range;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>this-&gt;dvlBeamMsgs[1].range<sp/>=<sp/>_range1-&gt;range;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>this-&gt;dvlBeamMsgs[2].range<sp/>=<sp/>_range2-&gt;range;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>this-&gt;dvlBeamMsgs[3].range<sp/>=<sp/>_range3-&gt;range;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classgazebo_1_1_d_v_l_r_o_s_plugin_1aafc0126ca7732b8f01ca383dc3ace22f" kindref="member">DVLROSPlugin::UpdateBeamTransforms</ref>()</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;beamPoses.size()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>tf::StampedTransform<sp/>beamTransform;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::string<sp/>targetFrame,<sp/>sourceFrame;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;beamsLinkNames.size();<sp/>i++)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>sourceFrame<sp/>=<sp/>this-&gt;beamsLinkNames[i];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;enableLocalNEDFrame)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetFrame<sp/>=<sp/>this-&gt;link-&gt;GetName();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetFrame<sp/>=<sp/>tfLocalNEDFrame.child_frame_id_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::Time<sp/>now<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;transformListener.lookupTransform(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetFrame,<sp/>sourceFrame,<sp/>ros::Time(0),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(tf::TransformException<sp/>&amp;ex)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>ignition::math::Pose3d<sp/>pose;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.Pos()<sp/>=<sp/>ignition::math::Vector3d(</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getOrigin().x(),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getOrigin().y(),</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getOrigin().z());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.Rot()<sp/>=<sp/>ignition::math::Quaterniond(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getRotation().getW(),</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getRotation().getAxis().x(),</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getRotation().getAxis().y(),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beamTransform.getRotation().getAxis().z());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose<sp/>=<sp/>geometry_msgs::PoseStamped();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.header.frame_id<sp/>=<sp/>sourceFrame;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.position.x<sp/>=<sp/>beamTransform.getOrigin().x();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.position.y<sp/>=<sp/>beamTransform.getOrigin().y();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.position.z<sp/>=<sp/>beamTransform.getOrigin().z();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.orientation.x<sp/>=<sp/>beamTransform.getRotation().getAxis().x();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.orientation.y<sp/>=<sp/>beamTransform.getRotation().getAxis().y();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.orientation.z<sp/>=<sp/>beamTransform.getRotation().getAxis().z();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dvlBeamMsgs[i].pose.pose.orientation.w<sp/>=<sp/>beamTransform.getRotation().getW();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;beamPoses.push_back(pose);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">GZ_REGISTER_MODEL_PLUGIN(DVLROSPlugin)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/musamorena/catkin_ws/src/uuv_simulator/uuv_sensor_plugins/uuv_sensor_ros_plugins/src/DVLROSPlugin.cc"/>
  </compounddef>
</doxygen>
