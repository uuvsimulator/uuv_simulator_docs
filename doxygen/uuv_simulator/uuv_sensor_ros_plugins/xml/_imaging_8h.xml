<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_imaging_8h" kind="file" language="C++">
    <compoundname>Imaging.h</compoundname>
    <includes refid="_im_platform_8h" local="yes">ImPlatform.h</includes>
    <includes refid="_imaging_utils_8h" local="yes">ImagingUtils.h</includes>
    <incdepgraph>
      <node id="3031">
        <label>traceback.h</label>
        <link refid="traceback_8h_source"/>
        <childnode refid="3032" relation="include">
        </childnode>
      </node>
      <node id="3004">
        <label>typeslots.h</label>
        <link refid="typeslots_8h_source"/>
      </node>
      <node id="3053">
        <label>abstract.h</label>
        <link refid="abstract_8h_source"/>
      </node>
      <node id="2982">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h"/>
        <childnode refid="2983" relation="include">
        </childnode>
        <childnode refid="3064" relation="include">
        </childnode>
      </node>
      <node id="3008">
        <label>stdarg.h</label>
      </node>
      <node id="3063">
        <label>pyfpe.h</label>
        <link refid="pyfpe_8h_source"/>
      </node>
      <node id="3044">
        <label>pyarena.h</label>
        <link refid="pyarena_8h_source"/>
      </node>
      <node id="3035">
        <label>iterobject.h</label>
        <link refid="iterobject_8h_source"/>
      </node>
      <node id="3046">
        <label>pythonrun.h</label>
        <link refid="pythonrun_8h_source"/>
      </node>
      <node id="3019">
        <label>tupleobject.h</label>
        <link refid="tupleobject_8h_source"/>
      </node>
      <node id="3001">
        <label>object.h</label>
        <link refid="object_8h_source"/>
      </node>
      <node id="3036">
        <label>genobject.h</label>
        <link refid="genobject_8h_source"/>
      </node>
      <node id="2992">
        <label>assert.h</label>
      </node>
      <node id="3033">
        <label>sliceobject.h</label>
        <link refid="sliceobject_8h_source"/>
      </node>
      <node id="3013">
        <label>longintrepr.h</label>
        <link refid="longintrepr_8h_source"/>
      </node>
      <node id="3037">
        <label>descrobject.h</label>
        <link refid="descrobject_8h_source"/>
      </node>
      <node id="3042">
        <label>codecs.h</label>
        <link refid="codecs_8h_source"/>
      </node>
      <node id="3049">
        <label>sysmodule.h</label>
        <link refid="sysmodule_8h_source"/>
      </node>
      <node id="3024">
        <label>setobject.h</label>
        <link refid="setobject_8h_source"/>
      </node>
      <node id="3020">
        <label>listobject.h</label>
        <link refid="listobject_8h_source"/>
      </node>
      <node id="3050">
        <label>osmodule.h</label>
        <link refid="osmodule_8h_source"/>
      </node>
      <node id="2991">
        <label>stdlib.h</label>
      </node>
      <node id="3040">
        <label>structseq.h</label>
        <link refid="structseq_8h_source"/>
      </node>
      <node id="3064">
        <label>ImagingUtils.h</label>
        <link refid="_imaging_utils_8h_source"/>
      </node>
      <node id="3010">
        <label>unicodeobject.h</label>
        <link refid="unicodeobject_8h_source"/>
        <childnode refid="3008" relation="include">
        </childnode>
        <childnode refid="3011" relation="include">
        </childnode>
      </node>
      <node id="3055">
        <label>compile.h</label>
        <link refid="compile_8h_source"/>
        <childnode refid="3056" relation="include">
        </childnode>
      </node>
      <node id="3002">
        <label>pymem.h</label>
        <link refid="pymem_8h_source"/>
        <childnode refid="2993" relation="include">
        </childnode>
      </node>
      <node id="3039">
        <label>weakrefobject.h</label>
        <link refid="weakrefobject_8h_source"/>
      </node>
      <node id="3056">
        <label>code.h</label>
        <link refid="code_8h_source"/>
      </node>
      <node id="3000">
        <label>pytime.h</label>
        <link refid="pytime_8h_source"/>
        <childnode refid="2986" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
      </node>
      <node id="3060">
        <label>pystrcmp.h</label>
        <link refid="pystrcmp_8h_source"/>
      </node>
      <node id="3057">
        <label>eval.h</label>
        <link refid="eval_8h_source"/>
      </node>
      <node id="3059">
        <label>pystrtod.h</label>
        <link refid="pystrtod_8h_source"/>
      </node>
      <node id="2999">
        <label>pymath.h</label>
        <link refid="pymath_8h_source"/>
        <childnode refid="2986" relation="include">
        </childnode>
      </node>
      <node id="3007">
        <label>bytearrayobject.h</label>
        <link refid="bytearrayobject_8h_source"/>
        <childnode refid="3008" relation="include">
        </childnode>
      </node>
      <node id="2988">
        <label>limits.h</label>
      </node>
      <node id="3030">
        <label>pycapsule.h</label>
        <link refid="pycapsule_8h_source"/>
      </node>
      <node id="3052">
        <label>import.h</label>
        <link refid="import_8h_source"/>
      </node>
      <node id="2998">
        <label>pyatomic.h</label>
        <link refid="pyatomic_8h_source"/>
      </node>
      <node id="3003">
        <label>objimpl.h</label>
        <link refid="objimpl_8h_source"/>
        <childnode refid="3002" relation="include">
        </childnode>
      </node>
      <node id="3034">
        <label>cellobject.h</label>
        <link refid="cellobject_8h_source"/>
      </node>
      <node id="3062">
        <label>fileutils.h</label>
        <link refid="fileutils_8h_source"/>
      </node>
      <node id="2984">
        <label>Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2985" relation="include">
        </childnode>
        <childnode refid="2986" relation="include">
        </childnode>
        <childnode refid="2987" relation="include">
        </childnode>
        <childnode refid="2988" relation="include">
        </childnode>
        <childnode refid="2989" relation="include">
        </childnode>
        <childnode refid="2990" relation="include">
        </childnode>
        <childnode refid="2991" relation="include">
        </childnode>
        <childnode refid="2992" relation="include">
        </childnode>
        <childnode refid="2993" relation="include">
        </childnode>
        <childnode refid="2997" relation="include">
        </childnode>
        <childnode refid="2998" relation="include">
        </childnode>
        <childnode refid="2999" relation="include">
        </childnode>
        <childnode refid="3000" relation="include">
        </childnode>
        <childnode refid="3002" relation="include">
        </childnode>
        <childnode refid="3001" relation="include">
        </childnode>
        <childnode refid="3003" relation="include">
        </childnode>
        <childnode refid="3004" relation="include">
        </childnode>
        <childnode refid="3005" relation="include">
        </childnode>
        <childnode refid="3006" relation="include">
        </childnode>
        <childnode refid="3007" relation="include">
        </childnode>
        <childnode refid="3009" relation="include">
        </childnode>
        <childnode refid="3010" relation="include">
        </childnode>
        <childnode refid="3012" relation="include">
        </childnode>
        <childnode refid="3013" relation="include">
        </childnode>
        <childnode refid="3014" relation="include">
        </childnode>
        <childnode refid="3015" relation="include">
        </childnode>
        <childnode refid="3016" relation="include">
        </childnode>
        <childnode refid="3017" relation="include">
        </childnode>
        <childnode refid="3018" relation="include">
        </childnode>
        <childnode refid="3019" relation="include">
        </childnode>
        <childnode refid="3020" relation="include">
        </childnode>
        <childnode refid="3021" relation="include">
        </childnode>
        <childnode refid="3022" relation="include">
        </childnode>
        <childnode refid="3023" relation="include">
        </childnode>
        <childnode refid="3024" relation="include">
        </childnode>
        <childnode refid="3025" relation="include">
        </childnode>
        <childnode refid="3026" relation="include">
        </childnode>
        <childnode refid="3027" relation="include">
        </childnode>
        <childnode refid="3028" relation="include">
        </childnode>
        <childnode refid="3029" relation="include">
        </childnode>
        <childnode refid="3030" relation="include">
        </childnode>
        <childnode refid="3031" relation="include">
        </childnode>
        <childnode refid="3033" relation="include">
        </childnode>
        <childnode refid="3034" relation="include">
        </childnode>
        <childnode refid="3035" relation="include">
        </childnode>
        <childnode refid="3036" relation="include">
        </childnode>
        <childnode refid="3037" relation="include">
        </childnode>
        <childnode refid="3038" relation="include">
        </childnode>
        <childnode refid="3039" relation="include">
        </childnode>
        <childnode refid="3040" relation="include">
        </childnode>
        <childnode refid="3041" relation="include">
        </childnode>
        <childnode refid="3042" relation="include">
        </childnode>
        <childnode refid="3043" relation="include">
        </childnode>
        <childnode refid="3032" relation="include">
        </childnode>
        <childnode refid="3044" relation="include">
        </childnode>
        <childnode refid="3045" relation="include">
        </childnode>
        <childnode refid="3046" relation="include">
        </childnode>
        <childnode refid="3047" relation="include">
        </childnode>
        <childnode refid="3048" relation="include">
        </childnode>
        <childnode refid="3049" relation="include">
        </childnode>
        <childnode refid="3050" relation="include">
        </childnode>
        <childnode refid="3051" relation="include">
        </childnode>
        <childnode refid="3052" relation="include">
        </childnode>
        <childnode refid="3053" relation="include">
        </childnode>
        <childnode refid="3054" relation="include">
        </childnode>
        <childnode refid="3055" relation="include">
        </childnode>
        <childnode refid="3057" relation="include">
        </childnode>
        <childnode refid="3058" relation="include">
        </childnode>
        <childnode refid="3059" relation="include">
        </childnode>
        <childnode refid="3060" relation="include">
        </childnode>
        <childnode refid="3061" relation="include">
        </childnode>
        <childnode refid="3062" relation="include">
        </childnode>
        <childnode refid="3063" relation="include">
        </childnode>
      </node>
      <node id="2990">
        <label>string.h</label>
      </node>
      <node id="3016">
        <label>complexobject.h</label>
        <link refid="complexobject_8h_source"/>
      </node>
      <node id="3028">
        <label>classobject.h</label>
        <link refid="classobject_8h_source"/>
      </node>
      <node id="3029">
        <label>fileobject.h</label>
        <link refid="fileobject_8h_source"/>
      </node>
      <node id="3009">
        <label>bytesobject.h</label>
        <link refid="bytesobject_8h_source"/>
        <childnode refid="3008" relation="include">
        </childnode>
      </node>
      <node id="2983">
        <label>ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2984" relation="include">
        </childnode>
      </node>
      <node id="3038">
        <label>warnings.h</label>
        <link refid="warnings_8h_source"/>
      </node>
      <node id="3014">
        <label>boolobject.h</label>
        <link refid="boolobject_8h_source"/>
      </node>
      <node id="2986">
        <label>pyconfig.h</label>
        <link refid="pyconfig_8h_source"/>
      </node>
      <node id="3023">
        <label>enumobject.h</label>
        <link refid="enumobject_8h_source"/>
      </node>
      <node id="3027">
        <label>funcobject.h</label>
        <link refid="funcobject_8h_source"/>
      </node>
      <node id="3022">
        <label>odictobject.h</label>
        <link refid="odictobject_8h_source"/>
      </node>
      <node id="3061">
        <label>dtoa.h</label>
        <link refid="dtoa_8h_source"/>
      </node>
      <node id="3015">
        <label>floatobject.h</label>
        <link refid="floatobject_8h_source"/>
      </node>
      <node id="3012">
        <label>longobject.h</label>
        <link refid="longobject_8h_source"/>
      </node>
      <node id="3006">
        <label>pydebug.h</label>
        <link refid="pydebug_8h_source"/>
      </node>
      <node id="2985">
        <label>patchlevel.h</label>
        <link refid="patchlevel_8h_source"/>
      </node>
      <node id="3045">
        <label>modsupport.h</label>
        <link refid="modsupport_8h_source"/>
        <childnode refid="3008" relation="include">
        </childnode>
      </node>
      <node id="3025">
        <label>methodobject.h</label>
        <link refid="methodobject_8h_source"/>
      </node>
      <node id="2996">
        <label>time.h</label>
      </node>
      <node id="3021">
        <label>dictobject.h</label>
        <link refid="dictobject_8h_source"/>
      </node>
      <node id="2995">
        <label>math.h</label>
      </node>
      <node id="3018">
        <label>memoryobject.h</label>
        <link refid="memoryobject_8h_source"/>
      </node>
      <node id="2997">
        <label>pymacro.h</label>
        <link refid="pymacro_8h_source"/>
      </node>
      <node id="2987">
        <label>pymacconfig.h</label>
        <link refid="pymacconfig_8h_source"/>
      </node>
      <node id="3011">
        <label>ctype.h</label>
      </node>
      <node id="2993">
        <label>pyport.h</label>
        <link refid="pyport_8h_source"/>
        <childnode refid="2986" relation="include">
        </childnode>
        <childnode refid="2994" relation="include">
        </childnode>
        <childnode refid="2991" relation="include">
        </childnode>
        <childnode refid="2995" relation="include">
        </childnode>
        <childnode refid="2996" relation="include">
        </childnode>
      </node>
      <node id="3058">
        <label>pyctype.h</label>
        <link refid="pyctype_8h_source"/>
      </node>
      <node id="3043">
        <label>pyerrors.h</label>
        <link refid="pyerrors_8h_source"/>
        <childnode refid="3008" relation="include">
        </childnode>
      </node>
      <node id="3047">
        <label>pylifecycle.h</label>
        <link refid="pylifecycle_8h_source"/>
      </node>
      <node id="3026">
        <label>moduleobject.h</label>
        <link refid="moduleobject_8h_source"/>
      </node>
      <node id="3005">
        <label>pyhash.h</label>
        <link refid="pyhash_8h_source"/>
      </node>
      <node id="3054">
        <label>bltinmodule.h</label>
        <link refid="bltinmodule_8h_source"/>
      </node>
      <node id="3048">
        <label>ceval.h</label>
        <link refid="ceval_8h_source"/>
      </node>
      <node id="3041">
        <label>namespaceobject.h</label>
        <link refid="namespaceobject_8h_source"/>
      </node>
      <node id="3017">
        <label>rangeobject.h</label>
        <link refid="rangeobject_8h_source"/>
      </node>
      <node id="3032">
        <label>pystate.h</label>
        <link refid="pystate_8h_source"/>
      </node>
      <node id="2989">
        <label>stdio.h</label>
      </node>
      <node id="2994">
        <label>inttypes.h</label>
      </node>
      <node id="3051">
        <label>intrcheck.h</label>
        <link refid="intrcheck_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="struct_imaging_memory_block" prot="public">ImagingMemoryBlock</innerclass>
    <innerclass refid="struct_imaging_memory_instance" prot="public">ImagingMemoryInstance</innerclass>
    <innerclass refid="struct_imaging_access_instance" prot="public">ImagingAccessInstance</innerclass>
    <innerclass refid="struct_imaging_histogram_instance" prot="public">ImagingHistogramInstance</innerclass>
    <innerclass refid="struct_imaging_palette_instance" prot="public">ImagingPaletteInstance</innerclass>
    <innerclass refid="struct_imaging_memory_arena" prot="public">ImagingMemoryArena</innerclass>
    <innerclass refid="struct_imaging_color_item" prot="public">ImagingColorItem</innerclass>
    <innerclass refid="struct_imaging_codec_state_instance" prot="public">ImagingCodecStateInstance</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_imaging_8h_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.1415926535897932384626433832795</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="23" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a05b773174cec44bdf1faec4c1be6ae53" prot="public" static="no">
        <name>IMAGING_MAGIC</name>
        <initializer>&quot;PIL <ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref>&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="68" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a8636f4b6731499338ab66b10121e8553" prot="public" static="no">
        <name>IMAGING_TYPE_UINT8</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="71" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a8290e19855c996a49d7a35270b8964be" prot="public" static="no">
        <name>IMAGING_TYPE_INT32</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="72" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a591a551c74ff1b22f7db9028bdda5be2" prot="public" static="no">
        <name>IMAGING_TYPE_FLOAT32</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="73" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1ac9de344f8501eef5085b48ad4ce2eda1" prot="public" static="no">
        <name>IMAGING_TYPE_SPECIAL</name>
        <initializer>3 /* check mode for details */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="74" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a4631215db50fb3dc40fe542ca86f795e" prot="public" static="no">
        <name>IMAGING_MODE_LENGTH</name>
        <initializer>6+1 /* Band names (&quot;1&quot;, &quot;L&quot;, &quot;P&quot;, &quot;RGB&quot;, &quot;RGBA&quot;, &quot;CMYK&quot;, &quot;YCbCr&quot;, &quot;BGR;xy&quot;) */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="76" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1af01e881b7286b250d961cf172a39d72b" prot="public" static="no">
        <name>IMAGING_PIXEL_1</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image8[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="113" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1adf38922abd0be19064c5e365415d5831" prot="public" static="no">
        <name>IMAGING_PIXEL_L</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image8[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="114" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a9ba988b167e25b6448f5bf6c460e1cfa" prot="public" static="no">
        <name>IMAGING_PIXEL_LA</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="115" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a401f767b5cd7ce3aae846ba5d3d73713" prot="public" static="no">
        <name>IMAGING_PIXEL_P</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image8[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="116" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a501435d8795e1056b65ce4a580f04d87" prot="public" static="no">
        <name>IMAGING_PIXEL_PA</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="117" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1ab393477228a65484b3f2a7c397eeb50f" prot="public" static="no">
        <name>IMAGING_PIXEL_I</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image32[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="118" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1aa5bcd673c1b16d1e570a5465f8096e53" prot="public" static="no">
        <name>IMAGING_PIXEL_F</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((FLOAT32*)(im)-&gt;image32[y])[x])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="119" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a1f28f4579f81e46319c1cd247041e9eb" prot="public" static="no">
        <name>IMAGING_PIXEL_RGB</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="120" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a41f92676821aa07e26e4d0f56f655d59" prot="public" static="no">
        <name>IMAGING_PIXEL_RGBA</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="121" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1afa01fd91162d1ab38eb8927efe43f9fc" prot="public" static="no">
        <name>IMAGING_PIXEL_CMYK</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="122" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1aa473e13f83a5a9e9b00250d9dc167c68" prot="public" static="no">
        <name>IMAGING_PIXEL_YCbCr</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image[(y)][(x)*4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="123" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a48aba49941f3784e4a53a161e79baf71" prot="public" static="no">
        <name>IMAGING_PIXEL_UINT8</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image8[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="125" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a480bd36bc10edc9ae18bed68f1405ba4" prot="public" static="no">
        <name>IMAGING_PIXEL_INT32</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((im)-&gt;image32[(y)][(x)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="126" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1abb7c4fd633ee400ffd4dab6de1b8b76a" prot="public" static="no">
        <name>IMAGING_PIXEL_FLOAT32</name>
        <param><defname>im</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((FLOAT32*)(im)-&gt;image32[y])[x])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="127" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a2d137badb826c67b188e805f4f9fd57c" prot="public" static="no">
        <name>ImagingAccessDelete</name>
        <param><defname>im</defname></param>
        <param><defname>access</defname></param>
        <initializer>/* nop, for now */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="204" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1af362f6065cd6e6da61cba96b729e2d0c" prot="public" static="no">
        <name>ImagingPaletteCache</name>
        <param><defname>p</defname></param>
        <param><defname>r</defname></param>
        <param><defname>g</defname></param>
        <param><defname>b</defname></param>
        <initializer>p-&gt;cache[(r&gt;&gt;2) + (g&gt;&gt;2)*64 + (b&gt;&gt;2)*64*64]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="216" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a78f7cfc60376867ce7304962a5a77138" prot="public" static="no">
        <name>IMAGING_TRANSFORM_AFFINE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="243" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1aa3b9921fe1bbe51a6a3cbe579963a2f9" prot="public" static="no">
        <name>IMAGING_TRANSFORM_PERSPECTIVE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="244" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a0af5478e628f0aaec33b1f0f5ff37262" prot="public" static="no">
        <name>IMAGING_TRANSFORM_QUAD</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="245" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a597a135456fefc4dc48d5789a5db6f7c" prot="public" static="no">
        <name>IMAGING_TRANSFORM_NEAREST</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="249" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a119176ec0c602bcd1a8c1052dcfd3087" prot="public" static="no">
        <name>IMAGING_TRANSFORM_BOX</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="250" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1abc432ed4f582aa6d9fb3536ce9ef1954" prot="public" static="no">
        <name>IMAGING_TRANSFORM_BILINEAR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="251" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1acea5af4330759b241cd6da564a889940" prot="public" static="no">
        <name>IMAGING_TRANSFORM_HAMMING</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="252" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a2815b4ba941e297fd4469503b1decd91" prot="public" static="no">
        <name>IMAGING_TRANSFORM_BICUBIC</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="253" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a00a07a3c45f2be757defbe1a5c8bbf7a" prot="public" static="no">
        <name>IMAGING_TRANSFORM_LANCZOS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="254" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a9093cb43eb33df4173c6aa5c4bb8dfec" prot="public" static="no">
        <name>IMAGING_CODEC_END</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="527" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a9c0760a9c3cf7618573d08fca46ff47a" prot="public" static="no">
        <name>IMAGING_CODEC_OVERRUN</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="528" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a4b8db8327fc973c1a35423d6cccd19ab" prot="public" static="no">
        <name>IMAGING_CODEC_BROKEN</name>
        <initializer>-2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="529" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a5405d4d04cf1d95eb8a9d9de21fcbe6b" prot="public" static="no">
        <name>IMAGING_CODEC_UNKNOWN</name>
        <initializer>-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="530" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1a1355aaeda7b2d76417ceb536fa117b04" prot="public" static="no">
        <name>IMAGING_CODEC_CONFIG</name>
        <initializer>-8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="531" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_imaging_8h_1ae339d044ed59230023b6ae3247c9250d" prot="public" static="no">
        <name>IMAGING_CODEC_MEMORY</name>
        <initializer>-9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="532" column="9" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_imaging_8h_1a1ddcc9fec7b932cde349cc291d75f92d" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_memory_instance" kindref="compound">ImagingMemoryInstance</ref> *</type>
        <definition>typedef struct ImagingMemoryInstance* Imaging</definition>
        <argsstring></argsstring>
        <name>Imaging</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="60" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1a122d3dee36dc2d788ea88ce1a5de3eb1" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccessInstance</ref> *</type>
        <definition>typedef struct ImagingAccessInstance* ImagingAccess</definition>
        <argsstring></argsstring>
        <name>ImagingAccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="62" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1af03821da56225be1be7b874e6ec6552b" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogramInstance</ref> *</type>
        <definition>typedef struct ImagingHistogramInstance* ImagingHistogram</definition>
        <argsstring></argsstring>
        <name>ImagingHistogram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="63" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1a8ff38426991dd7fb3a9f1e85e8c62714" prot="public" static="no">
        <type>struct ImagingOutlineInstance *</type>
        <definition>typedef struct ImagingOutlineInstance* ImagingOutline</definition>
        <argsstring></argsstring>
        <name>ImagingOutline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="64" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1a317df82f3ca160cdeef0d0c3bd9a0f35" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPaletteInstance</ref> *</type>
        <definition>typedef struct ImagingPaletteInstance* ImagingPalette</definition>
        <argsstring></argsstring>
        <name>ImagingPalette</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="65" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1a970a683c48fda92cda0ff6905e6239bc" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref> *</type>
        <definition>typedef struct ImagingMemoryArena * ImagingMemoryArena</definition>
        <argsstring></argsstring>
        <name>ImagingMemoryArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1adb27f68b345a1cdcb50c743c6ff015a7" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* ImagingSectionCookie</definition>
        <argsstring></argsstring>
        <name>ImagingSectionCookie</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="224" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1aa9d8ea8ea98bbcc3fe791a1a9b41d9c5" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ImagingTransformMap) (double *X, double *Y, int x, int y, void *data)</definition>
        <argsstring>)(double *X, double *Y, int x, int y, void *data)</argsstring>
        <name>ImagingTransformMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="256" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1ab7565f87564a5b8af18c9d15e6b52dc2" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ImagingTransformFilter) (void *out, Imaging im, double x, double y)</definition>
        <argsstring>)(void *out, Imaging im, double x, double y)</argsstring>
        <name>ImagingTransformFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="258" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1ae95090548ebd251e1b5879c71f187c3b" prot="public" static="no">
        <type>struct <ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecStateInstance</ref> *</type>
        <definition>typedef struct ImagingCodecStateInstance* ImagingCodecState</definition>
        <argsstring></argsstring>
        <name>ImagingCodecState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="408" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1aae7f8561a64e4c25d1657e6d0198e0fb" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ImagingCodec) (Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</definition>
        <argsstring>)(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingCodec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="409" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_imaging_8h_1a6a6c1562536e1bc5293aa8c08e28aacd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ImagingShuffler) (UINT8 *out, const UINT8 *in, int pixels)</definition>
        <argsstring>)(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingShuffler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="487" column="1" bodyfile="/usr/include/python3.6m/Imaging.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_imaging_8h_1a703af5f7d4e7c8601885fe5d870f7360" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref></type>
        <definition>struct ImagingMemoryArena ImagingDefaultArena</definition>
        <argsstring></argsstring>
        <name>ImagingDefaultArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_imaging_8h_1a50088233aa7e80f1ca5ea875dc6c5441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingMemorySetBlocksMax</definition>
        <argsstring>(ImagingMemoryArena arena, int blocks_max)</argsstring>
        <name>ImagingMemorySetBlocksMax</name>
        <param>
          <type><ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref></type>
          <declname>arena</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8134e1f05e72cff026d4cba286447c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingMemoryClearCache</definition>
        <argsstring>(ImagingMemoryArena arena, int new_size)</argsstring>
        <name>ImagingMemoryClearCache</name>
        <param>
          <type><ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref></type>
          <declname>arena</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a2462a790d779cec0dce574aa130e32c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNew</definition>
        <argsstring>(const char *mode, int xsize, int ysize)</argsstring>
        <name>ImagingNew</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aabe00c44e4abe806884e1d7060320fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNewDirty</definition>
        <argsstring>(const char *mode, int xsize, int ysize)</argsstring>
        <name>ImagingNewDirty</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a7df092dc224a81b5699034c2cbf43344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNew2Dirty</definition>
        <argsstring>(const char *mode, Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingNew2Dirty</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a85eabfa1109396bf1ae0248b358a3602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingDelete</definition>
        <argsstring>(Imaging im)</argsstring>
        <name>ImagingDelete</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aab6cd6f71705130671a8f0f46dfeeefa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNewBlock</definition>
        <argsstring>(const char *mode, int xsize, int ysize)</argsstring>
        <name>ImagingNewBlock</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1add6bbbb78af1efe9cbff40eff8bf1b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNewMap</definition>
        <argsstring>(const char *filename, int readonly, const char *mode, int xsize, int ysize)</argsstring>
        <name>ImagingNewMap</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>readonly</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1afcbb3bef08d218cc95d5a755ed7f0a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNewPrologue</definition>
        <argsstring>(const char *mode, int xsize, int ysize)</argsstring>
        <name>ImagingNewPrologue</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6aa0bbb4b70381a5cc057a3434ffdc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNewPrologueSubtype</definition>
        <argsstring>(const char *mode, int xsize, int ysize, int structure_size)</argsstring>
        <name>ImagingNewPrologueSubtype</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>structure_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa2651c22117b0b29723d6dcb58425106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingCopyPalette</definition>
        <argsstring>(Imaging destination, Imaging source)</argsstring>
        <name>ImagingCopyPalette</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>destination</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a86027f3a929b172864893135ca164625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingHistogramDelete</definition>
        <argsstring>(ImagingHistogram histogram)</argsstring>
        <name>ImagingHistogramDelete</name>
        <param>
          <type><ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogram</ref></type>
          <declname>histogram</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0d2536ab79d2657cd43e5a8639fecc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingAccessInit</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingAccessInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8d1f1936673b72bab3d5094d7020cb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccess</ref></type>
        <definition>ImagingAccess ImagingAccessNew</definition>
        <argsstring>(Imaging im)</argsstring>
        <name>ImagingAccessNew</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a201de6bddf50605fc3e8ca43e2b02787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ImagingAccessDelete</definition>
        <argsstring>(Imaging im, ImagingAccess access)</argsstring>
        <name>_ImagingAccessDelete</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccess</ref></type>
          <declname>access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3b6c992a45cfc30b4679563f77fdded1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
        <definition>ImagingPalette ImagingPaletteNew</definition>
        <argsstring>(const char *mode)</argsstring>
        <name>ImagingPaletteNew</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1adb914a517c412fed932bec02944777f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
        <definition>ImagingPalette ImagingPaletteNewBrowser</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingPaletteNewBrowser</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6a255ce2df0ef4a7b12dd31c84f71386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
        <definition>ImagingPalette ImagingPaletteDuplicate</definition>
        <argsstring>(ImagingPalette palette)</argsstring>
        <name>ImagingPaletteDuplicate</name>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a46c3221140d95a6af1422e6ab1f0701a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingPaletteDelete</definition>
        <argsstring>(ImagingPalette palette)</argsstring>
        <name>ImagingPaletteDelete</name>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a475b398696b6c6f381fd2d170b34bbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPaletteCachePrepare</definition>
        <argsstring>(ImagingPalette palette)</argsstring>
        <name>ImagingPaletteCachePrepare</name>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9f39c3469956ef1b19e7f854f8e917a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingPaletteCacheUpdate</definition>
        <argsstring>(ImagingPalette palette, int r, int g, int b)</argsstring>
        <name>ImagingPaletteCacheUpdate</name>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1abea8620a35cee99ec32ab1250a5f5b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingPaletteCacheDelete</definition>
        <argsstring>(ImagingPalette palette)</argsstring>
        <name>ImagingPaletteCacheDelete</name>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ab25cf0a16d0db840d426b9499d8310af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingQuantize</definition>
        <argsstring>(Imaging im, int colours, int mode, int kmeans)</argsstring>
        <name>ImagingQuantize</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colours</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kmeans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8c716491f33b31da7f772659125925b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingSectionEnter</definition>
        <argsstring>(ImagingSectionCookie *cookie)</argsstring>
        <name>ImagingSectionEnter</name>
        <param>
          <type>ImagingSectionCookie *</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a7e0b2d74fe840a8a83f67476d984df6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingSectionLeave</definition>
        <argsstring>(ImagingSectionCookie *cookie)</argsstring>
        <name>ImagingSectionLeave</name>
        <param>
          <type>ImagingSectionCookie *</type>
          <declname>cookie</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4202fc3dca2d06eb470c496f5ed6a7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ImagingError_IOError</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingError_IOError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9f9dd1b9ac8374f15b760dde6ec3f35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ImagingError_MemoryError</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingError_MemoryError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a16372b9751ae260516b3d54df0c8cb3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ImagingError_ModeError</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingError_ModeError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a7b1910dbc7ea205242a745d28641cf8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ImagingError_Mismatch</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingError_Mismatch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a5cc0bb9d6a740f8448adf5fd085d937e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* ImagingError_ValueError</definition>
        <argsstring>(const char *message)</argsstring>
        <name>ImagingError_ValueError</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4cfe35064f8a256114d5d514b57ab7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingError_Clear</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingError_Clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1abd65f13b8d40b155fa205e8ac1e5165b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingAlphaComposite</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingAlphaComposite</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af0b2cdc56f3f32e4cee24f388b336b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingBlend</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2, float alpha)</argsstring>
        <name>ImagingBlend</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9857c8c2dac71c694d2a94a5e6c8809a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingCopy</definition>
        <argsstring>(Imaging im)</argsstring>
        <name>ImagingCopy</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ac558026a51d86c30abeea4a29b1b6604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingConvert</definition>
        <argsstring>(Imaging im, const char *mode, ImagingPalette palette, int dither)</argsstring>
        <name>ImagingConvert</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref></type>
          <declname>palette</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dither</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ae66c96faa90bdafa969237f35ecd26cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingConvertInPlace</definition>
        <argsstring>(Imaging im, const char *mode)</argsstring>
        <name>ImagingConvertInPlace</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a561d2b9a058b1c43f76dada7562b53c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingConvertMatrix</definition>
        <argsstring>(Imaging im, const char *mode, float m[])</argsstring>
        <name>ImagingConvertMatrix</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a032e5d1798a824eea39a3cf183919a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingConvertTransparent</definition>
        <argsstring>(Imaging im, const char *mode, int r, int g, int b)</argsstring>
        <name>ImagingConvertTransparent</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a46e72a69e8a045e60c256e5878c79cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingCrop</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1)</argsstring>
        <name>ImagingCrop</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0a49e10ba143e16b4ec011d08191f20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingExpand</definition>
        <argsstring>(Imaging im, int x, int y, int mode)</argsstring>
        <name>ImagingExpand</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a057765299942ca231c595619f221ff0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFill</definition>
        <argsstring>(Imaging im, const void *ink)</argsstring>
        <name>ImagingFill</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ab93ef3878ad607f504bf437fc6b4064a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingFill2</definition>
        <argsstring>(Imaging into, const void *ink, Imaging mask, int x0, int y0, int x1, int y1)</argsstring>
        <name>ImagingFill2</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>into</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ad9c9bb55e9fc14562624916fca052908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFillBand</definition>
        <argsstring>(Imaging im, int band, int color)</argsstring>
        <name>ImagingFillBand</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>band</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af522a4844b33d6e76dfd9be4f47c031e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFillLinearGradient</definition>
        <argsstring>(const char *mode)</argsstring>
        <name>ImagingFillLinearGradient</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a1523aa52d63f2b4c5f4e2d72717968fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFillRadialGradient</definition>
        <argsstring>(const char *mode)</argsstring>
        <name>ImagingFillRadialGradient</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a1e1e46bdfb945e5d8a2c224d6534f7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFilter</definition>
        <argsstring>(Imaging im, int xsize, int ysize, const FLOAT32 *kernel, FLOAT32 offset)</argsstring>
        <name>ImagingFilter</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <param>
          <type>const FLOAT32 *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>FLOAT32</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0343a08dde1154c4639b727122e1c925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFlipLeftRight</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingFlipLeftRight</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ad5f64dbee6440b4f3a18e92807ec4631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingFlipTopBottom</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingFlipTopBottom</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6b7ab447f45c74c9b8a637bc5907b606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingGaussianBlur</definition>
        <argsstring>(Imaging imOut, Imaging imIn, float radius, int passes)</argsstring>
        <name>ImagingGaussianBlur</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>passes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aca7ff688973293fc049f4df80a6c932f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingGetBand</definition>
        <argsstring>(Imaging im, int band)</argsstring>
        <name>ImagingGetBand</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>band</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a63c15931c3580b226ba66c2ee7563b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingMerge</definition>
        <argsstring>(const char *mode, Imaging bands[4])</argsstring>
        <name>ImagingMerge</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>bands</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4f5800b0d646e9911687dfc8e3eb3cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingSplit</definition>
        <argsstring>(Imaging im, Imaging bands[4])</argsstring>
        <name>ImagingSplit</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>bands</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa73be89f085986dfa94de92823b95c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingGetBBox</definition>
        <argsstring>(Imaging im, int bbox[4])</argsstring>
        <name>ImagingGetBBox</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bbox</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ac9b9daf51e490f363285cc293859137d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_color_item" kindref="compound">ImagingColorItem</ref> *</type>
        <definition>ImagingColorItem* ImagingGetColors</definition>
        <argsstring>(Imaging im, int maxcolors, int *colors)</argsstring>
        <name>ImagingGetColors</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxcolors</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af34e9e28f43fd95df4118da36826d2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingGetExtrema</definition>
        <argsstring>(Imaging im, void *extrema)</argsstring>
        <name>ImagingGetExtrema</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>extrema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9fdb09a6ac498462cb5a1bc1f58ee782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingGetProjection</definition>
        <argsstring>(Imaging im, UINT8 *xproj, UINT8 *yproj)</argsstring>
        <name>ImagingGetProjection</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>xproj</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>yproj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a168158f34909c99234afcc71a30b7e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogram</ref></type>
        <definition>ImagingHistogram ImagingGetHistogram</definition>
        <argsstring>(Imaging im, Imaging mask, void *extrema)</argsstring>
        <name>ImagingGetHistogram</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>extrema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aaf4538bee0a6fe8a2fcf090f9f3118d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingModeFilter</definition>
        <argsstring>(Imaging im, int size)</argsstring>
        <name>ImagingModeFilter</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ae913bc157ffe623122878afc2f17fc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingNegative</definition>
        <argsstring>(Imaging im)</argsstring>
        <name>ImagingNegative</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a676f562c4ba1c5ef514cb157a267d54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingOffset</definition>
        <argsstring>(Imaging im, int xoffset, int yoffset)</argsstring>
        <name>ImagingOffset</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xoffset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>yoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8ff0bff86d4d29d2bbe5faebcd7e45c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPaste</definition>
        <argsstring>(Imaging into, Imaging im, Imaging mask, int x0, int y0, int x1, int y1)</argsstring>
        <name>ImagingPaste</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>into</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3b5731075121e82ffde7622db6468895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingPoint</definition>
        <argsstring>(Imaging im, const char *tablemode, const void *table)</argsstring>
        <name>ImagingPoint</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tablemode</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a7210608999ec96472732fcccc210c1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingPointTransform</definition>
        <argsstring>(Imaging imIn, double scale, double offset)</argsstring>
        <name>ImagingPointTransform</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>double</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af5f91f316aa32731e504697499e2a29c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingPutBand</definition>
        <argsstring>(Imaging im, Imaging imIn, int band)</argsstring>
        <name>ImagingPutBand</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>band</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a844dccac77744c34bc504d5cd0e0afd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingRankFilter</definition>
        <argsstring>(Imaging im, int size, int rank)</argsstring>
        <name>ImagingRankFilter</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa552856377a68413f65f6baf93e8e77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingRotate90</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingRotate90</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1adb05613a2db6cc480dd488057d8588c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingRotate180</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingRotate180</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ad1d66897dd05c4e38b17938b703521b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingRotate270</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingRotate270</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aba883f76656c06a6bb4edfdeb58c7b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingTranspose</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingTranspose</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ac4192d1f04011e66b8dffc22095defec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingTransverse</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingTransverse</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a300a1a0695956e2d850d6e4393153fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingResample</definition>
        <argsstring>(Imaging imIn, int xsize, int ysize, int filter, float box[4])</argsstring>
        <name>ImagingResample</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>float</type>
          <declname>box</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a938580ca3a8996535c7a8079b8f8bf79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingTransform</definition>
        <argsstring>(Imaging imOut, Imaging imIn, int method, int x0, int y0, int x1, int y1, double *a, int filter, int fill)</argsstring>
        <name>ImagingTransform</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a96a07c2a9d045703bc3d804fbdb6ee83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingUnsharpMask</definition>
        <argsstring>(Imaging imOut, Imaging im, float radius, int percent, int threshold)</argsstring>
        <name>ImagingUnsharpMask</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>percent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8140cb58a8a91be0fad7674f5705f1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingBoxBlur</definition>
        <argsstring>(Imaging imOut, Imaging imIn, float radius, int n)</argsstring>
        <name>ImagingBoxBlur</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ae8b2b133250cdcca765156b7de8bd7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingCopy2</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingCopy2</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9635d717b3947286eda3451f07537e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingConvert2</definition>
        <argsstring>(Imaging imOut, Imaging imIn)</argsstring>
        <name>ImagingConvert2</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imOut</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a46f99492afc891ab201dc471bbc94174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopLighter</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopLighter</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4a5e551cd8bfba9f86adfced4cf447fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopDarker</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopDarker</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3a0ebddcf77b81b7eaf311e7720d266c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopDifference</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopDifference</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a1f9dd77754706a00c1c72564c782c817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopMultiply</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopMultiply</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af9f6744cad63ffc431944d9209bfada5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopScreen</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopScreen</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9832a128b7494884992af2a717f30561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopAdd</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2, float scale, int offset)</argsstring>
        <name>ImagingChopAdd</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1adc30f0ef18d3c1b5d518340e49071277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopSubtract</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2, float scale, int offset)</argsstring>
        <name>ImagingChopSubtract</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a5e99f37a40e1e121f5d8c5c8eb36a513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopAddModulo</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopAddModulo</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1acff7a0609404d8a0b568f702b85d448a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopSubtractModulo</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopSubtractModulo</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ad47c8e86452017e1f25f5ac42039d12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopAnd</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopAnd</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ac4296362da531fb89ccc32baf201cbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopOr</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopOr</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a041adfd901660ecbaf86a2ec112b87d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingChopXor</definition>
        <argsstring>(Imaging imIn1, Imaging imIn2)</argsstring>
        <name>ImagingChopXor</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn1</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6e884894dcab3300d95125d112280479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingCrack</definition>
        <argsstring>(Imaging im, int x0, int y0)</argsstring>
        <name>ImagingCrack</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6defb212bed6da37d9f2e06d9ded1a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawArc</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, float start, float end, const void *ink, int op)</argsstring>
        <name>ImagingDrawArc</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a00810c71ea7a0b08869d5c3b3534e760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawBitmap</definition>
        <argsstring>(Imaging im, int x0, int y0, Imaging bitmap, const void *ink, int op)</argsstring>
        <name>ImagingDrawBitmap</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa60cc465dea03214f68d1dd1303ecd64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawChord</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, float start, float end, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawChord</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4c2597631ee3180257d70c7e75ca80d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawEllipse</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawEllipse</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ae68ac677b7acb2178ae93bf4ef938cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawLine</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, const void *ink, int op)</argsstring>
        <name>ImagingDrawLine</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a770f9ed033b8df752c11656216b16c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawWideLine</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, const void *ink, int width, int op)</argsstring>
        <name>ImagingDrawWideLine</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9091e5a614ccb05692a3ab91f21fbf6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawPieslice</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, float start, float end, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawPieslice</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a4d40c13d5eb040d666986f2ebcba94e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawPoint</definition>
        <argsstring>(Imaging im, int x, int y, const void *ink, int op)</argsstring>
        <name>ImagingDrawPoint</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aec2fe536d9dc0ee501821fe1987d62da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawPolygon</definition>
        <argsstring>(Imaging im, int points, int *xy, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawPolygon</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1afd001477e59ccaf28ca72b6807749117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawRectangle</definition>
        <argsstring>(Imaging im, int x0, int y0, int x1, int y1, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawRectangle</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6c36eda2b3878e73d5171f4dfe31b992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ImagingOutline</type>
        <definition>ImagingOutline ImagingOutlineNew</definition>
        <argsstring>(void)</argsstring>
        <name>ImagingOutlineNew</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aac3e085ed2d1551a7cd3e35905fb5a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingOutlineDelete</definition>
        <argsstring>(ImagingOutline outline)</argsstring>
        <name>ImagingOutlineDelete</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9d657909db1d1fb766e27c137089389f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingDrawOutline</definition>
        <argsstring>(Imaging im, ImagingOutline outline, const void *ink, int fill, int op)</argsstring>
        <name>ImagingDrawOutline</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ink</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fill</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a95df2a9297fe609e7a0502ad74b1dc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingOutlineMove</definition>
        <argsstring>(ImagingOutline outline, float x, float y)</argsstring>
        <name>ImagingOutlineMove</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1acb9ddb1052201d0228d43abd2508d5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingOutlineLine</definition>
        <argsstring>(ImagingOutline outline, float x, float y)</argsstring>
        <name>ImagingOutlineLine</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af47f07d76e14aded3db6394022ed4145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingOutlineCurve</definition>
        <argsstring>(ImagingOutline outline, float x1, float y1, float x2, float y2, float x3, float y3)</argsstring>
        <name>ImagingOutlineCurve</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aeb6b31be0a0c0471c1cd70ce881f7d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingOutlineTransform</definition>
        <argsstring>(ImagingOutline outline, double a[6])</argsstring>
        <name>ImagingOutlineTransform</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a2ba03538544954afebbf63f8b38b36f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingOutlineClose</definition>
        <argsstring>(ImagingOutline outline)</argsstring>
        <name>ImagingOutlineClose</name>
        <param>
          <type>ImagingOutline</type>
          <declname>outline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a93cfdf1332b08a83e5c895cb017f927f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingEffectSpread</definition>
        <argsstring>(Imaging imIn, int distance)</argsstring>
        <name>ImagingEffectSpread</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>imIn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3e84cb87d588b30e4bcd0351c8d099ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingEffectNoise</definition>
        <argsstring>(int xsize, int ysize, float sigma)</argsstring>
        <name>ImagingEffectNoise</name>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa2d432a8f425a88894cb577c950c4563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingEffectMandelbrot</definition>
        <argsstring>(int xsize, int ysize, double extent[4], int quality)</argsstring>
        <name>ImagingEffectMandelbrot</name>
        <param>
          <type>int</type>
          <declname>xsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ysize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>extent</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9f8a71f8236f598afdc7d6c74135b697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingToString</definition>
        <argsstring>(Imaging im, int orientation, char *buffer)</argsstring>
        <name>ImagingToString</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ab09ab571249bbd36e5d0720ef2eab5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingFromString</definition>
        <argsstring>(Imaging im, int orientation, char *buffer)</argsstring>
        <name>ImagingFromString</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a84315b1851eb5ce386e9fa24e89fe2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
        <definition>Imaging ImagingOpenPPM</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>ImagingOpenPPM</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a9df5b79f88ff3adcb07590cd89b7a54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingSavePPM</definition>
        <argsstring>(Imaging im, const char *filename)</argsstring>
        <name>ImagingSavePPM</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aeff088c330f44a69fb0dd725d4e8d861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 ImagingCRC32</definition>
        <argsstring>(UINT32 crc, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingCRC32</name>
        <param>
          <type>UINT32</type>
          <declname>crc</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1acd78e95745d5d9bf2fccc6d5205f641e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingBcnDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingBcnDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3eed29f16cae1271266deb0e3c033a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingBitDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingBitDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1af1a01a383f5042c95bd53d919daf9779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingEpsEncode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingEpsEncode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1abe2289bb2766e0a938b6d8a4e489d53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingFliDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingFliDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa6b3aa03bf69ed94709d2b4f4dda4be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingGifDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingGifDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6b2db3ec803cc7fabe839df6f97240ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingGifEncode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingGifEncode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0b9b6ff47358a6059298611d04d8f26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingHexDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingHexDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1afb2edac710ec0604488915bc9644f18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingMspDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingMspDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a77473e4118358dc652bc2e47dd6398b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPackbitsDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingPackbitsDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a73113960b77daef41078f2733628bbfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPcdDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingPcdDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a73aaae62a4e8dc4b3352009baa999363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPcxDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingPcxDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0de88f70fee37f7a24a1d3086606d73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingPcxEncode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingPcxEncode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a21742febc58188307329fdf49ae51823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingRawDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingRawDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ae0009fb1458a67c9346b2f8c611eff64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingRawEncode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingRawEncode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a61e965edc7975a9d7d2b87e328330122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingSgiRleDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingSgiRleDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a0429733f31474f39ab305717abc23a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingSgiRleDecodeCleanup</definition>
        <argsstring>(ImagingCodecState state)</argsstring>
        <name>ImagingSgiRleDecodeCleanup</name>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a8a48767a7d6935f706b9ebc87ffe133a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingSunRleDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingSunRleDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a840f2817cabdf474ba0c7da0f66fec02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingTgaRleDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingTgaRleDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a3b38476912f7837f5590f0885fa473b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingXbmDecode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingXbmDecode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a2d8c53a2f90cc7bc7f1335b35593fde9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImagingXbmEncode</definition>
        <argsstring>(Imaging im, ImagingCodecState state, UINT8 *buffer, int bytes)</argsstring>
        <name>ImagingXbmEncode</name>
        <param>
          <type><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref></type>
          <declname>im</declname>
        </param>
        <param>
          <type><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>UINT8 *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a81426cda81e9667a77ef6f19d5f02336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingPackBGR</definition>
        <argsstring>(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingPackBGR</name>
        <param>
          <type>UINT8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const UINT8 *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a2a860e2ee5a3fd5e373034b2200307cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingUnpackYCC</definition>
        <argsstring>(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingUnpackYCC</name>
        <param>
          <type>UINT8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const UINT8 *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a1491d6493f59e348c22578662b0de384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingUnpackYCCA</definition>
        <argsstring>(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingUnpackYCCA</name>
        <param>
          <type>UINT8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const UINT8 *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a09283ef5a83e742e4ad9e884544ff976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingConvertRGB2YCbCr</definition>
        <argsstring>(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingConvertRGB2YCbCr</name>
        <param>
          <type>UINT8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const UINT8 *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ade8683f6482f654280f64c972127df76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImagingConvertYCbCr2RGB</definition>
        <argsstring>(UINT8 *out, const UINT8 *in, int pixels)</argsstring>
        <name>ImagingConvertYCbCr2RGB</name>
        <param>
          <type>UINT8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const UINT8 *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ad7fd512f91e7a7886410f763fb402a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ImagingShuffler</type>
        <definition>ImagingShuffler ImagingFindUnpacker</definition>
        <argsstring>(const char *mode, const char *rawmode, int *bits_out)</argsstring>
        <name>ImagingFindUnpacker</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rawmode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>bits_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a284a1bbab06a682e6602bfc7e13dff58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ImagingShuffler</type>
        <definition>ImagingShuffler ImagingFindPacker</definition>
        <argsstring>(const char *mode, const char *rawmode, int *bits_out)</argsstring>
        <name>ImagingFindPacker</name>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rawmode</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>bits_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a052d8696148a4273c469c4b4e89667a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t _imaging_read_pyFd</definition>
        <argsstring>(PyObject *fd, char *dest, Py_ssize_t bytes)</argsstring>
        <name>_imaging_read_pyFd</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1ade84d028baac9fafc46d461af8c9789b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t _imaging_write_pyFd</definition>
        <argsstring>(PyObject *fd, char *src, Py_ssize_t bytes)</argsstring>
        <name>_imaging_write_pyFd</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1aa3ce6f6f57413b26abeedf38bdf7b8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _imaging_seek_pyFd</definition>
        <argsstring>(PyObject *fd, Py_ssize_t offset, int whence)</argsstring>
        <name>_imaging_seek_pyFd</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>Py_ssize_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_imaging_8h_1a6ebedd08784b5d0cca094587041807df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t _imaging_tell_pyFd</definition>
        <argsstring>(PyObject *fd)</argsstring>
        <name>_imaging_tell_pyFd</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/Imaging.h" line="522" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>Python<sp/>Imaging<sp/>Library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>$Id$</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>declarations<sp/>for<sp/>the<sp/>imaging<sp/>core<sp/>library</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1997-2005<sp/>by<sp/>Secret<sp/>Labs<sp/>AB</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1995-2005<sp/>by<sp/>Fredrik<sp/>Lundh</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>README<sp/>file<sp/>for<sp/>information<sp/>on<sp/>usage<sp/>and<sp/>redistribution.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ImPlatform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_PI<sp/><sp/><sp/><sp/>3.1415926535897932384626433832795</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>Image<sp/>data<sp/>organization:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>mode<sp/><sp/><sp/><sp/><sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>order</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>-------------------------------</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>L<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>P<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>(32-bit<sp/>integer,<sp/>native<sp/>byte<sp/>order)</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>(32-bit<sp/>IEEE<sp/>float,<sp/>native<sp/>byte<sp/>order)</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>RGB<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R,<sp/>G,<sp/>B,<sp/>-</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>RGBA<sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R,<sp/>G,<sp/>B,<sp/>A</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>CMYK<sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C,<sp/>M,<sp/>Y,<sp/>K</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>YCbCr<sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y,<sp/>Cb,<sp/>Cr,<sp/>-</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Lab<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L,<sp/>a,<sp/>b,<sp/>-</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>experimental<sp/>modes<sp/>(incomplete):</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>LA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L,<sp/>-,<sp/>-,<sp/>A</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>PA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P,<sp/>-,<sp/>-,<sp/>A</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>I;16<sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>(16-bit<sp/>integer,<sp/>native<sp/>byte<sp/>order)</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>&quot;P&quot;<sp/>is<sp/>an<sp/>8-bit<sp/>palette<sp/>mode,<sp/>which<sp/>should<sp/>be<sp/>mapped<sp/>through<sp/>the</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>palette<sp/>member<sp/>to<sp/>get<sp/>an<sp/>output<sp/>image.<sp/><sp/>Check<sp/>palette-&gt;mode<sp/>to</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>find<sp/>the<sp/>corresponding<sp/>&quot;real&quot;<sp/>mode.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>For<sp/>information<sp/>on<sp/>how<sp/>to<sp/>access<sp/>Imaging<sp/>objects<sp/>from<sp/>your<sp/>own<sp/>C</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>extensions,<sp/>see<sp/>http://www.effbot.org/zone/pil-extending.htm</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_memory_instance" kindref="compound">ImagingMemoryInstance</ref>*<sp/><ref refid="struct_imaging_memory_instance" kindref="compound">Imaging</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccessInstance</ref>*<sp/><ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccess</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogramInstance</ref>*<sp/><ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogram</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ImagingOutlineInstance*<sp/>ImagingOutline;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPaletteInstance</ref>*<sp/><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPalette</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>handle<sp/>magics<sp/>(used<sp/>with<sp/>PyCObject).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_MAGIC<sp/>&quot;PIL<sp/>Imaging&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pixel<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TYPE_UINT8<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TYPE_INT32<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TYPE_FLOAT32<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TYPE_SPECIAL<sp/>3<sp/></highlight><highlight class="comment">/*<sp/>check<sp/>mode<sp/>for<sp/>details<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_MODE_LENGTH<sp/>6+1<sp/></highlight><highlight class="comment">/*<sp/>Band<sp/>names<sp/>(&quot;1&quot;,<sp/>&quot;L&quot;,<sp/>&quot;P&quot;,<sp/>&quot;RGB&quot;,<sp/>&quot;RGBA&quot;,<sp/>&quot;CMYK&quot;,<sp/>&quot;YCbCr&quot;,<sp/>&quot;BGR;xy&quot;)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="struct_imaging_memory_block" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="struct_imaging_memory_block" kindref="compound">ImagingMemoryBlock</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="struct_imaging_memory_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_memory_instance" kindref="compound">ImagingMemoryInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mode[IMAGING_MODE_LENGTH];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Band<sp/>names<sp/>(&quot;1&quot;,<sp/>&quot;L&quot;,<sp/>&quot;P&quot;,<sp/>&quot;RGB&quot;,<sp/>&quot;RGBA&quot;,<sp/>&quot;CMYK&quot;,<sp/>&quot;YCbCr&quot;,<sp/>&quot;BGR;xy&quot;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>type<sp/>(IMAGING_TYPE_*)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Depth<sp/>(ignored<sp/>in<sp/>this<sp/>version)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bands;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>bands<sp/>(1,<sp/>2,<sp/>3,<sp/>or<sp/>4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Image<sp/>dimension.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Colour<sp/>palette<sp/>(for<sp/>&quot;P&quot;<sp/>images<sp/>only)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>ImagingPalette<sp/>palette;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>pointers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT8<sp/>**image8;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>for<sp/>8-bit<sp/>images<sp/>(pixelsize=1).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>INT32<sp/>**image32;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>for<sp/>32-bit<sp/>images<sp/>(pixelsize=4).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Internals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**image;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Actual<sp/>raster<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>data<sp/>is<sp/>allocated<sp/>in<sp/>a<sp/>single<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_imaging_memory_block" kindref="compound">ImagingMemoryBlock</ref><sp/>*blocks;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Memory<sp/>blocks<sp/>for<sp/>pixel<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelsize;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>a<sp/>pixel,<sp/>in<sp/>bytes<sp/>(1,<sp/>2<sp/>or<sp/>4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linesize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>a<sp/>line,<sp/>in<sp/>bytes<sp/>(xsize<sp/>*<sp/>pixelsize)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Virtual<sp/>methods<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*destroy)(Imaging<sp/>im);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_1(im,x,y)<sp/>((im)-&gt;image8[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_L(im,x,y)<sp/>((im)-&gt;image8[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_LA(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_P(im,x,y)<sp/>((im)-&gt;image8[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_PA(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_I(im,x,y)<sp/>((im)-&gt;image32[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_F(im,x,y)<sp/>(((FLOAT32*)(im)-&gt;image32[y])[x])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_RGB(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_RGBA(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_CMYK(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_YCbCr(im,x,y)<sp/>((im)-&gt;image[(y)][(x)*4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_UINT8(im,x,y)<sp/>((im)-&gt;image8[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_INT32(im,x,y)<sp/>((im)-&gt;image32[(y)][(x)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_PIXEL_FLOAT32(im,x,y)<sp/>(((FLOAT32*)(im)-&gt;image32[y])[x])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="struct_imaging_access_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_access_instance" kindref="compound">ImagingAccessInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*line)(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>void<sp/>(*get_pixel)(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pixel);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>void<sp/>(*put_pixel)(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pixel);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="struct_imaging_histogram_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_histogram_instance" kindref="compound">ImagingHistogramInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mode[IMAGING_MODE_LENGTH];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Band<sp/>names<sp/>(of<sp/>corresponding<sp/>source<sp/>image)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bands;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>bands<sp/>(1,<sp/>3,<sp/>or<sp/>4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*histogram;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Histogram<sp/>(bands*256<sp/>longs)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="struct_imaging_palette_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_palette_instance" kindref="compound">ImagingPaletteInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mode[IMAGING_MODE_LENGTH];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Band<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT8<sp/>palette[1024];</highlight><highlight class="comment">/*<sp/>Palette<sp/>data<sp/>(same<sp/>format<sp/>as<sp/>image<sp/>data)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>INT16*<sp/>cache;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Palette<sp/>cache<sp/>(used<sp/>for<sp/>predefined<sp/>palettes)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep_cache;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>palette<sp/>will<sp/>be<sp/>reused;<sp/>keep<sp/>cache<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="struct_imaging_memory_arena" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alignment;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Alignment<sp/>in<sp/>memory<sp/>of<sp/>each<sp/>line<sp/>of<sp/>an<sp/>image<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preferred<sp/>block<sp/>size,<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocks_max;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Maximum<sp/>number<sp/>of<sp/>cached<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocks_cached;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>number<sp/>of<sp/>blocks<sp/>not<sp/>associated<sp/>with<sp/>images<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_imaging_memory_block" kindref="compound">ImagingMemoryBlock</ref><sp/>*blocks_pool;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats_new_count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>new<sp/>allocated<sp/>images<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats_allocated_blocks;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>allocated<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats_reused_blocks;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>blocks<sp/>which<sp/>were<sp/>retrieved<sp/>from<sp/>a<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats_reallocated_blocks;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>blocks<sp/>which<sp/>were<sp/>actually<sp/>reallocated<sp/>after<sp/>retrieving<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stats_freed_blocks;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>freed<sp/>blocks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}<sp/>*<ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref><sp/>ImagingDefaultArena;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingMemorySetBlocksMax(<ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref><sp/>arena,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocks_max);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingMemoryClearCache(<ref refid="struct_imaging_memory_arena" kindref="compound">ImagingMemoryArena</ref><sp/>arena,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_size);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNew(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNewDirty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNew2Dirty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/>Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImagingDelete(Imaging<sp/>im);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNewBlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNewMap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readonly,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNewPrologue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNewPrologueSubtype(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>structure_size);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingCopyPalette(Imaging<sp/>destination,<sp/>Imaging<sp/>source);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingHistogramDelete(ImagingHistogram<sp/>histogram);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingAccessInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingAccess<sp/>ImagingAccessNew(Imaging<sp/>im);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ImagingAccessDelete(Imaging<sp/>im,<sp/>ImagingAccess<sp/>access);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ImagingAccessDelete(im,<sp/>access)<sp/></highlight><highlight class="comment">/*<sp/>nop,<sp/>for<sp/>now<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingPalette<sp/>ImagingPaletteNew(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingPalette<sp/>ImagingPaletteNewBrowser(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingPalette<sp/>ImagingPaletteDuplicate(ImagingPalette<sp/>palette);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImagingPaletteDelete(ImagingPalette<sp/>palette);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ImagingPaletteCachePrepare(ImagingPalette<sp/>palette);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingPaletteCacheUpdate(ImagingPalette<sp/>palette,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingPaletteCacheDelete(ImagingPalette<sp/>palette);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ImagingPaletteCache(p,<sp/>r,<sp/>g,<sp/>b)\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>p-&gt;cache[(r&gt;&gt;2)<sp/>+<sp/>(g&gt;&gt;2)*64<sp/>+<sp/>(b&gt;&gt;2)*64*64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingQuantize(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colours,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kmeans);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Threading<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingSectionCookie;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingSectionEnter(ImagingSectionCookie*<sp/>cookie);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingSectionLeave(ImagingSectionCookie*<sp/>cookie);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Exceptions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingError_IOError(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingError_MemoryError(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingError_ModeError(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>maps<sp/>to<sp/>ValueError<sp/>by<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingError_Mismatch(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>maps<sp/>to<sp/>ValueError<sp/>by<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ImagingError_ValueError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingError_Clear(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Transform<sp/>callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>standard<sp/>transforms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_AFFINE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_PERSPECTIVE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_QUAD<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>standard<sp/>filters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_NEAREST<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_BOX<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_BILINEAR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_HAMMING<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_BICUBIC<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_TRANSFORM_LANCZOS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ImagingTransformMap)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Y,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ImagingTransformFilter)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out,<sp/>Imaging<sp/>im,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Image<sp/>Manipulation<sp/>Methods<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingAlphaComposite(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingBlend(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingCopy(Imaging<sp/>im);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingConvert(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/>ImagingPalette<sp/>palette,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dither);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingConvertInPlace(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingConvertMatrix(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m[]);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingConvertTransparent(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingCrop(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingExpand(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFill(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingFill2(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>into,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/>Imaging<sp/>mask,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFillBand(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>band,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFillLinearGradient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFillRadialGradient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFilter(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLOAT32*<sp/>kernel,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>FLOAT32<sp/>offset);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFlipLeftRight(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingFlipTopBottom(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingGaussianBlur(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passes);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingGetBand(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>band);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingMerge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,<sp/>Imaging<sp/>bands[4]);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingSplit(Imaging<sp/>im,<sp/>Imaging<sp/>bands[4]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingGetBBox(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bbox[4]);</highlight></codeline>
<codeline lineno="291" refid="struct_imaging_color_item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;<sp/>INT32<sp/>count;<sp/>INT32<sp/>pixel;<sp/>}<sp/><ref refid="struct_imaging_color_item" kindref="compound">ImagingColorItem</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_imaging_color_item" kindref="compound">ImagingColorItem</ref>*<sp/>ImagingGetColors(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxcolors,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*colors);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingGetExtrema(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extrema);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingGetProjection(Imaging<sp/>im,<sp/>UINT8*<sp/>xproj,<sp/>UINT8*<sp/>yproj);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingHistogram<sp/>ImagingGetHistogram(</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>im,<sp/>Imaging<sp/>mask,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extrema);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingModeFilter(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingNegative(Imaging<sp/>im);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingOffset(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xoffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yoffset);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingPaste(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>into,<sp/>Imaging<sp/>im,<sp/>Imaging<sp/>mask,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingPoint(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tablemode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>table);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingPointTransform(</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingPutBand(Imaging<sp/>im,<sp/>Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>band);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingRankFilter(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingRotate90(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingRotate180(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingRotate270(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingTranspose(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingTransverse(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingResample(Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>box[4]);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingTransform(</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingUnsharpMask(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>imOut,<sp/>Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>percent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingBoxBlur(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingCopy2(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingConvert2(Imaging<sp/>imOut,<sp/>Imaging<sp/>imIn);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Channel<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>any<sp/>mode,<sp/>except<sp/>&quot;F&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopLighter(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopDarker(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopDifference(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopMultiply(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopScreen(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopAdd(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopSubtract(</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopAddModulo(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopSubtractModulo(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>&quot;1&quot;<sp/>images<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopAnd(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopOr(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingChopXor(Imaging<sp/>imIn1,<sp/>Imaging<sp/>imIn2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Image<sp/>measurement<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingCrack(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Graphics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawArc(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawBitmap(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/>Imaging<sp/>bitmap,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawChord(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawEllipse(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawLine(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawWideLine(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawPieslice(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawPoint(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawPolygon(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*xy,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawRectangle(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Level<sp/>2<sp/>graphics<sp/>(WORK<sp/>IN<sp/>PROGRESS)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingOutline<sp/>ImagingOutlineNew(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingOutlineDelete(ImagingOutline<sp/>outline);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingDrawOutline(Imaging<sp/>im,<sp/>ImagingOutline<sp/>outline,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ink,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fill,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingOutlineMove(ImagingOutline<sp/>outline,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingOutlineLine(ImagingOutline<sp/>outline,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingOutlineCurve(ImagingOutline<sp/>outline,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y3);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingOutlineTransform(ImagingOutline<sp/>outline,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a[6]);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingOutlineClose(ImagingOutline<sp/>outline);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Special<sp/>effects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingEffectSpread(Imaging<sp/>imIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingEffectNoise(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingEffectMandelbrot(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ysize,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>extent[4],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quality);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Obsolete<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingToString(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orientation,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingFromString(Imaging<sp/>im,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orientation,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>File<sp/>I/O<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Built-in<sp/>drivers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Imaging<sp/>ImagingOpenPPM(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingSavePPM(Imaging<sp/>im,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utility<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/>ImagingCRC32(UINT32<sp/>crc,<sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__object" kindref="compound">bytes</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Codecs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecStateInstance</ref><sp/>*<ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecState</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*ImagingCodec)(Imaging<sp/>im,<sp/>ImagingCodecState<sp/><ref refid="structstate" kindref="compound">state</ref>,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingBcnDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingBitDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingEpsEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingFliDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingGifDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingGifEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingHexDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>HAVE_LIBJPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpegDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpegDecodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpegUseJCSExtensions(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpegEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_OPENJPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpeg2KDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpeg2KDecodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpeg2KEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingJpeg2KEncodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>HAVE_LIBTIFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingLibTiffDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingLibTiffEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>HAVE_LIBMPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingMpegDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingMspDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingPackbitsDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingPcdDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingPcxDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingPcxEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingRawDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingRawEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingSgiRleDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingSgiRleDecodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingSunRleDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingTgaRleDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingXbmDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingXbmEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>HAVE_LIBZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingZipDecode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingZipDecodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingZipEncode(Imaging<sp/>im,<sp/>ImagingCodecState<sp/>state,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImagingZipEncodeCleanup(ImagingCodecState<sp/>state);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ImagingShuffler)(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Public<sp/>shufflers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingPackBGR(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingUnpackYCC(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingUnpackYCCA(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingConvertRGB2YCbCr(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImagingConvertYCbCr2RGB(UINT8*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT8*<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixels);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingShuffler<sp/>ImagingFindUnpacker(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rawmode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bits_out);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ImagingShuffler<sp/>ImagingFindPacker(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mode,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rawmode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bits_out);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="struct_imaging_codec_state_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_imaging_codec_state_instance" kindref="compound">ImagingCodecStateInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errcode;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ystep;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xsize,<sp/>ysize,<sp/>xoff,<sp/>yoff;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>ImagingShuffler<sp/>shuffle;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits,<sp/>bytes;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT8<sp/>*buffer;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*fd;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">};</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Codec<sp/>read/write<sp/>python<sp/>fd<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>_imaging_read_pyFd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dest,<sp/>Py_ssize_t<sp/>bytes);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>_imaging_write_pyFd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src,<sp/>Py_ssize_t<sp/>bytes);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_imaging_seek_pyFd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*fd,<sp/>Py_ssize_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>_imaging_tell_pyFd(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*fd);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Errcodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_OVERRUN<sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_BROKEN<sp/><sp/><sp/><sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_UNKNOWN<sp/><sp/><sp/>-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_CONFIG<sp/><sp/><sp/><sp/>-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMAGING_CODEC_MEMORY<sp/><sp/><sp/><sp/>-9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ImagingUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/Imaging.h"/>
  </compounddef>
</doxygen>
