<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="code_8h" kind="file" language="C++">
    <compoundname>code.h</compoundname>
    <includedby refid="compile_8h" local="yes">/usr/include/python3.6m/compile.h</includedby>
    <invincdepgraph>
      <node id="2846">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="2847">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="2843">
        <label>/usr/include/python3.6m/compile.h</label>
        <link refid="compile_8h_source"/>
        <childnode refid="2844" relation="include">
        </childnode>
      </node>
      <node id="2842">
        <label>/usr/include/python3.6m/code.h</label>
        <link refid="code_8h"/>
        <childnode refid="2843" relation="include">
        </childnode>
      </node>
      <node id="2849">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="2844">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="2845" relation="include">
        </childnode>
        <childnode refid="2847" relation="include">
        </childnode>
        <childnode refid="2848" relation="include">
        </childnode>
        <childnode refid="2849" relation="include">
        </childnode>
        <childnode refid="2850" relation="include">
        </childnode>
      </node>
      <node id="2850">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="2845">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="2846" relation="include">
        </childnode>
      </node>
      <node id="2848">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_py_code_object" prot="public">PyCodeObject</innerclass>
    <innerclass refid="struct__addr__pair" prot="public">_addr_pair</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="code_8h_1a31982ac972d9c127346997d0921afc6d" prot="public" static="no">
        <name>_Py_OPCODE</name>
        <param><defname>word</defname></param>
        <initializer>((word) &amp; 255)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="16" column="12" bodyfile="/usr/include/python3.6m/code.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a770ce56692fa92fb0d8c6755286b5374" prot="public" static="no">
        <name>_Py_OPARG</name>
        <param><defname>word</defname></param>
        <initializer>((word) &gt;&gt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="17" column="11" bodyfile="/usr/include/python3.6m/code.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a6092b4b4fd681c2b1d7ffb57369226ad" prot="public" static="no">
        <name>CO_OPTIMIZED</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="54" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a499d8b0557d581ea9e1c8ff4a5df76d2" prot="public" static="no">
        <name>CO_NEWLOCALS</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="55" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a131ed0adee546279032af3a55ef6b719" prot="public" static="no">
        <name>CO_VARARGS</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="56" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a97802102d8f13ad3295498951c112163" prot="public" static="no">
        <name>CO_VARKEYWORDS</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="57" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a175198c9b71d2d62938431d7272a2da5" prot="public" static="no">
        <name>CO_NESTED</name>
        <initializer>0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="58" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a9a0dd05ab78d9b782216883ca27e8486" prot="public" static="no">
        <name>CO_GENERATOR</name>
        <initializer>0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="59" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a55edd7bed68a37b7934041183e4d3dd2" prot="public" static="no">
        <name>CO_NOFREE</name>
        <initializer>0x0040</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="65" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1ab25749c186fe02bba5adb7bbde354a1e" prot="public" static="no">
        <name>CO_COROUTINE</name>
        <initializer>0x0080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="69" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a9d5a97423f198e3757beb17d88f9f334" prot="public" static="no">
        <name>CO_ITERABLE_COROUTINE</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="70" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1ad09295f12cadfa232c91769edd2dba63" prot="public" static="no">
        <name>CO_ASYNC_GENERATOR</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="71" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a5a7ee54f647d5668f8236d1cbc1171a9" prot="public" static="no">
        <name>CO_FUTURE_DIVISION</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="77" column="10" bodyfile="/usr/include/python3.6m/code.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1ab4e5184532bbc4baf3adea2e2bc2c38b" prot="public" static="no">
        <name>CO_FUTURE_ABSOLUTE_IMPORT</name>
        <initializer>0x4000 /* do absolute imports by default */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="78" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1ad113e68a773580336c24c72ef7ad8666" prot="public" static="no">
        <name>CO_FUTURE_WITH_STATEMENT</name>
        <initializer>0x8000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="79" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a80398933b7467dc979f4141aba15b972" prot="public" static="no">
        <name>CO_FUTURE_PRINT_FUNCTION</name>
        <initializer>0x10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="80" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a83ab0fb78b5e7075e2b2947c657ba8ef" prot="public" static="no">
        <name>CO_FUTURE_UNICODE_LITERALS</name>
        <initializer>0x20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="81" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a9aea756b5a304468a9597d110fa71915" prot="public" static="no">
        <name>CO_FUTURE_BARRY_AS_BDFL</name>
        <initializer>0x40000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="83" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a7245989ab0f1ebb514d1b16a1f0be94e" prot="public" static="no">
        <name>CO_FUTURE_GENERATOR_STOP</name>
        <initializer>0x80000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="84" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a3253e7f44623cbb0f4701111958b50c9" prot="public" static="no">
        <name>CO_CELL_NOT_AN_ARG</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="89" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a4d1e583f3588ea0c261d3a82d24a5c77" prot="public" static="no">
        <name>PY_PARSER_REQUIRES_FUTURE_KEYWORD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="94" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1a3667103ec7f96a81ef3d4529d3cd0f88" prot="public" static="no">
        <name>CO_MAXBLOCKS</name>
        <initializer>20 /* Max static block nesting within a function */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="96" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1ae582fa708a7a7b082150e850212170ec" prot="public" static="no">
        <name>PyCode_Check</name>
        <param><defname>op</defname></param>
        <initializer>(Py_TYPE(op) == &amp;PyCode_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="100" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="code_8h_1af04a012a0c0cd6941e1f5c5e1a4f98bb" prot="public" static="no">
        <name>PyCode_GetNumFree</name>
        <param><defname>op</defname></param>
        <initializer>(PyTuple_GET_SIZE((op)-&gt;co_freevars))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="101" column="9" bodyfile="/usr/include/python3.6m/code.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="code_8h_1a1b8aafb266bb2ed998129883a81a49ab" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t _Py_CODEUNIT</definition>
        <argsstring></argsstring>
        <name>_Py_CODEUNIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="10" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="code_8h_1a04d7019e355cd76d55d625f57b9e27af" prot="public" static="no">
        <type>struct <ref refid="struct__addr__pair" kindref="compound">_addr_pair</ref></type>
        <definition>typedef struct _addr_pair  PyAddrPair</definition>
        <argsstring></argsstring>
        <name>PyAddrPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="code_8h_1a61569f2965b7a369eb10b6d75d410d11" prot="public" static="no" mutable="no">
        <type></type>
        <definition>int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="105" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a6399f8ee92fc595a950491df6fcbb96d" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> const char *</type>
        <definition>PyObject PyObject PyObject PyObject PyObject PyObject PyObject PyObject PyObject const char* funcname</definition>
        <argsstring></argsstring>
        <name>funcname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="112" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a398980b276a6b82cc059ec8f0bd799de" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> const char int</type>
        <definition>PyObject PyObject PyObject PyObject PyObject PyObject PyObject PyObject PyObject const char int firstlineno</definition>
        <argsstring></argsstring>
        <name>firstlineno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="112" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1add0e7cfd001c4265d48db2ae8491cb24" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int lasti</definition>
        <argsstring></argsstring>
        <name>lasti</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="130" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a088761a95473f90ef897a790d99d97b2" prot="public" static="no" mutable="no">
        <type>int <ref refid="struct__addr__pair" kindref="compound">PyAddrPair</ref> *</type>
        <definition>int PyAddrPair* bounds</definition>
        <argsstring></argsstring>
        <name>bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="130" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a73c3fe2be6e8c3350b99f79669896ee9" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* consts</definition>
        <argsstring></argsstring>
        <name>consts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="142" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a6d70b6a7be698d5bd5953a831fc49278" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject* names</definition>
        <argsstring></argsstring>
        <name>names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="143" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a4b5566922e304b28963365ddce206f0e" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject PyObject* lnotab</definition>
        <argsstring></argsstring>
        <name>lnotab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="143" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1a54819b62c266d561ee7c64a6f83f2026" prot="public" static="no" mutable="no">
        <type>Py_ssize_t</type>
        <definition>Py_ssize_t index</definition>
        <argsstring></argsstring>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="147" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="code_8h_1aadfc72c376335b34b08ab6abfa20cbad" prot="public" static="no" mutable="no">
        <type>Py_ssize_t void **</type>
        <definition>Py_ssize_t void * extra</definition>
        <argsstring></argsstring>
        <name>extra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="148" column="1" bodyfile="/usr/include/python3.6m/code.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="code_8h_1a1745284711ff720d19c5d8f0efca154c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyCode_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="code_8h_1a785bc38726cbaac322147a36fe67e5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyCodeObject *) PyCode_New(int</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="code_8h_1ac14b4a4bf92ef904be9d03147e010a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyCode_Addr2Line(PyCodeObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="code_8h_1a15a223951b1e10511c1d3eb7c1695672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) _PyCode_ConstantKey(PyObject *obj)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/code.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Definitions<sp/>for<sp/>bytecode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_CODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_CODE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/>_Py_CODEUNIT;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_OPCODE(word)<sp/>((word)<sp/>&gt;&gt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_OPARG(word)<sp/>((word)<sp/>&amp;<sp/>255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_OPCODE(word)<sp/>((word)<sp/>&amp;<sp/>255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>_Py_OPARG(word)<sp/>((word)<sp/>&gt;&gt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bytecode<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="struct_py_code_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_argcount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#arguments,<sp/>except<sp/>*args<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_kwonlyargcount;<sp/><sp/></highlight><highlight class="comment">/*<sp/>#keyword<sp/>only<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_nlocals;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#local<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_stacksize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#entries<sp/>needed<sp/>for<sp/>evaluation<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_flags;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CO_...,<sp/>see<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>co_firstlineno;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>source<sp/>line<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_code;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>instruction<sp/>opcodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_consts;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>(constants<sp/>used)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_names;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>of<sp/>strings<sp/>(names<sp/>used)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_varnames;<sp/><sp/></highlight><highlight class="comment">/*<sp/>tuple<sp/>of<sp/>strings<sp/>(local<sp/>variable<sp/>names)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_freevars;<sp/><sp/></highlight><highlight class="comment">/*<sp/>tuple<sp/>of<sp/>strings<sp/>(free<sp/>variable<sp/>names)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_cellvars;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tuple<sp/>of<sp/>strings<sp/>(cell<sp/>variable<sp/>names)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rest<sp/>aren&apos;t<sp/>used<sp/>in<sp/>either<sp/>hash<sp/>or<sp/>comparisons,<sp/>except<sp/>for<sp/>co_name,</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>in<sp/>both.<sp/>This<sp/>is<sp/>done<sp/>to<sp/>preserve<sp/>the<sp/>name<sp/>and<sp/>line<sp/>number</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>tracebacks<sp/>and<sp/>debuggers;<sp/>otherwise,<sp/>constant<sp/>de-duplication</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>would<sp/>collapse<sp/>identical<sp/>functions/lambdas<sp/>defined<sp/>on<sp/>different<sp/>lines.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*co_cell2arg;<sp/></highlight><highlight class="comment">/*<sp/>Maps<sp/>cell<sp/>vars<sp/>which<sp/>are<sp/>arguments.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_filename;<sp/><sp/></highlight><highlight class="comment">/*<sp/>unicode<sp/>(where<sp/>it<sp/>was<sp/>loaded<sp/>from)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_name;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unicode<sp/>(name,<sp/>for<sp/>reference)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_lnotab;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>string<sp/>(encoding<sp/>addr&lt;-&gt;lineno<sp/>mapping)<sp/>See</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Objects/lnotab_notes.txt<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*co_zombieframe;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>optimization<sp/>only<sp/>(see<sp/>frameobject.c)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*co_weakreflist;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>support<sp/>weakrefs<sp/>to<sp/>code<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Scratch<sp/>space<sp/>for<sp/>extra<sp/>data<sp/>relating<sp/>to<sp/>the<sp/>code<sp/>object.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>is<sp/>a<sp/>void*<sp/>to<sp/>keep<sp/>the<sp/>format<sp/>private<sp/>in<sp/>codeobject.c<sp/>to<sp/>force</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>people<sp/>to<sp/>go<sp/>through<sp/>the<sp/>proper<sp/>APIs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*co_extra;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Masks<sp/>for<sp/>co_flags<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_OPTIMIZED<sp/><sp/><sp/><sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_NEWLOCALS<sp/><sp/><sp/><sp/>0x0002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_VARARGS<sp/><sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_VARKEYWORDS<sp/><sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_NESTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_GENERATOR<sp/><sp/><sp/><sp/>0x0020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>CO_NOFREE<sp/>flag<sp/>is<sp/>set<sp/>if<sp/>there<sp/>are<sp/>no<sp/>free<sp/>or<sp/>cell<sp/>variables.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>This<sp/>information<sp/>is<sp/>redundant,<sp/>but<sp/>it<sp/>allows<sp/>a<sp/>single<sp/>flag<sp/>test</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>to<sp/>determine<sp/>whether<sp/>there<sp/>is<sp/>any<sp/>extra<sp/>work<sp/>to<sp/>be<sp/>done<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>call<sp/>frame<sp/>it<sp/>setup.</highlight></codeline>
<codeline lineno="64"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_NOFREE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0040</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>CO_COROUTINE<sp/>flag<sp/>is<sp/>set<sp/>for<sp/>coroutine<sp/>functions<sp/>(defined<sp/>with</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>``async<sp/>def``<sp/>keywords)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_COROUTINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0080</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_ITERABLE_COROUTINE<sp/><sp/><sp/>0x0100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_ASYNC_GENERATOR<sp/><sp/><sp/><sp/><sp/><sp/>0x0200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>no<sp/>longer<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_GENERATOR_ALLOWED<sp/><sp/><sp/><sp/>0x1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_DIVISION<sp/><sp/><sp/><sp/><sp/><sp/>0x2000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_ABSOLUTE_IMPORT<sp/>0x4000<sp/></highlight><highlight class="comment">/*<sp/>do<sp/>absolute<sp/>imports<sp/>by<sp/>default<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_WITH_STATEMENT<sp/><sp/>0x8000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_PRINT_FUNCTION<sp/><sp/>0x10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_UNICODE_LITERALS<sp/>0x20000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_BARRY_AS_BDFL<sp/><sp/>0x40000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_FUTURE_GENERATOR_STOP<sp/><sp/>0x80000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>value<sp/>is<sp/>found<sp/>in<sp/>the<sp/>co_cell2arg<sp/>array<sp/>when<sp/>the<sp/>associated<sp/>cell</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>variable<sp/>does<sp/>not<sp/>correspond<sp/>to<sp/>an<sp/>argument.<sp/>The<sp/>maximum<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>arguments<sp/>is<sp/>255<sp/>(indexed<sp/>up<sp/>to<sp/>254),<sp/>so<sp/>255<sp/>work<sp/>as<sp/>a<sp/>special<sp/>flag.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_CELL_NOT_AN_ARG<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>should<sp/>be<sp/>defined<sp/>if<sp/>a<sp/>future<sp/>statement<sp/>modifies<sp/>the<sp/>syntax.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>For<sp/>example,<sp/>when<sp/>a<sp/>keyword<sp/>is<sp/>added.</highlight></codeline>
<codeline lineno="93"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_PARSER_REQUIRES_FUTURE_KEYWORD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_MAXBLOCKS<sp/>20<sp/></highlight><highlight class="comment">/*<sp/>Max<sp/>static<sp/>block<sp/>nesting<sp/>within<sp/>a<sp/>function<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>PyCode_Type;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyCode_Check(op)<sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;PyCode_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyCode_GetNumFree(op)<sp/>(PyTuple_GET_SIZE((op)-&gt;co_freevars))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Public<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">PyAPI_FUNC(<ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref><sp/>*)<sp/>PyCode_New(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>same<sp/>as<sp/>struct<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Creates<sp/>a<sp/>new<sp/>empty<sp/>code<sp/>object<sp/>with<sp/>the<sp/>specified<sp/>source<sp/>location.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">PyAPI_FUNC(<ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref><sp/>*)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">PyCode_NewEmpty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstlineno);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>line<sp/>number<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>bytecode<sp/>index</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>in<sp/>this<sp/>code<sp/>object.<sp/><sp/>If<sp/>you<sp/>just<sp/>need<sp/>the<sp/>line<sp/>number<sp/>of<sp/>a<sp/>frame,</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>use<sp/>PyFrame_GetLineNumber()<sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyCode_Addr2Line(<ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>internal<sp/>use<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="struct__addr__pair" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__addr__pair" kindref="compound">_addr_pair</ref><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ap_lower;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ap_upper;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/><ref refid="struct__addr__pair" kindref="compound">PyAddrPair</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Update<sp/>*bounds<sp/>to<sp/>describe<sp/>the<sp/>first<sp/>and<sp/>one-past-the-last<sp/>instructions<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>same<sp/>line<sp/>as<sp/>lasti.<sp/><sp/>Return<sp/>the<sp/>number<sp/>of<sp/>that<sp/>line.</highlight></codeline>
<codeline lineno="128"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyCode_CheckLineNumber(<ref refid="struct_py_code_object" kindref="compound">PyCodeObject</ref>*<sp/>co,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lasti,<sp/><ref refid="struct__addr__pair" kindref="compound">PyAddrPair</ref><sp/>*bounds);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>comparable<sp/>key<sp/>used<sp/>to<sp/>compare<sp/>constants<sp/>taking<sp/>in<sp/>account<sp/>the</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>object<sp/>type.<sp/>It<sp/>is<sp/>used<sp/>to<sp/>make<sp/>sure<sp/>types<sp/>are<sp/>not<sp/>coerced<sp/>(e.g.,<sp/>float<sp/>and</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>complex)<sp/>_and_<sp/>to<sp/>distinguish<sp/>0.0<sp/>from<sp/>-0.0<sp/>e.g.<sp/>on<sp/>IEEE<sp/>platforms</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>Return<sp/>(type(obj),<sp/>obj,<sp/>...):<sp/>a<sp/>tuple<sp/>with<sp/>variable<sp/>size<sp/>(at<sp/>least<sp/>2<sp/>items)</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>depending<sp/>on<sp/>the<sp/>type<sp/>and<sp/>the<sp/>value.<sp/>The<sp/>type<sp/>is<sp/>the<sp/>first<sp/>item<sp/>to<sp/>not</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>compare<sp/>bytes<sp/>and<sp/>str<sp/>which<sp/>can<sp/>raise<sp/>a<sp/>BytesWarning<sp/>exception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>_PyCode_ConstantKey(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyCode_Optimize(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*code,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref>*<sp/>consts,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*names,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*lnotab);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyCode_GetExtra(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*code,<sp/>Py_ssize_t<sp/>index,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**extra);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyCode_SetExtra(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*code,<sp/>Py_ssize_t<sp/>index,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extra);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_CODE_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/code.h"/>
  </compounddef>
</doxygen>
