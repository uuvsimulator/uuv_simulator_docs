<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pythread_8h" kind="file" language="C++">
    <compoundname>pythread.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="pythread_8h_1ab6ab095e0a6ee85f425b6863a4329e0c" prot="public" static="no">
        <name>WAIT_LOCK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="28" column="9" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythread_8h_1a1710d207563f0bed62e43cc397dd3944" prot="public" static="no">
        <name>NOWAIT_LOCK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="29" column="9" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythread_8h_1a94c38481a7803e9564518b95c953ec93" prot="public" static="no">
        <name>PY_TIMEOUT_T</name>
        <initializer>long long</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="40" column="9" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pythread_8h_1a125bceac030aae3f31757fffed01e50c" prot="public" static="no">
        <name>PY_TIMEOUT_MAX</name>
        <initializer>PY_LLONG_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="41" column="9" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pythread_8h_1a62269cbd64fc1dc070f669b10878f217" prot="public" static="no">
        <name>PyLockStatus</name>
        <enumvalue id="pythread_8h_1a62269cbd64fc1dc070f669b10878f217a58a5f7f0dd79e84dadf6d0a86eae4647" prot="public">
          <name>PY_LOCK_FAILURE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pythread_8h_1a62269cbd64fc1dc070f669b10878f217ae4e3ce4e16e9aa7c3d96fdea209e6e14" prot="public">
          <name>PY_LOCK_ACQUIRED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pythread_8h_1a62269cbd64fc1dc070f669b10878f217a470a056f0fecbf5ed39e5b8e11ac4167" prot="public">
          <name>PY_LOCK_INTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="14" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="14" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pythread_8h_1a3b2176e03c1fe39be5b4efe587669dc0" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* PyThread_type_lock</definition>
        <argsstring></argsstring>
        <name>PyThread_type_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="5" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pythread_8h_1ae4590c2298a1cb0b978f67b01622e502" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* PyThread_type_sema</definition>
        <argsstring></argsstring>
        <name>PyThread_type_sema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="6" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pythread_8h_1aecfb001d4e43dfd2cd3ee5fc2c8a849e" prot="public" static="no">
        <type>enum PyLockStatus</type>
        <definition>typedef enum PyLockStatus  PyLockStatus</definition>
        <argsstring></argsstring>
        <name>PyLockStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="18" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pythread_8h_1a61569f2965b7a369eb10b6d75d410d11" prot="public" static="no" mutable="no">
        <type></type>
        <definition>int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="27" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythread_8h_1aa2f2ba8d828b06ea1d84e2a9926cc946" prot="public" static="no" mutable="no">
        <type>PY_TIMEOUT_T</type>
        <definition>PY_TIMEOUT_T microseconds</definition>
        <argsstring></argsstring>
        <name>microseconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="64" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pythread_8h_1aa421f56b48a560a167ee398b5a1df2de" prot="public" static="no" mutable="no">
        <type>PY_TIMEOUT_T int</type>
        <definition>PY_TIMEOUT_T int intr_flag</definition>
        <argsstring></argsstring>
        <name>intr_flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="65" column="1" bodyfile="/usr/include/python3.6m/pythread.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pythread_8h_1ae11f608f7ba249ec5253464a9aef4bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyThread_init_thread(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1a9bf4f5e4a037565b1097ed8c0c07003c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(long) PyThread_start_new_thread(void(*)(void *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1a2758969b52cf8e9ed38490a0f844fe5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyThread_type_lock) PyThread_allocate_lock(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>PyThread_type_lock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1a4ed02d6eff571cb09d36ed4b149bab51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyThread_acquire_lock(PyThread_type_lock</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1aad7333b8543ec194c5765f8e7f36d764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyLockStatus) PyThread_acquire_lock_timed(PyThread_type_lock</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>PyLockStatus</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1a519a79065264220a585bfb7cf3264fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(size_t) PyThread_get_stacksize(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1af2e054bc3a19ce60605c331817af72b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyThread_GetInfo(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pythread_8h_1aa241f954c2cdb76a81fbc093bbd03d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* PyAPI_FUNC</definition>
        <argsstring>(void *) PyThread_get_key_value(int)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pythread.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_PYTHREAD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_PYTHREAD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*PyThread_type_lock;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*PyThread_type_sema;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>status<sp/>codes<sp/>for<sp/>Python<sp/>lock<sp/>acquisition.<sp/><sp/>Chosen<sp/>for<sp/>maximum</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>backwards<sp/>compatibility,<sp/>ie<sp/>failure<sp/>-&gt;<sp/>0,<sp/>success<sp/>-&gt;<sp/>1.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>PyLockStatus<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>PY_LOCK_FAILURE<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>PY_LOCK_ACQUIRED<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>PY_LOCK_INTR</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<sp/>PyLockStatus;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_init_thread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>PyThread_start_new_thread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_exit_thread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>PyThread_get_thread_ident(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">PyAPI_FUNC(PyThread_type_lock)<sp/>PyThread_allocate_lock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_free_lock(PyThread_type_lock);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyThread_acquire_lock(PyThread_type_lock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAIT_LOCK<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOWAIT_LOCK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PY_TIMEOUT_T<sp/>is<sp/>the<sp/>integral<sp/>type<sp/>used<sp/>to<sp/>specify<sp/>timeouts<sp/>when<sp/>waiting</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>on<sp/>a<sp/>lock<sp/>(see<sp/>PyThread_acquire_lock_timed()<sp/>below).</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>PY_TIMEOUT_MAX<sp/>is<sp/>the<sp/>highest<sp/>usable<sp/>value<sp/>(in<sp/>microseconds)<sp/>of<sp/>that</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>type,<sp/>and<sp/>depends<sp/>on<sp/>the<sp/>system<sp/>threading<sp/>API.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>NOTE:<sp/>this<sp/>isn&apos;t<sp/>the<sp/>same<sp/>value<sp/>as<sp/>`_thread.TIMEOUT_MAX`.<sp/><sp/>The<sp/>_thread</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>module<sp/>exposes<sp/>a<sp/>higher-level<sp/>API,<sp/>with<sp/>timeouts<sp/>expressed<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>and<sp/>floating-point<sp/>numbers<sp/>allowed.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_TIMEOUT_T<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_TIMEOUT_MAX<sp/>PY_LLONG_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>the<sp/>NT<sp/>API,<sp/>the<sp/>timeout<sp/>is<sp/>a<sp/>DWORD<sp/>and<sp/>is<sp/>expressed<sp/>in<sp/>milliseconds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(NT_THREADS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0xFFFFFFFFLL<sp/>*<sp/>1000<sp/>&lt;<sp/>PY_TIMEOUT_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PY_TIMEOUT_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_TIMEOUT_MAX<sp/>(0xFFFFFFFFLL<sp/>*<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>microseconds<sp/>==<sp/>0,<sp/>the<sp/>call<sp/>is<sp/>non-blocking:<sp/>it<sp/>returns<sp/>immediately</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>even<sp/>when<sp/>the<sp/>lock<sp/>can&apos;t<sp/>be<sp/>acquired.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>If<sp/>microseconds<sp/>&gt;<sp/>0,<sp/>the<sp/>call<sp/>waits<sp/>up<sp/>to<sp/>the<sp/>specified<sp/>duration.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>If<sp/>microseconds<sp/>&lt;<sp/>0,<sp/>the<sp/>call<sp/>waits<sp/>until<sp/>success<sp/>(or<sp/>abnormal<sp/>failure)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>microseconds<sp/>must<sp/>be<sp/>less<sp/>than<sp/>PY_TIMEOUT_MAX.<sp/>Behaviour<sp/>otherwise<sp/>is</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>undefined.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/>If<sp/>intr_flag<sp/>is<sp/>true<sp/>and<sp/>the<sp/>acquire<sp/>is<sp/>interrupted<sp/>by<sp/>a<sp/>signal,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>call<sp/>will<sp/>return<sp/>PY_LOCK_INTR.<sp/><sp/>The<sp/>caller<sp/>may<sp/>reattempt<sp/>to<sp/>acquire<sp/>the</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>lock.</highlight></codeline>
<codeline lineno="62"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">PyAPI_FUNC(PyLockStatus)<sp/>PyThread_acquire_lock_timed(PyThread_type_lock,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PY_TIMEOUT_T<sp/>microseconds,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>intr_flag);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_release_lock(PyThread_type_lock);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>PyThread_get_stacksize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyThread_set_stacksize(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref>*)<sp/>PyThread_GetInfo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread<sp/>Local<sp/>Storage<sp/>(TLS)<sp/>API<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyThread_create_key(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_delete_key(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyThread_set_key_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>PyThread_get_key_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_delete_key_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Cleanup<sp/>after<sp/>a<sp/>fork<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyThread_ReInitTLS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_PYTHREAD_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/pythread.h"/>
  </compounddef>
</doxygen>
