<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dynamic__annotations_8h" kind="file" language="C++">
    <compoundname>dynamic_annotations.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="dynamic__annotations_8h_1ad0cf8aac29bb14019ec974d8f4d0a7a4" prot="public" static="no">
        <name>DYNAMIC_ANNOTATIONS_ENABLED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="60" column="10" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a841fff1baca0e3dc8c335a5b455720d6" prot="public" static="no">
        <name>_Py_ANNOTATE_RWLOCK_CREATE</name>
        <param><defname>lock</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="328" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ad265ebf4b52ac9a322d0f1d09e86d6a0" prot="public" static="no">
        <name>_Py_ANNOTATE_RWLOCK_DESTROY</name>
        <param><defname>lock</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="329" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a0dc425f6edbd43b86b587a2e14ad5b90" prot="public" static="no">
        <name>_Py_ANNOTATE_RWLOCK_ACQUIRED</name>
        <param><defname>lock</defname></param>
        <param><defname>is_w</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="330" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a232d654ee7e73974e97636b02c3b7a5e" prot="public" static="no">
        <name>_Py_ANNOTATE_RWLOCK_RELEASED</name>
        <param><defname>lock</defname></param>
        <param><defname>is_w</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="331" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a7e3fd80b21980255fa3c8e06f152659d" prot="public" static="no">
        <name>_Py_ANNOTATE_BARRIER_INIT</name>
        <param><defname>barrier</defname></param>
        <param><defname>count</defname></param>
        <param><defname>reinitialization_allowed</defname></param>
        <initializer>/* */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="332" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ae41c28ec329f24a8d1da1059e2119320" prot="public" static="no">
        <name>_Py_ANNOTATE_BARRIER_WAIT_BEFORE</name>
        <param><defname>barrier</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="333" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a788a29b5a856080e167fdab59a375655" prot="public" static="no">
        <name>_Py_ANNOTATE_BARRIER_WAIT_AFTER</name>
        <param><defname>barrier</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="334" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1aa70476fe08b01d3cd5a8954a52cdc303" prot="public" static="no">
        <name>_Py_ANNOTATE_BARRIER_DESTROY</name>
        <param><defname>barrier</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="335" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a7e896aa1bb36a6689d05bbd8a08fdc8a" prot="public" static="no">
        <name>_Py_ANNOTATE_CONDVAR_LOCK_WAIT</name>
        <param><defname>cv</defname></param>
        <param><defname>lock</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="336" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1aa3e762f97a2c9b67375937f2a6452207" prot="public" static="no">
        <name>_Py_ANNOTATE_CONDVAR_WAIT</name>
        <param><defname>cv</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="337" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a9440121237c889a872feda2a2e0c9cfb" prot="public" static="no">
        <name>_Py_ANNOTATE_CONDVAR_SIGNAL</name>
        <param><defname>cv</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="338" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ae4bb8e369c75cf9b627beeade89314b9" prot="public" static="no">
        <name>_Py_ANNOTATE_CONDVAR_SIGNAL_ALL</name>
        <param><defname>cv</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="339" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a538980af8fe50ddfbfef943633bbc19a" prot="public" static="no">
        <name>_Py_ANNOTATE_HAPPENS_BEFORE</name>
        <param><defname>obj</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="340" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ae823438ce6e12742b21488cfd02cda5d" prot="public" static="no">
        <name>_Py_ANNOTATE_HAPPENS_AFTER</name>
        <param><defname>obj</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="341" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ab88222753ee9d35b3ebef1e878c2ef4d" prot="public" static="no">
        <name>_Py_ANNOTATE_PUBLISH_MEMORY_RANGE</name>
        <param><defname>address</defname></param>
        <param><defname>size</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="342" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a5b7654d618c4d8c3a5399130ac4d3722" prot="public" static="no">
        <name>_Py_ANNOTATE_UNPUBLISH_MEMORY_RANGE</name>
        <param><defname>address</defname></param>
        <param><defname>size</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="343" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ac60d1c7ea56e0e5926e256e781223f64" prot="public" static="no">
        <name>_Py_ANNOTATE_SWAP_MEMORY_RANGE</name>
        <param><defname>address</defname></param>
        <param><defname>size</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="344" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a65baf70c18c304306b9ed9fc7a1a12fc" prot="public" static="no">
        <name>_Py_ANNOTATE_PCQ_CREATE</name>
        <param><defname>pcq</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="345" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ab0b0362be5e7e1c71985a9e3e2983dd5" prot="public" static="no">
        <name>_Py_ANNOTATE_PCQ_DESTROY</name>
        <param><defname>pcq</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="346" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1af25ce2344c3e1b996b4696b23e738f4e" prot="public" static="no">
        <name>_Py_ANNOTATE_PCQ_PUT</name>
        <param><defname>pcq</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="347" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a696925d33583e207b7514e16a3d42d48" prot="public" static="no">
        <name>_Py_ANNOTATE_PCQ_GET</name>
        <param><defname>pcq</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="348" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1afc0f744b46f27dad29865c55e1ca4f2f" prot="public" static="no">
        <name>_Py_ANNOTATE_NEW_MEMORY</name>
        <param><defname>address</defname></param>
        <param><defname>size</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="349" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1af179605731cd36c7f62f613ed1b7dec8" prot="public" static="no">
        <name>_Py_ANNOTATE_EXPECT_RACE</name>
        <param><defname>address</defname></param>
        <param><defname>description</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="350" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a4971ff8d935b37db4ee4e63b8813ba52" prot="public" static="no">
        <name>_Py_ANNOTATE_BENIGN_RACE</name>
        <param><defname>address</defname></param>
        <param><defname>description</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="351" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1af607c69c2e8694b475f41d2391aec476" prot="public" static="no">
        <name>_Py_ANNOTATE_BENIGN_RACE_SIZED</name>
        <param><defname>address</defname></param>
        <param><defname>size</defname></param>
        <param><defname>description</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="352" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a93e3a864c69d77ae5a1e6300fcf4663a" prot="public" static="no">
        <name>_Py_ANNOTATE_PURE_HAPPENS_BEFORE_MUTEX</name>
        <param><defname>mu</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="353" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a53189e810dbc0e4841864e9bda215985" prot="public" static="no">
        <name>_Py_ANNOTATE_MUTEX_IS_USED_AS_CONDVAR</name>
        <param><defname>mu</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="354" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a03cd32863f845abd27bbab769816302e" prot="public" static="no">
        <name>_Py_ANNOTATE_TRACE_MEMORY</name>
        <param><defname>arg</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="355" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1acc83ea3177f287e854477d12b3ec440f" prot="public" static="no">
        <name>_Py_ANNOTATE_THREAD_NAME</name>
        <param><defname>name</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="356" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a626c0ff5531191ae7f6962b8ea7b2e56" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_READS_BEGIN</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="357" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a4210b27ab3ff1729ea962f4ac98ff4af" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_READS_END</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="358" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a2c9235232650f71996a9e6fe442f712a" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_WRITES_BEGIN</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="359" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a256593e2dba68cef52adcc1281a84c99" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_WRITES_END</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="360" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a508164e2592717ed4888e20dac6d8d7d" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="361" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1ad3cdf2e8391a838a59f36a2f7ac43779" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_END</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="362" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1aa8af56f8924103ee1fb18394afaf9c57" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_SYNC_BEGIN</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="363" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1af55ce353887df91ff1a2233a3e865779" prot="public" static="no">
        <name>_Py_ANNOTATE_IGNORE_SYNC_END</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="364" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1aaa6e78885d58ee91d8522c98f56f998a" prot="public" static="no">
        <name>_Py_ANNOTATE_ENABLE_RACE_DETECTION</name>
        <param><defname>enable</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="365" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a9dab55d57c941c2e643f1ed093e06ea0" prot="public" static="no">
        <name>_Py_ANNOTATE_NO_OP</name>
        <param><defname>arg</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="366" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a9f8dcf868ceba2d68ec0d7cf022e0479" prot="public" static="no">
        <name>_Py_ANNOTATE_FLUSH_STATE</name>
        <param></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="367" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a8d0befb9b31442b433c039e32dd388d0" prot="public" static="no">
        <name>_Py_ANNOTATE_UNPROTECTED_READ</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="494" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__annotations_8h_1a0bc9e65347e1e7787bf0f33d6dbc2db6" prot="public" static="no">
        <name>_Py_ANNOTATE_BENIGN_RACE_STATIC</name>
        <param><defname>static_var</defname></param>
        <param><defname>description</defname></param>
        <initializer>/* empty */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="495" column="9" bodyfile="/usr/include/python3.6m/dynamic_annotations.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dynamic__annotations_8h_1a438481c95ba8d377ee988cd000b8fbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateRWLockCreate</definition>
        <argsstring>(const char *file, int line, const volatile void *lock)</argsstring>
        <name>AnnotateRWLockCreate</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a4fcf5d5c30c7a4f5706e7ff7267485ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateRWLockDestroy</definition>
        <argsstring>(const char *file, int line, const volatile void *lock)</argsstring>
        <name>AnnotateRWLockDestroy</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a7817b7ba3b012763c0e0a6668cb5434c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateRWLockAcquired</definition>
        <argsstring>(const char *file, int line, const volatile void *lock, long is_w)</argsstring>
        <name>AnnotateRWLockAcquired</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>long</type>
          <declname>is_w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a2991809b9e086dfa3b26ace925ef7f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateRWLockReleased</definition>
        <argsstring>(const char *file, int line, const volatile void *lock, long is_w)</argsstring>
        <name>AnnotateRWLockReleased</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>long</type>
          <declname>is_w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1aba35e981c449e7e31ec1ea7c55e4f8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBarrierInit</definition>
        <argsstring>(const char *file, int line, const volatile void *barrier, long count, long reinitialization_allowed)</argsstring>
        <name>AnnotateBarrierInit</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>barrier</declname>
        </param>
        <param>
          <type>long</type>
          <declname>count</declname>
        </param>
        <param>
          <type>long</type>
          <declname>reinitialization_allowed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a71720f9aa62f45e6763d3726c07be3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBarrierWaitBefore</definition>
        <argsstring>(const char *file, int line, const volatile void *barrier)</argsstring>
        <name>AnnotateBarrierWaitBefore</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a56a7ab41150de49908640a4e1a9257c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBarrierWaitAfter</definition>
        <argsstring>(const char *file, int line, const volatile void *barrier)</argsstring>
        <name>AnnotateBarrierWaitAfter</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a30e50b86e195a93e6bdf2ed3c07b3cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBarrierDestroy</definition>
        <argsstring>(const char *file, int line, const volatile void *barrier)</argsstring>
        <name>AnnotateBarrierDestroy</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a9ec8669fad5689e617f2fa63f017c307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateCondVarWait</definition>
        <argsstring>(const char *file, int line, const volatile void *cv, const volatile void *lock)</argsstring>
        <name>AnnotateCondVarWait</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>cv</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a79926b7f9b0249e2fefac55345c49ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateCondVarSignal</definition>
        <argsstring>(const char *file, int line, const volatile void *cv)</argsstring>
        <name>AnnotateCondVarSignal</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1ad109b92bcd6eec6762cf42b9ced52357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateCondVarSignalAll</definition>
        <argsstring>(const char *file, int line, const volatile void *cv)</argsstring>
        <name>AnnotateCondVarSignalAll</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a035c67d85284d88dd77e53e2f85fddb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotatePublishMemoryRange</definition>
        <argsstring>(const char *file, int line, const volatile void *address, long size)</argsstring>
        <name>AnnotatePublishMemoryRange</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a67fabd25d9fb4123284a6e27c0f13239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateUnpublishMemoryRange</definition>
        <argsstring>(const char *file, int line, const volatile void *address, long size)</argsstring>
        <name>AnnotateUnpublishMemoryRange</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1aff0d1362eb4e5fc7c2896f3a269c5314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotatePCQCreate</definition>
        <argsstring>(const char *file, int line, const volatile void *pcq)</argsstring>
        <name>AnnotatePCQCreate</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>pcq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1af4d2b6b48364cf1d2ee5a2bdd06b2ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotatePCQDestroy</definition>
        <argsstring>(const char *file, int line, const volatile void *pcq)</argsstring>
        <name>AnnotatePCQDestroy</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>pcq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a6833e6c3a02d35ffe284c96cf82be329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotatePCQPut</definition>
        <argsstring>(const char *file, int line, const volatile void *pcq)</argsstring>
        <name>AnnotatePCQPut</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>pcq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1abeec9f7e5c370637dde2b8cefbdc8a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotatePCQGet</definition>
        <argsstring>(const char *file, int line, const volatile void *pcq)</argsstring>
        <name>AnnotatePCQGet</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>pcq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1aa46d1b3a340cfa6c362fdbb45521796f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateNewMemory</definition>
        <argsstring>(const char *file, int line, const volatile void *address, long size)</argsstring>
        <name>AnnotateNewMemory</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1ab3b68dd2abed5c2892f7f1c04ebc4f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateExpectRace</definition>
        <argsstring>(const char *file, int line, const volatile void *address, const char *description)</argsstring>
        <name>AnnotateExpectRace</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1acb553f384fa239d9e1ce4e089b1a2127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBenignRace</definition>
        <argsstring>(const char *file, int line, const volatile void *address, const char *description)</argsstring>
        <name>AnnotateBenignRace</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a0d68dc2d41bf551e2337c3b607162b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateBenignRaceSized</definition>
        <argsstring>(const char *file, int line, const volatile void *address, long size, const char *description)</argsstring>
        <name>AnnotateBenignRaceSized</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a981af3cae41681ed44d0b699bffd4fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateMutexIsUsedAsCondVar</definition>
        <argsstring>(const char *file, int line, const volatile void *mu)</argsstring>
        <name>AnnotateMutexIsUsedAsCondVar</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a6e5ccc1b51398f83f77c2f8c527c01b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateTraceMemory</definition>
        <argsstring>(const char *file, int line, const volatile void *arg)</argsstring>
        <name>AnnotateTraceMemory</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a22c9babdcf119c240b0aa344e9cde015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateThreadName</definition>
        <argsstring>(const char *file, int line, const char *name)</argsstring>
        <name>AnnotateThreadName</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1af0c58156a912f2cec666bf8f351645bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateIgnoreReadsBegin</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>AnnotateIgnoreReadsBegin</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a8d3214679f37d472f5448715a6c5a5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateIgnoreReadsEnd</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>AnnotateIgnoreReadsEnd</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a7528cbe9973812bd77c056260f48edac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateIgnoreWritesBegin</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>AnnotateIgnoreWritesBegin</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a97e4f1603efb96c3a63d8de0a311319b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateIgnoreWritesEnd</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>AnnotateIgnoreWritesEnd</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1ae98ac0bd1d52662ae23f3d91eecae2c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateEnableRaceDetection</definition>
        <argsstring>(const char *file, int line, int enable)</argsstring>
        <name>AnnotateEnableRaceDetection</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1ae6caee223d1981c4d03d4c30513e137c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateNoOp</definition>
        <argsstring>(const char *file, int line, const volatile void *arg)</argsstring>
        <name>AnnotateNoOp</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const volatile void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a4ea13da0131a344adee503c2be487b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AnnotateFlushState</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>AnnotateFlushState</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dynamic__annotations_8h_1a2cac2df354c64f06d576a308740dad22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int RunningOnValgrind</definition>
        <argsstring>(void)</argsstring>
        <name>RunningOnValgrind</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/dynamic_annotations.h" line="456" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2008-2009,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>---</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Kostya<sp/>Serebryany</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Copied<sp/>to<sp/>CPython<sp/>by<sp/>Jeffrey<sp/>Yasskin,<sp/>with<sp/>all<sp/>macros<sp/>renamed<sp/>to</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>start<sp/>with<sp/>_Py_<sp/>to<sp/>avoid<sp/>colliding<sp/>with<sp/>users<sp/>embedding<sp/>Python,<sp/>and</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>with<sp/>deprecated<sp/>macros<sp/>removed.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>file<sp/>defines<sp/>dynamic<sp/>annotations<sp/>for<sp/>use<sp/>with<sp/>dynamic<sp/>analysis</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>tool<sp/>such<sp/>as<sp/>valgrind,<sp/>PIN,<sp/>etc.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>Dynamic<sp/>annotation<sp/>is<sp/>a<sp/>source<sp/>code<sp/>annotation<sp/>that<sp/>affects</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>the<sp/>generated<sp/>code<sp/>(that<sp/>is,<sp/>the<sp/>annotation<sp/>is<sp/>not<sp/>a<sp/>comment).</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>Each<sp/>such<sp/>annotation<sp/>is<sp/>attached<sp/>to<sp/>a<sp/>particular</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/>instruction<sp/>and/or<sp/>to<sp/>a<sp/>particular<sp/>object<sp/>(address)<sp/>in<sp/>the<sp/>program.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>The<sp/>annotations<sp/>that<sp/>should<sp/>be<sp/>used<sp/>by<sp/>users<sp/>are<sp/>macros<sp/>in<sp/>all<sp/>upper-case</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>(e.g.,<sp/>_Py_ANNOTATE_NEW_MEMORY).</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>Actual<sp/>implementation<sp/>of<sp/>these<sp/>macros<sp/>may<sp/>differ<sp/>depending<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>dynamic<sp/>analysis<sp/>tool<sp/>being<sp/>used.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>See<sp/>http://code.google.com/p/data-race-test/<sp/><sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>This<sp/>file<sp/>supports<sp/>the<sp/>following<sp/>dynamic<sp/>analysis<sp/>tools:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>-<sp/>None<sp/>(DYNAMIC_ANNOTATIONS_ENABLED<sp/>is<sp/>not<sp/>defined<sp/>or<sp/>zero).</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Macros<sp/>are<sp/>defined<sp/>empty.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>-<sp/>ThreadSanitizer,<sp/>Helgrind,<sp/>DRD<sp/>(DYNAMIC_ANNOTATIONS_ENABLED<sp/>is<sp/>1).</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Macros<sp/>are<sp/>defined<sp/>as<sp/>calls<sp/>to<sp/>non-inlinable<sp/>empty<sp/>functions</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>are<sp/>intercepted<sp/>by<sp/>Valgrind.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__DYNAMIC_ANNOTATIONS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__DYNAMIC_ANNOTATIONS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DYNAMIC_ANNOTATIONS_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>when<sp/>implementing<sp/>condition<sp/>variables<sp/>such<sp/>as<sp/>CondVar,</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>using<sp/>conditional<sp/>critical<sp/>sections<sp/>(Await/LockWhen)<sp/>and<sp/>when<sp/>constructing</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>user-defined<sp/>synchronization<sp/>mechanisms.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>annotations<sp/>_Py_ANNOTATE_HAPPENS_BEFORE()<sp/>and</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_AFTER()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>define<sp/>happens-before<sp/>arcs<sp/>in</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>user-defined<sp/>synchronization<sp/>mechanisms:<sp/>the<sp/>race<sp/>detector<sp/>will<sp/>infer<sp/>an</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arc<sp/>from<sp/>the<sp/>former<sp/>to<sp/>the<sp/>latter<sp/>when<sp/>they<sp/>share<sp/>the<sp/>same<sp/>argument</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pointer.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Example<sp/>1<sp/>(reference<sp/>counting):</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>void<sp/>Unref()<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_BEFORE(&amp;refcount_);</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(AtomicDecrementByOne(&amp;refcount_)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_AFTER(&amp;refcount_);</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>this;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Example<sp/>2<sp/>(message<sp/>queue):</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>void<sp/>MyQueue::Put(Type<sp/>*e)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MutexLock<sp/>lock(&amp;mu_);</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_BEFORE(e);</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutElementIntoMyQueue(e);</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Type<sp/>*MyQueue::Get()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MutexLock<sp/>lock(&amp;mu_);</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>*e<sp/>=<sp/>GetElementFromMyQueue();</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_AFTER(e);</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>e;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Note:<sp/>when<sp/>possible,<sp/>please<sp/>use<sp/>the<sp/>existing<sp/>reference<sp/>counting<sp/>and<sp/>message</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>queue<sp/>implementations<sp/>instead<sp/>of<sp/>inventing<sp/>new<sp/>ones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>wait<sp/>on<sp/>the<sp/>condition<sp/>variable<sp/>at<sp/>address<sp/>&quot;cv&quot;<sp/>has<sp/>succeeded</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>lock<sp/>at<sp/>address<sp/>&quot;lock&quot;<sp/>is<sp/>held.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_LOCK_WAIT(cv,<sp/>lock)<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateCondVarWait(__FILE__,<sp/>__LINE__,<sp/>cv,<sp/>lock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>wait<sp/>on<sp/>the<sp/>condition<sp/>variable<sp/>at<sp/>&quot;cv&quot;<sp/>has<sp/>succeeded.<sp/><sp/>Variant</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>w/o<sp/>lock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_WAIT(cv)<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateCondVarWait(__FILE__,<sp/>__LINE__,<sp/>cv,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>signal<sp/>on<sp/>the<sp/>condition<sp/>variable<sp/>at<sp/>address</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;cv&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_SIGNAL(cv)<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateCondVarSignal(__FILE__,<sp/>__LINE__,<sp/>cv)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>signal_all<sp/>on<sp/>the<sp/>condition<sp/>variable<sp/>at<sp/>&quot;cv&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_SIGNAL_ALL(cv)<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateCondVarSignalAll(__FILE__,<sp/>__LINE__,<sp/>cv)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Annotations<sp/>for<sp/>user-defined<sp/>synchronization<sp/>mechanisms.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_HAPPENS_BEFORE(obj)<sp/>_Py_ANNOTATE_CONDVAR_SIGNAL(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_HAPPENS_AFTER(obj)<sp/><sp/>_Py_ANNOTATE_CONDVAR_WAIT(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>bytes<sp/>in<sp/>the<sp/>range<sp/>[pointer,<sp/>pointer+size)<sp/>are<sp/>about</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>published<sp/>safely.<sp/>The<sp/>race<sp/>checker<sp/>will<sp/>create<sp/>a<sp/>happens-before</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arc<sp/>from<sp/>the<sp/>call<sp/>_Py_ANNOTATE_PUBLISH_MEMORY_RANGE(pointer,<sp/>size)<sp/>to</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>subsequent<sp/>accesses<sp/>to<sp/>this<sp/>memory.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Note:<sp/>this<sp/>annotation<sp/>may<sp/>not<sp/>work<sp/>properly<sp/>if<sp/>the<sp/>race<sp/>detector<sp/>uses</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>sampling,<sp/>i.e.<sp/>does<sp/>not<sp/>observe<sp/>all<sp/>memory<sp/>accesses.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PUBLISH_MEMORY_RANGE(pointer,<sp/>size)<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotatePublishMemoryRange(__FILE__,<sp/>__LINE__,<sp/>pointer,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Instruct<sp/>the<sp/>tool<sp/>to<sp/>create<sp/>a<sp/>happens-before<sp/>arc<sp/>between<sp/>mu-&gt;Unlock()<sp/>and</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mu-&gt;Lock().<sp/>This<sp/>annotation<sp/>may<sp/>slow<sp/>down<sp/>the<sp/>race<sp/>detector<sp/>and<sp/>hide<sp/>real</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>races.<sp/>Normally<sp/>it<sp/>is<sp/>used<sp/>only<sp/>when<sp/>it<sp/>would<sp/>be<sp/>difficult<sp/>to<sp/>annotate<sp/>each</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>mutex&apos;s<sp/>critical<sp/>sections<sp/>individually<sp/>using<sp/>the<sp/>annotations<sp/>above.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>annotation<sp/>makes<sp/>sense<sp/>only<sp/>for<sp/>hybrid<sp/>race<sp/>detectors.<sp/>For<sp/>pure</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>happens-before<sp/>detectors<sp/>this<sp/>is<sp/>a<sp/>no-op.<sp/>For<sp/>more<sp/>details<sp/>see</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>http://code.google.com/p/data-race-test/wiki/PureHappensBeforeVsHybrid<sp/>.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PURE_HAPPENS_BEFORE_MUTEX(mu)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateMutexIsUsedAsCondVar(__FILE__,<sp/>__LINE__,<sp/>mu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>when<sp/>defining<sp/>memory<sp/>allocators,<sp/>or<sp/>when<sp/>memory<sp/>that</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>was<sp/>protected<sp/>in<sp/>one<sp/>way<sp/>starts<sp/>to<sp/>be<sp/>protected<sp/>in<sp/>another.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>a<sp/>new<sp/>memory<sp/>at<sp/>&quot;address&quot;<sp/>of<sp/>size<sp/>&quot;size&quot;<sp/>has<sp/>been<sp/>allocated.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>might<sp/>be<sp/>used<sp/>when<sp/>the<sp/>memory<sp/>has<sp/>been<sp/>retrieved<sp/>from<sp/>a<sp/>free<sp/>list<sp/>and</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>is<sp/>about<sp/>to<sp/>be<sp/>reused,<sp/>or<sp/>when<sp/>the<sp/>locking<sp/>discipline<sp/>for<sp/>a<sp/>variable</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_NEW_MEMORY(address,<sp/>size)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateNewMemory(__FILE__,<sp/>__LINE__,<sp/>address,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>when<sp/>defining<sp/>FIFO<sp/>queues<sp/>that<sp/>transfer<sp/>data<sp/>between</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>threads.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>producer-consumer<sp/>queue<sp/>(such<sp/>as<sp/>ProducerConsumerQueue)<sp/>at</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>address<sp/>&quot;pcq&quot;<sp/>has<sp/>been<sp/>created.<sp/><sp/>The<sp/>_Py_ANNOTATE_PCQ_*<sp/>annotations<sp/>should</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>only<sp/>for<sp/>FIFO<sp/>queues.<sp/><sp/>For<sp/>non-FIFO<sp/>queues<sp/>use</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_HAPPENS_BEFORE<sp/>(for<sp/>put)<sp/>and<sp/>_Py_ANNOTATE_HAPPENS_AFTER<sp/>(for</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>get).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_CREATE(pcq)<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotatePCQCreate(__FILE__,<sp/>__LINE__,<sp/>pcq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>queue<sp/>at<sp/>address<sp/>&quot;pcq&quot;<sp/>is<sp/>about<sp/>to<sp/>be<sp/>destroyed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_DESTROY(pcq)<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotatePCQDestroy(__FILE__,<sp/>__LINE__,<sp/>pcq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>put<sp/>an<sp/>element<sp/>into<sp/>a<sp/>FIFO<sp/>queue<sp/>at<sp/>address</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;pcq&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_PUT(pcq)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotatePCQPut(__FILE__,<sp/>__LINE__,<sp/>pcq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we&apos;ve<sp/>just<sp/>got<sp/>an<sp/>element<sp/>from<sp/>a<sp/>FIFO<sp/>queue<sp/>at<sp/>address<sp/>&quot;pcq&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_GET(pcq)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotatePCQGet(__FILE__,<sp/>__LINE__,<sp/>pcq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>that<sp/>suppress<sp/>errors.<sp/><sp/>It<sp/>is<sp/>usually<sp/>better<sp/>to<sp/>express<sp/>the</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>program&apos;s<sp/>synchronization<sp/>using<sp/>the<sp/>other<sp/>annotations,<sp/>but<sp/>these<sp/>can</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>when<sp/>all<sp/>else<sp/>fails.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>may<sp/>have<sp/>a<sp/>benign<sp/>race<sp/>at<sp/>&quot;pointer&quot;,<sp/>with<sp/>size</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;sizeof(*(pointer))&quot;.<sp/>&quot;pointer&quot;<sp/>must<sp/>be<sp/>a<sp/>non-void*<sp/>pointer.<sp/><sp/>Insert<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>point<sp/>where<sp/>&quot;pointer&quot;<sp/>has<sp/>been<sp/>allocated,<sp/>preferably<sp/>close<sp/>to<sp/>the<sp/>point</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>where<sp/>the<sp/>race<sp/>happens.<sp/><sp/>See<sp/>also<sp/>_Py_ANNOTATE_BENIGN_RACE_STATIC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE(pointer,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBenignRaceSized(__FILE__,<sp/>__LINE__,<sp/>pointer,<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(*(pointer)),<sp/>description)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Same<sp/>as<sp/>_Py_ANNOTATE_BENIGN_RACE(address,<sp/>description),<sp/>but<sp/>applies<sp/>to</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>memory<sp/>range<sp/>[address,<sp/>address+size).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE_SIZED(address,<sp/>size,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBenignRaceSized(__FILE__,<sp/>__LINE__,<sp/>address,<sp/>size,<sp/>description)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>the<sp/>analysis<sp/>tool<sp/>to<sp/>ignore<sp/>all<sp/>reads<sp/>in<sp/>the<sp/>current<sp/>thread</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>until<sp/>_Py_ANNOTATE_IGNORE_READS_END<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Useful<sp/>to<sp/>ignore<sp/>intentional<sp/>racey<sp/>reads,<sp/>while<sp/>still<sp/>checking</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>other<sp/>reads<sp/>and<sp/>all<sp/>writes.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>See<sp/>also<sp/>_Py_ANNOTATE_UNPROTECTED_READ.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN()<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreReadsBegin(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>ignoring<sp/>reads.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_END()<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreReadsEnd(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN,<sp/>but<sp/>ignore<sp/>writes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_WRITES_BEGIN()<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreWritesBegin(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>ignoring<sp/>writes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_WRITES_END()<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreWritesEnd(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>ignoring<sp/>all<sp/>memory<sp/>accesses<sp/>(reads<sp/>and<sp/>writes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN()<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN();\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_WRITES_BEGIN();\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>ignoring<sp/>all<sp/>memory<sp/>accesses.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_END()<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_WRITES_END();\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_END();\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN,<sp/>but<sp/>ignore<sp/>synchronization<sp/>events:</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>RWLOCK*<sp/>and<sp/>CONDVAR*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_SYNC_BEGIN()<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreSyncBegin(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>ignoring<sp/>sync<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_SYNC_END()<sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateIgnoreSyncEnd(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>(enable!=0)<sp/>or<sp/>disable<sp/>(enable==0)<sp/>race<sp/>detection<sp/>for<sp/>all<sp/>threads.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>annotation<sp/>could<sp/>be<sp/>useful<sp/>if<sp/>you<sp/>want<sp/>to<sp/>skip<sp/>expensive<sp/>race<sp/>analysis</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>during<sp/>some<sp/>period<sp/>of<sp/>program<sp/>execution,<sp/>e.g.<sp/>during<sp/>initialization.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_ENABLE_RACE_DETECTION(enable)<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateEnableRaceDetection(__FILE__,<sp/>__LINE__,<sp/>enable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>for<sp/>debugging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>to<sp/>trace<sp/>every<sp/>access<sp/>to<sp/>&quot;address&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_TRACE_MEMORY(address)<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateTraceMemory(__FILE__,<sp/>__LINE__,<sp/>address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>the<sp/>current<sp/>thread<sp/>name<sp/>to<sp/>a<sp/>race<sp/>detector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_THREAD_NAME(name)<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateThreadName(__FILE__,<sp/>__LINE__,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>when<sp/>implementing<sp/>locks.<sp/><sp/>They<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>normally<sp/>needed<sp/>by<sp/>modules<sp/>that<sp/>merely<sp/>use<sp/>locks.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>&quot;lock&quot;<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>lock<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>a<sp/>lock<sp/>has<sp/>been<sp/>created<sp/>at<sp/>address<sp/>&quot;lock&quot;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_CREATE(lock)<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateRWLockCreate(__FILE__,<sp/>__LINE__,<sp/>lock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>lock<sp/>at<sp/>address<sp/>&quot;lock&quot;<sp/>is<sp/>about<sp/>to<sp/>be<sp/>destroyed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_DESTROY(lock)<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateRWLockDestroy(__FILE__,<sp/>__LINE__,<sp/>lock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>lock<sp/>at<sp/>address<sp/>&quot;lock&quot;<sp/>has<sp/>been<sp/>acquired.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>is_w=1<sp/>for<sp/>writer<sp/>lock,<sp/>is_w=0<sp/>for<sp/>reader<sp/>lock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_ACQUIRED(lock,<sp/>is_w)<sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateRWLockAcquired(__FILE__,<sp/>__LINE__,<sp/>lock,<sp/>is_w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>lock<sp/>at<sp/>address<sp/>&quot;lock&quot;<sp/>is<sp/>about<sp/>to<sp/>be<sp/>released.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_RELEASED(lock,<sp/>is_w)<sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateRWLockReleased(__FILE__,<sp/>__LINE__,<sp/>lock,<sp/>is_w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>when<sp/>implementing<sp/>barriers.<sp/><sp/>They<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>normally<sp/>needed<sp/>by<sp/>modules<sp/>that<sp/>merely<sp/>use<sp/>barriers.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>&quot;barrier&quot;<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>barrier<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>&quot;barrier&quot;<sp/>has<sp/>been<sp/>initialized<sp/>with<sp/>initial<sp/>&quot;count&quot;.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/>If<sp/>&apos;reinitialization_allowed&apos;<sp/>is<sp/>true,<sp/>initialization<sp/>is<sp/>allowed<sp/>to<sp/>happen</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/>multiple<sp/>times<sp/>w/o<sp/>calling<sp/>barrier_destroy()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_INIT(barrier,<sp/>count,<sp/>reinitialization_allowed)<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBarrierInit(__FILE__,<sp/>__LINE__,<sp/>barrier,<sp/>count,<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinitialization_allowed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>enter<sp/>barrier_wait(&quot;barrier&quot;).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_WAIT_BEFORE(barrier)<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBarrierWaitBefore(__FILE__,<sp/>__LINE__,<sp/>barrier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>just<sp/>exited<sp/>barrier_wait(&quot;barrier&quot;).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_WAIT_AFTER(barrier)<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBarrierWaitAfter(__FILE__,<sp/>__LINE__,<sp/>barrier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>the<sp/>&quot;barrier&quot;<sp/>has<sp/>been<sp/>destroyed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_DESTROY(barrier)<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateBarrierDestroy(__FILE__,<sp/>__LINE__,<sp/>barrier)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Annotations<sp/>useful<sp/>for<sp/>testing<sp/>race<sp/>detectors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Report<sp/>that<sp/>we<sp/>expect<sp/>a<sp/>race<sp/>on<sp/>the<sp/>variable<sp/>at<sp/>&quot;address&quot;.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Use<sp/>only<sp/>in<sp/>unit<sp/>tests<sp/>for<sp/>a<sp/>race<sp/>detector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_EXPECT_RACE(address,<sp/>description)<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateExpectRace(__FILE__,<sp/>__LINE__,<sp/>address,<sp/>description)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>no-op.<sp/>Insert<sp/>where<sp/>you<sp/>like<sp/>to<sp/>test<sp/>the<sp/>interceptors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_NO_OP(arg)<sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateNoOp(__FILE__,<sp/>__LINE__,<sp/>arg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>the<sp/>race<sp/>detector<sp/>to<sp/>flush<sp/>its<sp/>state.<sp/>The<sp/>actual<sp/>effect<sp/>depends<sp/>on</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>detector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_FLUSH_STATE()<sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>AnnotateFlushState(__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>==<sp/>0<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_CREATE(lock)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_DESTROY(lock)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_ACQUIRED(lock,<sp/>is_w)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_RWLOCK_RELEASED(lock,<sp/>is_w)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_INIT(barrier,<sp/>count,<sp/>reinitialization_allowed)<sp/></highlight><highlight class="comment">/*<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_WAIT_BEFORE(barrier)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_WAIT_AFTER(barrier)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BARRIER_DESTROY(barrier)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_LOCK_WAIT(cv,<sp/>lock)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_WAIT(cv)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_SIGNAL(cv)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_CONDVAR_SIGNAL_ALL(cv)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_HAPPENS_BEFORE(obj)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_HAPPENS_AFTER(obj)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PUBLISH_MEMORY_RANGE(address,<sp/>size)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_UNPUBLISH_MEMORY_RANGE(address,<sp/>size)<sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_SWAP_MEMORY_RANGE(address,<sp/>size)<sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_CREATE(pcq)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_DESTROY(pcq)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_PUT(pcq)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PCQ_GET(pcq)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_NEW_MEMORY(address,<sp/>size)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_EXPECT_RACE(address,<sp/>description)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE(address,<sp/>description)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE_SIZED(address,<sp/>size,<sp/>description)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_PURE_HAPPENS_BEFORE_MUTEX(mu)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_MUTEX_IS_USED_AS_CONDVAR(mu)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_TRACE_MEMORY(arg)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_THREAD_NAME(name)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_END()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_WRITES_BEGIN()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_WRITES_END()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_READS_AND_WRITES_END()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_SYNC_BEGIN()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_IGNORE_SYNC_END()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_ENABLE_RACE_DETECTION(enable)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_NO_OP(arg)<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_FLUSH_STATE()<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>macros<sp/>above<sp/>rather<sp/>than<sp/>using<sp/>these<sp/>functions<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateRWLockCreate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lock);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateRWLockDestroy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lock);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateRWLockAcquired(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lock,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>is_w);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateRWLockReleased(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lock,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>is_w);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBarrierInit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*barrier,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>reinitialization_allowed);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBarrierWaitBefore(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*barrier);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBarrierWaitAfter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*barrier);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBarrierDestroy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*barrier);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateCondVarWait(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cv,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lock);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateCondVarSignal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cv);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateCondVarSignalAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cv);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotatePublishMemoryRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateUnpublishMemoryRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotatePCQCreate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pcq);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotatePCQDestroy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pcq);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotatePCQPut(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pcq);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotatePCQGet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pcq);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateNewMemory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateExpectRace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBenignRace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateBenignRaceSized(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*description);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateMutexIsUsedAsCondVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mu);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateTraceMemory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateThreadName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateIgnoreReadsBegin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateIgnoreReadsEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateIgnoreWritesBegin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateIgnoreWritesEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateEnableRaceDetection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateNoOp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnnotateFlushState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>non-zero<sp/>value<sp/>if<sp/>running<sp/>under<sp/>valgrind.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>If<sp/>&quot;valgrind.h&quot;<sp/>is<sp/>included<sp/>into<sp/>dynamic_annotations.c,</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>the<sp/>regular<sp/>valgrind<sp/>mechanism<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>See<sp/>http://valgrind.org/docs/manual/manual-core-adv.html<sp/>about</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>RUNNING_ON_VALGRIND<sp/>and<sp/>other<sp/>valgrind<sp/>&quot;client<sp/>requests&quot;.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/>The<sp/>file<sp/>&quot;valgrind.h&quot;<sp/>may<sp/>be<sp/>obtained<sp/>by<sp/>doing</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>svn<sp/>co<sp/>svn://svn.valgrind.org/valgrind/trunk/include</highlight></codeline>
<codeline lineno="449"><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/>If<sp/>for<sp/>some<sp/>reason<sp/>you<sp/>can&apos;t<sp/>use<sp/>&quot;valgrind.h&quot;<sp/>or<sp/>want<sp/>to<sp/>fake<sp/>valgrind,</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>there<sp/>are<sp/>two<sp/>ways<sp/>to<sp/>make<sp/>this<sp/>function<sp/>return<sp/>non-zero:</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>Use<sp/>environment<sp/>variable:<sp/>export<sp/>RUNNING_ON_VALGRIND=1</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/>-<sp/>Make<sp/>your<sp/>tool<sp/>intercept<sp/>the<sp/>function<sp/>RunningOnValgrind()<sp/>and</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>change<sp/>its<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunningOnValgrind(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>_Py_ANNOTATE_UNPROTECTED_READ<sp/>is<sp/>the<sp/>preferred<sp/>way<sp/>to<sp/>annotate<sp/>racey<sp/>reads.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Instead<sp/>of<sp/>doing</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN();</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_END();</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>one<sp/>can<sp/>use</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>=<sp/>_Py_ANNOTATE_UNPROTECTED_READ(x);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>_Py_ANNOTATE_UNPROTECTED_READ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_BEGIN();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>res<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>_Py_ANNOTATE_IGNORE_READS_END();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Apply<sp/>_Py_ANNOTATE_BENIGN_RACE_SIZED<sp/>to<sp/>a<sp/>static<sp/>variable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE_STATIC(static_var,<sp/>description)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>class<sp/>static_var<sp/>##<sp/>_annotator<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_var<sp/>##<sp/>_annotator()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_ANNOTATE_BENIGN_RACE_SIZED(&amp;static_var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(static_var),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>static_var<sp/>&quot;:<sp/>&quot;<sp/>description);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>static_var<sp/>##<sp/>_annotator<sp/>the<sp/>##<sp/>static_var<sp/>##<sp/>_annotator;\</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>==<sp/>0<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_UNPROTECTED_READ(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ANNOTATE_BENIGN_RACE_STATIC(static_var,<sp/>description)<sp/><sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DYNAMIC_ANNOTATIONS_ENABLED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__DYNAMIC_ANNOTATIONS_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/dynamic_annotations.h"/>
  </compounddef>
</doxygen>
