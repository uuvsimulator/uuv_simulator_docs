<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="weakrefobject_8h" kind="file" language="C++">
    <compoundname>weakrefobject.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="3816">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3817">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3813">
        <label>/usr/include/python3.6m/weakrefobject.h</label>
        <link refid="weakrefobject_8h"/>
        <childnode refid="3814" relation="include">
        </childnode>
      </node>
      <node id="3819">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3814">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3815" relation="include">
        </childnode>
        <childnode refid="3817" relation="include">
        </childnode>
        <childnode refid="3818" relation="include">
        </childnode>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3820" relation="include">
        </childnode>
      </node>
      <node id="3820">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3815">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3816" relation="include">
        </childnode>
      </node>
      <node id="3818">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct___py_weak_reference" prot="public">_PyWeakReference</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="weakrefobject_8h_1acc47a9d9700a1457bbc2e70e8a0088ea" prot="public" static="no">
        <name>PyWeakref_CheckRef</name>
        <param><defname>op</defname></param>
        <initializer>PyObject_TypeCheck(op, &amp;_PyWeakref_RefType)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="47" column="9" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="weakrefobject_8h_1a52e7d152fa23fd2b407aef47846b495f" prot="public" static="no">
        <name>PyWeakref_CheckRefExact</name>
        <param><defname>op</defname></param>
        <initializer>(Py_TYPE(op) == &amp;_PyWeakref_RefType)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="48" column="9" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="weakrefobject_8h_1a760406f2acdec3728dcd35095a73082d" prot="public" static="no">
        <name>PyWeakref_CheckProxy</name>
        <param><defname>op</defname></param>
        <initializer>((Py_TYPE(op) == &amp;_PyWeakref_ProxyType) || \
         (Py_TYPE(op) == &amp;_PyWeakref_CallableProxyType))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="50" column="9" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="weakrefobject_8h_1a53cc0b0f3fd8ffe45cc83c9462e185f5" prot="public" static="no">
        <name>PyWeakref_Check</name>
        <param><defname>op</defname></param>
        <initializer>(PyWeakref_CheckRef(op) || PyWeakref_CheckProxy(op))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="54" column="9" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="weakrefobject_8h_1a79c55d7cdfd7e6672b7eefcf8d286d07" prot="public" static="no">
        <name>PyWeakref_GET_OBJECT</name>
        <param><defname>ref</defname></param>
        <initializer>(Py_REFCNT(((<ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref> *)(ref))-&gt;wr_object) &gt; 0   \
     ? ((<ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref> *)(ref))-&gt;wr_object                \
     : Py_None)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="77" column="9" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="weakrefobject_8h_1a7d8920320e9b260a1cab32ab0380add2" prot="public" static="no">
        <type>struct <ref refid="struct___py_weak_reference" kindref="compound">_PyWeakReference</ref></type>
        <definition>typedef struct _PyWeakReference PyWeakReference</definition>
        <argsstring></argsstring>
        <name>PyWeakReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="51" column="1" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="weakrefobject_8h_1adec875b7d7d5b29e2741082daf99dde9" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject * callback</definition>
        <argsstring></argsstring>
        <name>callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="59" column="1" bodyfile="/usr/include/python3.6m/weakrefobject.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="weakrefobject_8h_1af0a8dfbe115c8dcf14d297413297b6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) _PyWeakref_RefType</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="weakrefobject_8h_1a1ec066f652cb8ef0f3dab95218d7c2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyWeakref_NewRef(PyObject *ob</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="weakrefobject_8h_1a69760dc50ca7b331bc93fa4b2d65186f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(Py_ssize_t) _PyWeakref_GetWeakrefCount(PyWeakReference *head)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_ssize_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="weakrefobject_8h_1a10b0ab9fbfe09e066f05f5b5acb11a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) _PyWeakref_ClearRef(PyWeakReference *self)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/weakrefobject.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Weak<sp/>references<sp/>objects<sp/>for<sp/>Python.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_WEAKREFOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_WEAKREFOBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py_weak_reference" kindref="compound">_PyWeakReference</ref><sp/><ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyWeakReference<sp/>is<sp/>the<sp/>base<sp/>struct<sp/>for<sp/>the<sp/>Python<sp/>ReferenceType,<sp/>ProxyType,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>and<sp/>CallableProxyType.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="struct___py_weak_reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py_weak_reference" kindref="compound">_PyWeakReference</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>object<sp/>to<sp/>which<sp/>this<sp/>is<sp/>a<sp/>weak<sp/>reference,<sp/>or<sp/>Py_None<sp/>if<sp/>none.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>a<sp/>stealth<sp/>reference:<sp/><sp/>wr_object&apos;s<sp/>refcount<sp/>is</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>not<sp/>incremented<sp/>to<sp/>reflect<sp/>this<sp/>pointer.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*wr_object;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>callable<sp/>to<sp/>invoke<sp/>when<sp/>wr_object<sp/>dies,<sp/>or<sp/>NULL<sp/>if<sp/>none.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*wr_callback;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>cache<sp/>for<sp/>wr_object&apos;s<sp/>hash<sp/>code.<sp/><sp/>As<sp/>usual<sp/>for<sp/>hashes,<sp/>this<sp/>is<sp/>-1</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>the<sp/>hash<sp/>code<sp/>isn&apos;t<sp/>known<sp/>yet.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_hash_t<sp/>hash;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>wr_object<sp/>is<sp/>weakly<sp/>referenced,<sp/>wr_object<sp/>has<sp/>a<sp/>doubly-linked<sp/>NULL-</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>terminated<sp/>list<sp/>of<sp/>weak<sp/>references<sp/>to<sp/>it.<sp/><sp/>These<sp/>are<sp/>the<sp/>list<sp/>pointers.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>wr_object<sp/>goes<sp/>away,<sp/>wr_object<sp/>is<sp/>set<sp/>to<sp/>Py_None,<sp/>and<sp/>these<sp/>pointers</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>have<sp/>no<sp/>meaning<sp/>then.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref><sp/>*wr_prev;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref><sp/>*wr_next;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>_PyWeakref_RefType;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>_PyWeakref_ProxyType;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">PyAPI_DATA(<ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref>)<sp/>_PyWeakref_CallableProxyType;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyWeakref_CheckRef(op)<sp/>PyObject_TypeCheck(op,<sp/>&amp;_PyWeakref_RefType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyWeakref_CheckRefExact(op)<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;_PyWeakref_RefType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyWeakref_CheckProxy(op)<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Py_TYPE(op)<sp/>==<sp/>&amp;_PyWeakref_ProxyType)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;_PyWeakref_CallableProxyType))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyWeakref_Check(op)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyWeakref_CheckRef(op)<sp/>||<sp/>PyWeakref_CheckProxy(op))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyWeakref_NewRef(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*ob,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callback);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyWeakref_NewProxy(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*ob,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*callback);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyWeakref_GetObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*ref);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>_PyWeakref_GetWeakrefCount(<ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref><sp/>*head);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyWeakref_ClearRef(<ref refid="struct___py_weak_reference" kindref="compound">PyWeakReference</ref><sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Explanation<sp/>for<sp/>the<sp/>Py_REFCNT()<sp/>check:<sp/>when<sp/>a<sp/>weakref&apos;s<sp/>target<sp/>is<sp/>part</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>of<sp/>a<sp/>long<sp/>chain<sp/>of<sp/>deallocations<sp/>which<sp/>triggers<sp/>the<sp/>trashcan<sp/>mechanism,</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>clearing<sp/>the<sp/>weakrefs<sp/>can<sp/>be<sp/>delayed<sp/>long<sp/>after<sp/>the<sp/>target&apos;s<sp/>refcount</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>has<sp/>dropped<sp/>to<sp/>zero.<sp/><sp/>In<sp/>the<sp/>meantime,<sp/>code<sp/>accessing<sp/>the<sp/>weakref<sp/>will</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>be<sp/>able<sp/>to<sp/>&quot;see&quot;<sp/>the<sp/>target<sp/>object<sp/>even<sp/>though<sp/>it<sp/>is<sp/>supposed<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>unreachable.<sp/><sp/>See<sp/>issue<sp/>#16602.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyWeakref_GET_OBJECT(ref)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(Py_REFCNT(((PyWeakReference<sp/>*)(ref))-&gt;wr_object)<sp/>&gt;<sp/>0<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>?<sp/>((PyWeakReference<sp/>*)(ref))-&gt;wr_object<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>Py_None)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_WEAKREFOBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/weakrefobject.h"/>
  </compounddef>
</doxygen>
