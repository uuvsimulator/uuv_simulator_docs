<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="modsupport_8h" kind="file" language="C++">
    <compoundname>modsupport.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <incdepgraph>
      <node id="3231">
        <label>stdarg.h</label>
      </node>
      <node id="3230">
        <label>/usr/include/python3.6m/modsupport.h</label>
        <link refid="modsupport_8h"/>
        <childnode refid="3231" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3235">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3236">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3238">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3233">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3236" relation="include">
        </childnode>
        <childnode refid="3237" relation="include">
        </childnode>
        <childnode refid="3238" relation="include">
        </childnode>
        <childnode refid="3239" relation="include">
        </childnode>
      </node>
      <node id="3239">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3234">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3235" relation="include">
        </childnode>
      </node>
      <node id="3232">
        <label>/usr/include/python3.6m/modsupport.h</label>
        <link refid="modsupport_8h"/>
        <childnode refid="3233" relation="include">
        </childnode>
      </node>
      <node id="3237">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct___py_arg___parser" prot="public">_PyArg_Parser</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="modsupport_8h_1a6cbfca52d36ed42de7445519b516b255" prot="public" static="no">
        <name>PyModule_AddIntMacro</name>
        <param><defname>m</defname></param>
        <param><defname>c</defname></param>
        <initializer>PyModule_AddIntConstant(m, #c, c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="78" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1a01418725e619664971b649a4682a2601" prot="public" static="no">
        <name>PyModule_AddStringMacro</name>
        <param><defname>m</defname></param>
        <param><defname>c</defname></param>
        <initializer>PyModule_AddStringConstant(m, #c, c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="79" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1a21a9e5f339cfd4075fff70074df4ecc3" prot="public" static="no">
        <name>Py_CLEANUP_SUPPORTED</name>
        <initializer>0x20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="88" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1a171960cb31aa6b3fc740317ead6ca6d0" prot="public" static="no">
        <name>PYTHON_API_VERSION</name>
        <initializer>1013</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="90" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1a7ec076611bdf91ebc8f35fdd2303d759" prot="public" static="no">
        <name>PYTHON_API_STRING</name>
        <initializer>&quot;1013&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="91" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1ace9ad682f2b1f382b91f1e7cf6bd2acb" prot="public" static="no">
        <name>PYTHON_ABI_VERSION</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="139" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1a9ba2beb1fde481a712bb1f5050ae5132" prot="public" static="no">
        <name>PYTHON_ABI_STRING</name>
        <initializer>&quot;3&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="140" column="9" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1ad7fd1cf5a3c90e27ac7913841939b7cf" prot="public" static="no">
        <name>PyModule_Create</name>
        <param><defname>module</defname></param>
        <initializer>PyModule_Create2(module, PYTHON_API_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="157" column="10" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="modsupport_8h_1ab99c3a6320aad37cca06f09fb16b071a" prot="public" static="no">
        <name>PyModule_FromDefAndSpec</name>
        <param><defname>module</defname></param>
        <param><defname>spec</defname></param>
        <initializer>PyModule_FromDefAndSpec2(module, spec, PYTHON_API_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="171" column="10" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="modsupport_8h_1a1fb010382947385aabeca00a80e72c26" prot="public" static="no">
        <type>struct <ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref></type>
        <definition>typedef struct _PyArg_Parser  _PyArg_Parser</definition>
        <argsstring></argsstring>
        <name>_PyArg_Parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="60" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="modsupport_8h_1afdfe5a76cfc846fc5d3ffbc18f8b40de" prot="public" static="no" mutable="no">
        <type></type>
        <definition>PyObject struct _PyArg_Parser Py_ssize_t PyObject struct _PyArg_Parser PyObject struct _PyArg_Parser va_list</definition>
        <argsstring></argsstring>
        <name>va_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="24" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a819a5ad228043bf971715e939fcddeb8" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="39" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a9dc5414501ed3d507ed86a121477d3be" prot="public" static="no" mutable="no">
        <type>const char <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>const char PyObject* kw</definition>
        <argsstring></argsstring>
        <name>kw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="44" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1ad61773d508168edac5109211128610c7" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="45" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a0e461f6b0d211a88ea4858fb41389005" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> struct <ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref> Py_ssize_t</type>
        <definition>PyObject struct _PyArg_Parser Py_ssize_t nargs</definition>
        <argsstring></argsstring>
        <name>nargs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="68" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a61535cb70c70f3e688a0e0dc199312c4" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> struct <ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref> Py_ssize_t <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject struct _PyArg_Parser Py_ssize_t PyObject* kwnames</definition>
        <argsstring></argsstring>
        <name>kwnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="68" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a0cb68e00fb9fb1260ee2daadd9fe6611" prot="public" static="no" mutable="no">
        <type>const char <ref refid="struct__object" kindref="compound">PyObject</ref> const char</type>
        <definition>const char PyObject const char long</definition>
        <argsstring></argsstring>
        <name>long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="76" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1af28122d0f9fde6e048b6c5c44bbafcd3" prot="public" static="no" mutable="no">
        <type>const char <ref refid="struct_py_method_def" kindref="compound">PyMethodDef</ref> <ref refid="struct_py_module_def" kindref="compound">PyModuleDef</ref> *</type>
        <definition>const char PyMethodDef PyModuleDef* def</definition>
        <argsstring></argsstring>
        <name>def</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="85" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a46c9e15c261ef13e44f9948ab8982c9e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int apiver</definition>
        <argsstring></argsstring>
        <name>apiver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="151" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1a665043fb725986e61be6bdc1a307f4b5" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* spec</definition>
        <argsstring></argsstring>
        <name>spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="164" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="modsupport_8h_1abf7836f8bc8f7c1cdbfaebbf626b138e" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> int</type>
        <definition>PyObject int module_api_version</definition>
        <argsstring></argsstring>
        <name>module_api_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="165" column="1" bodyfile="/usr/include/python3.6m/modsupport.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="modsupport_8h_1a3709386c715edfae0f9d8f75c36cf58c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) _Py_VaBuildValue_SizeT(const char *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="modsupport_8h_1a751b520bdcb0f26b052f46ac6f117c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyArg_Parse(PyObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="modsupport_8h_1ac39615b70a4b2f2a30e1d9b7f3e453cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PyArg_Fini</definition>
        <argsstring>(void)</argsstring>
        <name>_PyArg_Fini</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="modsupport_8h_1a8f6fa4e607d94e55b678a0c5ce14c185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(char *) _Py_PackageContext</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/modsupport.h" line="177" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_MODSUPPORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_MODSUPPORT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>support<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>PY_SSIZE_T_CLEAN<sp/>is<sp/>defined,<sp/>each<sp/>functions<sp/>treats<sp/>#-specifier</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>to<sp/>mean<sp/>Py_ssize_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyArg_Parse<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyArg_Parse_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyArg_ParseTuple<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyArg_ParseTuple_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyArg_ParseTupleAndKeywords<sp/><sp/><sp/><sp/><sp/>_PyArg_ParseTupleAndKeywords_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyArg_VaParse<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyArg_VaParse_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyArg_VaParseTupleAndKeywords<sp/><sp/><sp/>_PyArg_VaParseTupleAndKeywords_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_BuildValue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_BuildValue_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_VaBuildValue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_VaBuildValue_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_Py_VaBuildValue_SizeT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>va_list);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Due<sp/>to<sp/>a<sp/>glitch<sp/>in<sp/>3.2,<sp/>the<sp/>_SizeT<sp/>versions<sp/>weren&apos;t<sp/>exported<sp/>from<sp/>the<sp/>DLL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(PY_SSIZE_T_CLEAN)<sp/>||<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_Parse(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_ParseTuple(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_ParseTupleAndKeywords(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/>...);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_VaParse(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>va_list);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_VaParseTupleAndKeywords(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/>va_list);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_ValidateKeywordArguments(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArg_UnpackTuple(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>Py_ssize_t,<sp/>Py_ssize_t,<sp/>...);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>Py_BuildValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>_Py_BuildValue_SizeT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyArg_NoKeywords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kw);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyArg_NoPositional(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*args);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>Py_VaBuildValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>va_list);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="struct___py_arg___parser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*keywords;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*custom_msg;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>positional-only<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>minimal<sp/>number<sp/>of<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maximal<sp/>number<sp/>of<sp/>positional<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwtuple;<sp/><sp/></highlight><highlight class="comment">/*<sp/>tuple<sp/>of<sp/>keyword<sp/>parameter<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref><sp/>*next;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<sp/><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyArg_ParseTupleAndKeywordsFast<sp/><sp/>_PyArg_ParseTupleAndKeywordsFast_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyArg_ParseStack<sp/><sp/>_PyArg_ParseStack_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyArg_VaParseTupleAndKeywordsFast<sp/><sp/>_PyArg_VaParseTupleAndKeywordsFast_SizeT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyArg_ParseTupleAndKeywordsFast(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyArg_ParseStack(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>**args,<sp/>Py_ssize_t<sp/>nargs,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*kwnames,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref><sp/>*,<sp/>...);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyArg_VaParseTupleAndKeywordsFast(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py_arg___parser" kindref="compound">_PyArg_Parser</ref><sp/>*,<sp/>va_list);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_PyArg_Fini(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_AddObject(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_AddIntConstant(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_AddStringConstant(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_AddIntMacro(m,<sp/>c)<sp/>PyModule_AddIntConstant(m,<sp/>#c,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_AddStringMacro(m,<sp/>c)<sp/>PyModule_AddStringConstant(m,<sp/>#c,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>New<sp/>in<sp/>3.5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_SetDocString(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_AddFunctions(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/><ref refid="struct_py_method_def" kindref="compound">PyMethodDef</ref><sp/>*);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyModule_ExecDef(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*module,<sp/><ref refid="struct_py_module_def" kindref="compound">PyModuleDef</ref><sp/>*def);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_CLEANUP_SUPPORTED<sp/>0x20000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYTHON_API_VERSION<sp/>1013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYTHON_API_STRING<sp/>&quot;1013&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>API<sp/>version<sp/>is<sp/>maintained<sp/>(independently<sp/>from<sp/>the<sp/>Python<sp/>version)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>so<sp/>we<sp/>can<sp/>detect<sp/>mismatches<sp/>between<sp/>the<sp/>interpreter<sp/>and<sp/>dynamically</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>loaded<sp/>modules.<sp/><sp/>These<sp/>are<sp/>diagnosed<sp/>by<sp/>an<sp/>error<sp/>message<sp/>but</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>the<sp/>module<sp/>is<sp/>still<sp/>loaded<sp/>(because<sp/>the<sp/>mismatch<sp/>can<sp/>only<sp/>be<sp/>tested</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>after<sp/>loading<sp/>the<sp/>module).<sp/><sp/>The<sp/>error<sp/>message<sp/>is<sp/>intended<sp/>to</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>explain<sp/>the<sp/>core<sp/>dump<sp/>a<sp/>few<sp/>seconds<sp/>later.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>The<sp/>symbol<sp/>PYTHON_API_STRING<sp/>defines<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>string</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>literal.<sp/><sp/>***<sp/>PLEASE<sp/>MAKE<sp/>SURE<sp/>THE<sp/>DEFINITIONS<sp/>MATCH.<sp/>***</highlight></codeline>
<codeline lineno="101"><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>Please<sp/>add<sp/>a<sp/>line<sp/>or<sp/>two<sp/>to<sp/>the<sp/>top<sp/>of<sp/>this<sp/>log<sp/>for<sp/>each<sp/>API</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>version<sp/>change:</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>22-Feb-2006<sp/><sp/>MvL<sp/><sp/><sp/><sp/><sp/>1013<sp/><sp/><sp/><sp/>PEP<sp/>353<sp/>-<sp/>long<sp/>indices<sp/>for<sp/>sequence<sp/>lengths</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>19-Aug-2002<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1012<sp/><sp/><sp/><sp/>Changes<sp/>to<sp/>string<sp/>object<sp/>struct<sp/>for</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interning<sp/>changes,<sp/>saving<sp/>3<sp/>bytes.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>17-Jul-2001<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1011<sp/><sp/><sp/><sp/>Descr-branch,<sp/>just<sp/>to<sp/>be<sp/>on<sp/>the<sp/>safe<sp/>side</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>25-Jan-2001<sp/><sp/>FLD<sp/><sp/><sp/><sp/><sp/>1010<sp/><sp/><sp/><sp/>Parameters<sp/>added<sp/>to<sp/>PyCode_New()<sp/>and</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyFrame_New();<sp/>Python<sp/>2.1a2</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>14-Mar-2000<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1009<sp/><sp/><sp/><sp/>Unicode<sp/>API<sp/>added</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>3-Jan-1999<sp/><sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1007<sp/><sp/><sp/><sp/>Decided<sp/>to<sp/>change<sp/>back!<sp/><sp/>(Don&apos;t<sp/>reuse<sp/>1008!)</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>3-Dec-1998<sp/><sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1008<sp/><sp/><sp/><sp/>Python<sp/>1.5.2b1</highlight></codeline>
<codeline lineno="120"><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>18-Jan-1997<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>1007<sp/><sp/><sp/><sp/>string<sp/>interning<sp/>and<sp/>other<sp/>speedups</highlight></codeline>
<codeline lineno="122"><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>11-Oct-1996<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>renamed<sp/>Py_Ellipses<sp/>to<sp/>Py_Ellipsis<sp/>:-(</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>30-Jul-1996<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>Slice<sp/>and<sp/>ellipses<sp/>syntax<sp/>added</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>23-Jul-1996<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>For<sp/>1.4<sp/>--<sp/>better<sp/>safe<sp/>than<sp/>sorry<sp/>this<sp/>time<sp/>:-)</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>7-Nov-1995<sp/><sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>Keyword<sp/>arguments<sp/>(should&apos;ve<sp/>been<sp/>done<sp/>at<sp/>1.3<sp/>:-(<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>10-Jan-1995<sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>Renamed<sp/>globals<sp/>to<sp/>new<sp/>naming<sp/>scheme</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>9-Jan-1995<sp/><sp/><sp/>GvR<sp/><sp/><sp/><sp/><sp/>Initial<sp/>version<sp/>(incompatible<sp/>with<sp/>older<sp/>API)</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>PYTHON_ABI_VERSION<sp/>is<sp/>introduced<sp/>in<sp/>PEP<sp/>384.<sp/>For<sp/>the<sp/>lifetime<sp/>of</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>Python<sp/>3,<sp/>it<sp/>will<sp/>stay<sp/>at<sp/>the<sp/>value<sp/>of<sp/>3;<sp/>changes<sp/>to<sp/>the<sp/>limited<sp/>API</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>must<sp/>be<sp/>performed<sp/>in<sp/>a<sp/>strictly<sp/>backwards-compatible<sp/>manner.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYTHON_ABI_VERSION<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PYTHON_ABI_STRING<sp/>&quot;3&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_TRACE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>we<sp/>are<sp/>tracing<sp/>reference<sp/>counts,<sp/>rename<sp/>module<sp/>creation<sp/>functions<sp/>so</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>modules<sp/>compiled<sp/>with<sp/>incompatible<sp/>settings<sp/>will<sp/>generate<sp/>a</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>link-time<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>PyModule_Create2<sp/>PyModule_Create2TraceRefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>PyModule_FromDefAndSpec2<sp/>PyModule_FromDefAndSpec2TraceRefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyModule_Create2(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_py_module_def" kindref="compound">PyModuleDef</ref>*,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>apiver);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_Create(module)<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_Create2(module,<sp/>PYTHON_ABI_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_Create(module)<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_Create2(module,<sp/>PYTHON_API_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>New<sp/>in<sp/>3.5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">PyAPI_FUNC(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*)<sp/>PyModule_FromDefAndSpec2(<ref refid="struct_py_module_def" kindref="compound">PyModuleDef</ref><sp/>*def,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*spec,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>module_api_version);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_FromDefAndSpec(module,<sp/>spec)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyModule_FromDefAndSpec2(module,<sp/>spec,<sp/>PYTHON_ABI_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyModule_FromDefAndSpec(module,<sp/>spec)<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyModule_FromDefAndSpec2(module,<sp/>spec,<sp/>PYTHON_API_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>New<sp/>in<sp/>3.5<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>_Py_PackageContext;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_MODSUPPORT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/modsupport.h"/>
  </compounddef>
</doxygen>
