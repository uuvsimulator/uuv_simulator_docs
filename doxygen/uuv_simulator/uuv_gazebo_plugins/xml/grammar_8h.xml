<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="grammar_8h" kind="file" language="C++">
    <compoundname>grammar.h</compoundname>
    <includes refid="bitset_8h" local="yes">bitset.h</includes>
    <incdepgraph>
      <node id="2979">
        <label>/usr/include/python3.6m/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="2980" relation="include">
        </childnode>
      </node>
      <node id="2980">
        <label>bitset.h</label>
        <link refid="bitset_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="structlabel" prot="public">label</innerclass>
    <innerclass refid="structlabellist" prot="public">labellist</innerclass>
    <innerclass refid="structarc" prot="public">arc</innerclass>
    <innerclass refid="structstate" prot="public">state</innerclass>
    <innerclass refid="structdfa" prot="public">dfa</innerclass>
    <innerclass refid="structgrammar" prot="public">grammar</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="grammar_8h_1a2b7cf2a3641be7b89138615764d60ba3" prot="public" static="no">
        <name>EMPTY</name>
        <initializer>0		/* Label number 0 is by definition the empty <ref refid="structlabel" kindref="compound">label</ref> */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="19" column="9" bodyfile="/usr/include/python3.6m/grammar.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="grammar_8h_1ad971da63d2b0494623db81a202b9da37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
        <definition>grammar* newgrammar</definition>
        <argsstring>(int start)</argsstring>
        <name>newgrammar</name>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a1fb83972b35b22818d2e82fb77283301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freegrammar</definition>
        <argsstring>(grammar *g)</argsstring>
        <name>freegrammar</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1ab662db958a5848b4b26b79220acac277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdfa" kindref="compound">dfa</ref> *</type>
        <definition>dfa* adddfa</definition>
        <argsstring>(grammar *g, int type, const char *name)</argsstring>
        <name>adddfa</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a841cce30eae5a66f7b64488ebf8ec906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addstate</definition>
        <argsstring>(dfa *d)</argsstring>
        <name>addstate</name>
        <param>
          <type><ref refid="structdfa" kindref="compound">dfa</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1ac1c54d753f3a4569e0ddd720b336f882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addarc</definition>
        <argsstring>(dfa *d, int from, int to, int lbl)</argsstring>
        <name>addarc</name>
        <param>
          <type><ref refid="structdfa" kindref="compound">dfa</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1aaf0931ed06ea7d384fd0ca8244d032ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdfa" kindref="compound">dfa</ref> *</type>
        <definition>dfa* PyGrammar_FindDFA</definition>
        <argsstring>(grammar *g, int type)</argsstring>
        <name>PyGrammar_FindDFA</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a84720a500478d8f1dc34059fc9b0aaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addlabel</definition>
        <argsstring>(labellist *ll, int type, const char *str)</argsstring>
        <name>addlabel</name>
        <param>
          <type><ref refid="structlabellist" kindref="compound">labellist</ref> *</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a2c49a862a778288faf592c0c41d61b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int findlabel</definition>
        <argsstring>(labellist *ll, int type, const char *str)</argsstring>
        <name>findlabel</name>
        <param>
          <type><ref refid="structlabellist" kindref="compound">labellist</ref> *</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a2765a3c63a40a9a088539ddbf84c5738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* PyGrammar_LabelRepr</definition>
        <argsstring>(label *lb)</argsstring>
        <name>PyGrammar_LabelRepr</name>
        <param>
          <type><ref refid="structlabel" kindref="compound">label</ref> *</type>
          <declname>lb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a16bbb2f7f5a9a44a0cd8b638f2d9eb78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translatelabels</definition>
        <argsstring>(grammar *g)</argsstring>
        <name>translatelabels</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1ab22e19a1f7a065daeeec72ee4486eda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addfirstsets</definition>
        <argsstring>(grammar *g)</argsstring>
        <name>addfirstsets</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a55a5e409e0da4b12e7417c203174abbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PyGrammar_AddAccelerators</definition>
        <argsstring>(grammar *g)</argsstring>
        <name>PyGrammar_AddAccelerators</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a30d9ae43422792d89348c40e96e45bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PyGrammar_RemoveAccelerators</definition>
        <argsstring>(grammar *)</argsstring>
        <name>PyGrammar_RemoveAccelerators</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a0c0f56be1152f46271c3ca2ea0f94467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printgrammar</definition>
        <argsstring>(grammar *g, FILE *fp)</argsstring>
        <name>printgrammar</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="grammar_8h_1a454df263bf4def1c76cf827547d7f434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printnonterminals</definition>
        <argsstring>(grammar *g, FILE *fp)</argsstring>
        <name>printnonterminals</name>
        <param>
          <type><ref refid="structgrammar" kindref="compound">grammar</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/grammar.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Grammar<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_GRAMMAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_GRAMMAR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bitset.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Sigh...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>label<sp/>of<sp/>an<sp/>arc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structlabel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lb_type;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*lb_str;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}<sp/><ref refid="structlabel" kindref="compound">label</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EMPTY<sp/>0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Label<sp/>number<sp/>0<sp/>is<sp/>by<sp/>definition<sp/>the<sp/>empty<sp/>label<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>list<sp/>of<sp/>labels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structlabellist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ll_nlabels;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlabel" kindref="compound">label</ref><sp/><sp/><sp/>*ll_label;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structlabellist" kindref="compound">labellist</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>An<sp/>arc<sp/>from<sp/>one<sp/>state<sp/>to<sp/>another<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structarc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>a_lbl;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Label<sp/>of<sp/>this<sp/>arc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>a_arrow;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>State<sp/>where<sp/>this<sp/>arc<sp/>goes<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="structarc" kindref="compound">arc</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>state<sp/>in<sp/>a<sp/>DFA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structstate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_narcs;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarc" kindref="compound">arc</ref><sp/><sp/><sp/><sp/><sp/>*s_arc;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>of<sp/>arcs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optional<sp/>accelerators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_lower;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lowest<sp/>label<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_upper;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Highest<sp/>label<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*s_accel;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Accelerator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_accept;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Nonzero<sp/>for<sp/>accepting<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><ref refid="structstate" kindref="compound">state</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>DFA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structdfa" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d_type;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Non-terminal<sp/>this<sp/>represents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*d_name;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>printing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d_initial;<sp/></highlight><highlight class="comment">/*<sp/>Initial<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d_nstates;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate" kindref="compound">state</ref><sp/><sp/><sp/>*d_state;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>of<sp/>states<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>bitset<sp/><sp/><sp/>d_first;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="structdfa" kindref="compound">dfa</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>grammar<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structgrammar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_ndfas;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdfa" kindref="compound">dfa</ref><sp/><sp/><sp/><sp/><sp/>*g_dfa;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>of<sp/>DFAs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlabellist" kindref="compound">labellist</ref><sp/><sp/><sp/><sp/>g_ll;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_start;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>symbol<sp/>of<sp/>the<sp/>grammar<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_accel;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>accelerators<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><ref refid="structgrammar" kindref="compound">grammar</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FUNCTIONS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*newgrammar(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freegrammar(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="structdfa" kindref="compound">dfa</ref><sp/>*adddfa(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addstate(<ref refid="structdfa" kindref="compound">dfa</ref><sp/>*d);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addarc(<ref refid="structdfa" kindref="compound">dfa</ref><sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lbl);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structdfa" kindref="compound">dfa</ref><sp/>*PyGrammar_FindDFA(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addlabel(<ref refid="structlabellist" kindref="compound">labellist</ref><sp/>*ll,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>findlabel(<ref refid="structlabellist" kindref="compound">labellist</ref><sp/>*ll,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PyGrammar_LabelRepr(<ref refid="structlabel" kindref="compound">label</ref><sp/>*lb);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>translatelabels(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addfirstsets(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PyGrammar_AddAccelerators(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PyGrammar_RemoveAccelerators(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printgrammar(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g,<sp/>FILE<sp/>*fp);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printnonterminals(<ref refid="structgrammar" kindref="compound">grammar</ref><sp/>*g,<sp/>FILE<sp/>*fp);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_GRAMMAR_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/grammar.h"/>
  </compounddef>
</doxygen>
