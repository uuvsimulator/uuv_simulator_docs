<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="object_8h" kind="file" language="C++">
    <compoundname>object.h</compoundname>
    <includedby refid="pytime_8h" local="yes">/usr/include/python3.6m/pytime.h</includedby>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="3265">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3261">
        <label>/usr/include/python3.6m/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="3262" relation="include">
        </childnode>
        <childnode refid="3263" relation="include">
        </childnode>
      </node>
      <node id="3266">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3262">
        <label>/usr/include/python3.6m/pytime.h</label>
        <link refid="pytime_8h_source"/>
        <childnode refid="3263" relation="include">
        </childnode>
      </node>
      <node id="3268">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3263">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3264" relation="include">
        </childnode>
        <childnode refid="3266" relation="include">
        </childnode>
        <childnode refid="3267" relation="include">
        </childnode>
        <childnode refid="3268" relation="include">
        </childnode>
        <childnode refid="3269" relation="include">
        </childnode>
      </node>
      <node id="3269">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3264">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3265" relation="include">
        </childnode>
      </node>
      <node id="3267">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct__object" prot="public">_object</innerclass>
    <innerclass refid="struct_py_var_object" prot="public">PyVarObject</innerclass>
    <innerclass refid="struct___py___identifier" prot="public">_Py_Identifier</innerclass>
    <innerclass refid="structbufferinfo" prot="public">bufferinfo</innerclass>
    <innerclass refid="struct_py_number_methods" prot="public">PyNumberMethods</innerclass>
    <innerclass refid="struct_py_sequence_methods" prot="public">PySequenceMethods</innerclass>
    <innerclass refid="struct_py_mapping_methods" prot="public">PyMappingMethods</innerclass>
    <innerclass refid="struct_py_async_methods" prot="public">PyAsyncMethods</innerclass>
    <innerclass refid="struct_py_buffer_procs" prot="public">PyBufferProcs</innerclass>
    <innerclass refid="struct__typeobject" prot="public">_typeobject</innerclass>
    <innerclass refid="struct_py_type___slot" prot="public">PyType_Slot</innerclass>
    <innerclass refid="struct_py_type___spec" prot="public">PyType_Spec</innerclass>
    <innerclass refid="struct__heaptypeobject" prot="public">_heaptypeobject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="object_8h_1af7c0d1d7c5b74370ddea1e15184a11d2" prot="public" static="no">
        <name>_PyObject_HEAD_EXTRA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="78" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae9939d95c18d61a95bfb82adb82cd4b3" prot="public" static="no">
        <name>_PyObject_EXTRA_INIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="79" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a0bf35c1f3ea13f925de94d8593db3b7e" prot="public" static="no">
        <name>PyObject_HEAD</name>
        <initializer><ref refid="struct__object" kindref="compound">PyObject</ref> ob_base;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="83" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a830376bf032db05730e209258178a6f8" prot="public" static="no">
        <name>PyObject_HEAD_INIT</name>
        <param><defname>type</defname></param>
        <initializer>{ _PyObject_EXTRA_INIT              \
    1, type },</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="85" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af7bf798fd1fb10467244bfb9d0dc12d5" prot="public" static="no">
        <name>PyVarObject_HEAD_INIT</name>
        <param><defname>type</defname></param>
        <param><defname>size</defname></param>
        <initializer>{ PyObject_HEAD_INIT(type) size },</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="89" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa0eba161a76be8710b3de325c2e7f9e2" prot="public" static="no">
        <name>PyObject_VAR_HEAD</name>
        <initializer><ref refid="struct_py_var_object" kindref="compound">PyVarObject</ref> ob_base;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="98" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aaeff27033f03b70c6ced72554685598d" prot="public" static="no">
        <name>Py_INVALID_SIZE</name>
        <initializer>(Py_ssize_t)-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="99" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a1cd6a39fecc0dd7c56b90e133987c3c9" prot="public" static="no">
        <name>Py_REFCNT</name>
        <param><defname>ob</defname></param>
        <initializer>(((<ref refid="struct__object" kindref="compound">PyObject</ref>*)(ob))-&gt;ob_refcnt)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="117" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a02507aa5ff002289d6f1ad2e93351b8a" prot="public" static="no">
        <name>Py_TYPE</name>
        <param><defname>ob</defname></param>
        <initializer>(((<ref refid="struct__object" kindref="compound">PyObject</ref>*)(ob))-&gt;ob_type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="118" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a1ea4afed41d83b1e1d991de286b4a79f" prot="public" static="no">
        <name>Py_SIZE</name>
        <param><defname>ob</defname></param>
        <initializer>(((<ref refid="struct_py_var_object" kindref="compound">PyVarObject</ref>*)(ob))-&gt;ob_size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="119" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa252d0b9161e02c93b1d391004321a62" prot="public" static="no">
        <name>_Py_static_string_init</name>
        <param><defname>value</defname></param>
        <initializer>{ .next = NULL, .<ref refid="struct__object" kindref="compound">string</ref> = value, .<ref refid="struct__object" kindref="compound">object</ref> = NULL }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="148" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a03a8dd4034fc538b775dc583dfb65d0c" prot="public" static="no">
        <name>_Py_static_string</name>
        <param><defname>varname</defname></param>
        <param><defname>value</defname></param>
        <initializer>static <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> varname = _Py_static_string_init(value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="149" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a2ece34af823b22bdcbbca9f379528635" prot="public" static="no">
        <name>_Py_IDENTIFIER</name>
        <param><defname>varname</defname></param>
        <initializer>_Py_static_string(PyId_##varname, #varname)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="150" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aad92193d8cb9245b7a65c878cad0b801" prot="public" static="no">
        <name>PyBUF_MAX_NDIM</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="201" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a734b71480a0ce09f2fbd994bbf61703d" prot="public" static="no">
        <name>PyBUF_SIMPLE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="204" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1acdd49fc839910bf2c301039c77e45848" prot="public" static="no">
        <name>PyBUF_WRITABLE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="205" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a807356e2564a1de372104fcc5c62dd68" prot="public" static="no">
        <name>PyBUF_WRITEABLE</name>
        <initializer>PyBUF_WRITABLE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="207" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a4e375ce7d7017f36f419a927879e22cf" prot="public" static="no">
        <name>PyBUF_FORMAT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="208" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a114c8c1fa379eaa820e4bec834e687ff" prot="public" static="no">
        <name>PyBUF_ND</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="209" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae8025f91cf2b9fef985381a46198cf25" prot="public" static="no">
        <name>PyBUF_STRIDES</name>
        <initializer>(0x0010 | PyBUF_ND)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="210" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a5925988be85b809111189d82f9db7f18" prot="public" static="no">
        <name>PyBUF_C_CONTIGUOUS</name>
        <initializer>(0x0020 | PyBUF_STRIDES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="211" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a907837985e8a3bc707c66be5a83a88ac" prot="public" static="no">
        <name>PyBUF_F_CONTIGUOUS</name>
        <initializer>(0x0040 | PyBUF_STRIDES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="212" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af70e6eaf86795a6477bad8f89f5781fd" prot="public" static="no">
        <name>PyBUF_ANY_CONTIGUOUS</name>
        <initializer>(0x0080 | PyBUF_STRIDES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="213" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a032e746e03b1a5844382dfc442ec3f54" prot="public" static="no">
        <name>PyBUF_INDIRECT</name>
        <initializer>(0x0100 | PyBUF_STRIDES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="214" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a2fd42e1506d1ac75a974830d7eb5ff29" prot="public" static="no">
        <name>PyBUF_CONTIG</name>
        <initializer>(PyBUF_ND | PyBUF_WRITABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="216" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a6c5b45e55d39f6502ca92b4099b6223b" prot="public" static="no">
        <name>PyBUF_CONTIG_RO</name>
        <initializer>(PyBUF_ND)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="217" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a2f59ec2686769b7f7a3ed0db9155d485" prot="public" static="no">
        <name>PyBUF_STRIDED</name>
        <initializer>(PyBUF_STRIDES | PyBUF_WRITABLE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="219" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a58e6f4f2b71f51e392607dc9691a59d2" prot="public" static="no">
        <name>PyBUF_STRIDED_RO</name>
        <initializer>(PyBUF_STRIDES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="220" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a4335c9c7e6e1aa3a2fbdb9f6e9292b97" prot="public" static="no">
        <name>PyBUF_RECORDS</name>
        <initializer>(PyBUF_STRIDES | PyBUF_WRITABLE | PyBUF_FORMAT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="222" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1afcd4b465ee5c97c7d4be7eee9c77eac5" prot="public" static="no">
        <name>PyBUF_RECORDS_RO</name>
        <initializer>(PyBUF_STRIDES | PyBUF_FORMAT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="223" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af64ee4c5964e384101e3879791c81c25" prot="public" static="no">
        <name>PyBUF_FULL</name>
        <initializer>(PyBUF_INDIRECT | PyBUF_WRITABLE | PyBUF_FORMAT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="225" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1afda293d387661b63d91d1028c758285b" prot="public" static="no">
        <name>PyBUF_FULL_RO</name>
        <initializer>(PyBUF_INDIRECT | PyBUF_FORMAT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="226" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a39a69779940281b4e67c912025992bbc" prot="public" static="no">
        <name>PyBUF_READ</name>
        <initializer>0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="229" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1adb25f1357b0075e774c5faf91c948bb9" prot="public" static="no">
        <name>PyBUF_WRITE</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="230" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1abe0ca0d31f3383f270b894b9426797c6" prot="public" static="no">
        <name>PyHeapType_GET_MEMBERS</name>
        <param><defname>etype</defname></param>
        <initializer>((<ref refid="struct_py_member_def" kindref="compound">PyMemberDef</ref> *)(((char *)etype) + Py_TYPE(etype)-&gt;tp_basicsize))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="480" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a78a6cfb96870f055b16d8776d6366389" prot="public" static="no">
        <name>PyObject_TypeCheck</name>
        <param><defname>ob</defname></param>
        <param><defname>tp</defname></param>
        <initializer>(Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="486" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a91e27fe8248c7289e3aaceccadca3f4a" prot="public" static="no">
        <name>PyType_Check</name>
        <param><defname>op</defname></param>
        <initializer>PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="495" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af7959851e3e5a0a3fbdfb6e79dafb514" prot="public" static="no">
        <name>PyType_CheckExact</name>
        <param><defname>op</defname></param>
        <initializer>(Py_TYPE(op) == &amp;PyType_Type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="497" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a7802bacb52e90902009be3e075f807b0" prot="public" static="no">
        <name>Py_PRINT_RAW</name>
        <initializer>1       /* No <ref refid="struct__object" kindref="compound">string</ref> quotes etc. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="594" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae4124fdb8c873aeae8fd0186d224314d" prot="public" static="no">
        <name>Py_TPFLAGS_HEAPTYPE</name>
        <initializer>(1UL &lt;&lt; 9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="620" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a2637227ab327a68316749d6f0f37bac5" prot="public" static="no">
        <name>Py_TPFLAGS_BASETYPE</name>
        <initializer>(1UL &lt;&lt; 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="623" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a09296bf74d8d443d83a01089bed70088" prot="public" static="no">
        <name>Py_TPFLAGS_READY</name>
        <initializer>(1UL &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="626" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a105ee75f53c68859b06ed5e38a824d5d" prot="public" static="no">
        <name>Py_TPFLAGS_READYING</name>
        <initializer>(1UL &lt;&lt; 13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="629" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a6647b4e021684b099e4cf15a0dc53049" prot="public" static="no">
        <name>Py_TPFLAGS_HAVE_GC</name>
        <initializer>(1UL &lt;&lt; 14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="632" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a2282e8bfd8db43e50d5206124e16dca3" prot="public" static="no">
        <name>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="638" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a8c4cff13e8373648adaa8d82fb903a89" prot="public" static="no">
        <name>Py_TPFLAGS_HAVE_VERSION_TAG</name>
        <initializer>(1UL &lt;&lt; 18)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="642" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aac0d10b7e1034cb74d3b77f514641c40" prot="public" static="no">
        <name>Py_TPFLAGS_VALID_VERSION_TAG</name>
        <initializer>(1UL &lt;&lt; 19)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="643" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae0bfe3654ec259a0b84f9aa86d4cea46" prot="public" static="no">
        <name>Py_TPFLAGS_IS_ABSTRACT</name>
        <initializer>(1UL &lt;&lt; 20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="646" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa2d8b0423c31f61ac01285a563eb2482" prot="public" static="no">
        <name>Py_TPFLAGS_LONG_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 24)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="649" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a6e27e686234f225f1ea85faede3ce386" prot="public" static="no">
        <name>Py_TPFLAGS_LIST_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="650" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ac8aa872d356c4be913c350d424747452" prot="public" static="no">
        <name>Py_TPFLAGS_TUPLE_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 26)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="651" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a717f19acfaad1039e78f9c01ab38cac4" prot="public" static="no">
        <name>Py_TPFLAGS_BYTES_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 27)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="652" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a47197173d454e57ffe651f0094c4d2ce" prot="public" static="no">
        <name>Py_TPFLAGS_UNICODE_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 28)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="653" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a716b6ab82d3c8148fc2bc3c82fca57e3" prot="public" static="no">
        <name>Py_TPFLAGS_DICT_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 29)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="654" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ac286266fab750316b72029ab3f7344b0" prot="public" static="no">
        <name>Py_TPFLAGS_BASE_EXC_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 30)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="655" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1acd28b9b5ce9858f466a4a95208944ff5" prot="public" static="no">
        <name>Py_TPFLAGS_TYPE_SUBCLASS</name>
        <initializer>(1UL &lt;&lt; 31)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="656" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa82381d2806c6361636e9b52136004e3" prot="public" static="no">
        <name>Py_TPFLAGS_DEFAULT</name>
        <initializer>( \
                 Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
                 Py_TPFLAGS_HAVE_VERSION_TAG | \
                0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="658" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ac4ee442c8fcdc40e48612acb47533d36" prot="public" static="no">
        <name>Py_TPFLAGS_HAVE_FINALIZE</name>
        <initializer>(1UL &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="667" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a7dcaf3bc1f0a3ce263ecd02880284a7f" prot="public" static="no">
        <name>PyType_HasFeature</name>
        <param><defname>t</defname></param>
        <param><defname>f</defname></param>
        <initializer>(((t)-&gt;tp_flags &amp; (f)) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="672" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a93b50d584d2f30b899c2dce5d841d8b9" prot="public" static="no">
        <name>PyType_FastSubclass</name>
        <param><defname>t</defname></param>
        <param><defname>f</defname></param>
        <initializer>PyType_HasFeature(t,f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="674" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa09bea27cd811227b68ff4df2f93f2fe" prot="public" static="no">
        <name>_Py_INC_REFTOTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="733" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ad65b67cb5c22a42636438b99845402a7" prot="public" static="no">
        <name>_Py_DEC_REFTOTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="734" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a14b435e790ee82dee4e864d08bad3718" prot="public" static="no">
        <name>_Py_REF_DEBUG_COMMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="735" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ab06cc7b0cbd439b960df3ea887984fa7" prot="public" static="no">
        <name>_Py_CHECK_REFCNT</name>
        <param><defname>OP</defname></param>
        <initializer>/* a semicolon */;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="736" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aa198e72a346b989d4f8f785199d7278f" prot="public" static="no">
        <name>_PY_DEBUG_PRINT_TOTAL_REFS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="737" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1aed1fd762c90ec0e7348afd418be477f5" prot="public" static="no">
        <name>_Py_INC_TPALLOCS</name>
        <param><defname>OP</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="748" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a381811d7b81eb69b01a964e92b3fc239" prot="public" static="no">
        <name>_Py_INC_TPFREES</name>
        <param><defname>OP</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="749" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a42ccffa00d2609941a256af3aaf7371e" prot="public" static="no">
        <name>_Py_DEC_TPFREES</name>
        <param><defname>OP</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="750" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ac1f3544b13ef13e12811ac0d90bb231b" prot="public" static="no">
        <name>_Py_COUNT_ALLOCS_COMMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="751" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a5df682e171e9457d14b0c2bad9b99dd2" prot="public" static="no">
        <name>_Py_NewReference</name>
        <param><defname>op</defname></param>
        <initializer>(                          \
    _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA         \
    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA               \
    Py_REFCNT(op) = 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="767" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a7125b5c739417f3732ece5d5cc34cd00" prot="public" static="no">
        <name>_Py_ForgetReference</name>
        <param><defname>op</defname></param>
        <initializer>_Py_INC_TPFREES(op)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="772" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a09acc0cab3d63933b371b86c46f09e15" prot="public" static="no">
        <name>_Py_Dealloc</name>
        <param><defname>op</defname></param>
        <initializer>(                               \
    _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \
    (*Py_TYPE(op)-&gt;tp_dealloc)((<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="777" column="10" bodyfile="/usr/include/python3.6m/object.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a5d9580b8e00d6984d12b8e2e64e55e61" prot="public" static="no">
        <name>Py_INCREF</name>
        <param><defname>op</defname></param>
        <initializer>(                         \
    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
    ((<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op))-&gt;ob_refcnt++)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="783" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a19be7acd3e9a57b82c7be99b8594d293" prot="public" static="no">
        <name>Py_DECREF</name>
        <param><defname>op</defname></param>
        <initializer>do {                                                \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_decref_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op);    \
        if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
        --(_py_decref_tmp)-&gt;ob_refcnt != 0)             \
            _Py_CHECK_REFCNT(_py_decref_tmp)            \
        else                                            \
            _Py_Dealloc(_py_decref_tmp);                \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="787" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a8d67e737d6c24d1078fade790a316aac" prot="public" static="no">
        <name>Py_CLEAR</name>
        <param><defname>op</defname></param>
        <initializer>do {                                        \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op);   \
        if (_py_tmp != NULL) {                  \
            (op) = NULL;                        \
            Py_DECREF(_py_tmp);                 \
        }                                       \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="831" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae7d64e60f19788c8fcf29797834f2f40" prot="public" static="no">
        <name>Py_XINCREF</name>
        <param><defname>op</defname></param>
        <initializer>do {                                              \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_xincref_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op); \
        if (_py_xincref_tmp != NULL)                  \
            Py_INCREF(_py_xincref_tmp);               \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="841" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ad5a8e1cd6260bd50f58ebf7dd64872c9" prot="public" static="no">
        <name>Py_XDECREF</name>
        <param><defname>op</defname></param>
        <initializer>do {                                              \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_xdecref_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op); \
        if (_py_xdecref_tmp != NULL)                  \
            Py_DECREF(_py_xdecref_tmp);               \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="848" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1af780ebbcdd90b8c70b488c4b82c1c709" prot="public" static="no">
        <name>Py_SETREF</name>
        <param><defname>op</defname></param>
        <param><defname>op2</defname></param>
        <initializer>do {                                        \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op);   \
        (op) = (op2);                           \
        Py_DECREF(_py_tmp);                     \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="875" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae0288b727731853a02a0293dd9e2034e" prot="public" static="no">
        <name>Py_XSETREF</name>
        <param><defname>op</defname></param>
        <param><defname>op2</defname></param>
        <initializer>do {                                        \
        <ref refid="struct__object" kindref="compound">PyObject</ref> *_py_tmp = (<ref refid="struct__object" kindref="compound">PyObject</ref> *)(op);   \
        (op) = (op2);                           \
        Py_XDECREF(_py_tmp);                    \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="882" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a02ab767ffd5e5a73d8dcd6db87c05e40" prot="public" static="no">
        <name>Py_None</name>
        <initializer>(&amp;_Py_NoneStruct)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="910" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1abe8e5f15421fd71664dd8332e5ad5b63" prot="public" static="no">
        <name>Py_RETURN_NONE</name>
        <initializer>return Py_INCREF(Py_None), Py_None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="913" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae5603e8c5fd8ec50c4936e1012a58cb4" prot="public" static="no">
        <name>Py_NotImplemented</name>
        <initializer>(&amp;_Py_NotImplementedStruct)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="920" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae0be8759df18cf639c64b5c84fe6971b" prot="public" static="no">
        <name>Py_RETURN_NOTIMPLEMENTED</name>
        <initializer>return Py_INCREF(Py_NotImplemented), Py_NotImplemented</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="923" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a3b7febfd1927738152e5388ec3306c69" prot="public" static="no">
        <name>Py_LT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="927" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ae6658567d9d83f3de166f29dfe57c62a" prot="public" static="no">
        <name>Py_LE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="928" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ad4b8720ab55824103c296ee764f91cf6" prot="public" static="no">
        <name>Py_EQ</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="929" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a213ccfa88cb78f609eb9a3ed300bdba7" prot="public" static="no">
        <name>Py_NE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="930" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ad62d7b51c8648af87534fd0fffbc3203" prot="public" static="no">
        <name>Py_GT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="931" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1ad9d7c471847e12949de9129a5246f498" prot="public" static="no">
        <name>Py_GE</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="932" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a5a1a3da8c0bebc54db62e78e83b74b61" prot="public" static="no">
        <name>PyTrash_UNWIND_LEVEL</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1049" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1affc10f48d61e8d52a952a4d0b45dc744" prot="public" static="no">
        <name>Py_TRASHCAN_SAFE_BEGIN</name>
        <param><defname>op</defname></param>
        <initializer>do { \
        <ref refid="struct__ts" kindref="compound">PyThreadState</ref> *_tstate = PyThreadState_GET(); \
        if (_tstate-&gt;trash_delete_nesting &lt; PyTrash_UNWIND_LEVEL) { \
            ++_tstate-&gt;trash_delete_nesting;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1051" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="object_8h_1a5819045e4cdce2326dbdd5d96b345a0b" prot="public" static="no">
        <name>Py_TRASHCAN_SAFE_END</name>
        <param><defname>op</defname></param>
        <initializer>--_tstate-&gt;trash_delete_nesting; \
            if (_tstate-&gt;trash_delete_later &amp;&amp; _tstate-&gt;trash_delete_nesting &lt;= 0) \
                _PyTrash_thread_destroy_chain(); \
        } \
        else \
            _PyTrash_thread_deposit_object((<ref refid="struct__object" kindref="compound">PyObject</ref>*)op); \
    } while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1057" column="9" bodyfile="/usr/include/python3.6m/object.h" bodystart="1057" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="object_8h_1aadc84ac7aed2cfa6f20c25f62bf3dac7" prot="public" static="no">
        <type>struct <ref refid="struct__object" kindref="compound">_object</ref></type>
        <definition>typedef struct _object  PyObject</definition>
        <argsstring></argsstring>
        <name>PyObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a4178c2f22aed52bf515e562a50c732c7" prot="public" static="no">
        <type>struct <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref></type>
        <definition>typedef struct _Py_Identifier  _Py_Identifier</definition>
        <argsstring></argsstring>
        <name>_Py_Identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1aeda2d77a292fdf2c686151d24b3dbf5a" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* unaryfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>unaryfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="169" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a1a50b2d154f36acb9d215f2cdc1561a8" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* binaryfunc) (PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *)</argsstring>
        <name>binaryfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="170" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a3304ec7aa95ae9f0141c3b04e20f8394" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* ternaryfunc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>ternaryfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="171" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a2614f58e24895fe4693c83466d7f46e8" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* inquiry) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>inquiry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="172" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a07099ee62617991d223a386bb7f09008" prot="public" static="no">
        <type>Py_ssize_t(*</type>
        <definition>typedef Py_ssize_t(* lenfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>lenfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="173" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a0c13a44d945e5ad963c3db8584d308cb" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* ssizeargfunc) (PyObject *, Py_ssize_t)</definition>
        <argsstring>)(PyObject *, Py_ssize_t)</argsstring>
        <name>ssizeargfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="174" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ab30aa8df5679dd34d92fb2926b0da313" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* ssizessizeargfunc) (PyObject *, Py_ssize_t, Py_ssize_t)</definition>
        <argsstring>)(PyObject *, Py_ssize_t, Py_ssize_t)</argsstring>
        <name>ssizessizeargfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="175" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a77007d5606a99b15fe9ef536de7799f4" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssizeobjargproc) (PyObject *, Py_ssize_t, PyObject *)</definition>
        <argsstring>)(PyObject *, Py_ssize_t, PyObject *)</argsstring>
        <name>ssizeobjargproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="176" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1aec5241b3bfca13f1572340b5bbf9112e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ssizessizeobjargproc) (PyObject *, Py_ssize_t, Py_ssize_t, PyObject *)</definition>
        <argsstring>)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *)</argsstring>
        <name>ssizessizeobjargproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="177" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ac98f9df50e08c244bc28b5758f8bbf46" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* objobjargproc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>objobjargproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="178" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a0c1c5dc66cfb07c46b863b5186f61cf4" prot="public" static="no">
        <type>struct <ref refid="structbufferinfo" kindref="compound">bufferinfo</ref></type>
        <definition>typedef struct bufferinfo  Py_buffer</definition>
        <argsstring></argsstring>
        <name>Py_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1aa017fb2160e0b5c8aa3da451f0481384" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* getbufferproc) (PyObject *, Py_buffer *, int)</definition>
        <argsstring>)(PyObject *, Py_buffer *, int)</argsstring>
        <name>getbufferproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="197" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a3fe4e7546166ee0acefe1bfe178455b0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* releasebufferproc) (PyObject *, Py_buffer *)</definition>
        <argsstring>)(PyObject *, Py_buffer *)</argsstring>
        <name>releasebufferproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="198" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a07f4ce603d3e8e0515b0e3be042531cc" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* objobjproc) (PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *)</argsstring>
        <name>objobjproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="235" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1aa82a39c6de597c0c6724c564d5b72b0e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* visitproc) (PyObject *, void *)</definition>
        <argsstring>)(PyObject *, void *)</argsstring>
        <name>visitproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="236" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a295a4db00c5ed61ab35c42c919448166" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* traverseproc) (PyObject *, visitproc, void *)</definition>
        <argsstring>)(PyObject *, visitproc, void *)</argsstring>
        <name>traverseproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="237" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a4422b04dcad738e4b4e7a2df5e15dd26" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* freefunc) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>freefunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="319" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ac931cea4548f564f96c8d780b9719469" prot="public" static="no">
        <type>void(*</type>
        <definition>PyCapsule_Destructor destructor</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>destructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="320" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a8f688973092faa2442e9d5210aab8aae" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* printfunc) (PyObject *, FILE *, int)</definition>
        <argsstring>)(PyObject *, FILE *, int)</argsstring>
        <name>printfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="326" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1afe85498fb57ac8736e9e6a064f839445" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* getattrfunc) (PyObject *, char *)</definition>
        <argsstring>)(PyObject *, char *)</argsstring>
        <name>getattrfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="328" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ae44e29e13b2c19e82e033c0a2faf9f9d" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* getattrofunc) (PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *)</argsstring>
        <name>getattrofunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="329" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a5d61fb429f16948d39f999466b5e99dd" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* setattrfunc) (PyObject *, char *, PyObject *)</definition>
        <argsstring>)(PyObject *, char *, PyObject *)</argsstring>
        <name>setattrfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="330" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a05938baec67b23931030056e9a8c3e1f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* setattrofunc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>setattrofunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="331" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a880e8271f8f3f984e0baecc0255c312f" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* reprfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>reprfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="332" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a08aa960a14b5ea30041f5fc07524b753" prot="public" static="no">
        <type>Py_hash_t(*</type>
        <definition>typedef Py_hash_t(* hashfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>hashfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="333" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a34e21b7b63def5f9f5deaf89840f587a" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* richcmpfunc) (PyObject *, PyObject *, int)</definition>
        <argsstring>)(PyObject *, PyObject *, int)</argsstring>
        <name>richcmpfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="334" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a18ac80dcf45345b226df85368e0ebbd0" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* getiterfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>getiterfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="335" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ad8bd84ee5cd8ad1a308d4be61b838702" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* iternextfunc) (PyObject *)</definition>
        <argsstring>)(PyObject *)</argsstring>
        <name>iternextfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="336" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a9283a02147f2d97fda7482ba19752aef" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* descrgetfunc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>descrgetfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="337" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a9f1205e9e20d651607277c88b9a4953f" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* descrsetfunc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>descrsetfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="338" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a20bb5805aeb5c7590e02a24a857bd15d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* initproc) (PyObject *, PyObject *, PyObject *)</definition>
        <argsstring>)(PyObject *, PyObject *, PyObject *)</argsstring>
        <name>initproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="339" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1ae0589d0aee9077cb7eac7f308dd932c3" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* newfunc) (struct _typeobject *, PyObject *, PyObject *)</definition>
        <argsstring>)(struct _typeobject *, PyObject *, PyObject *)</argsstring>
        <name>newfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="340" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a270ff7974d1e76054e6dd1e93557886f" prot="public" static="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *(*</type>
        <definition>typedef PyObject*(* allocfunc) (struct _typeobject *, Py_ssize_t)</definition>
        <argsstring>)(struct _typeobject *, Py_ssize_t)</argsstring>
        <name>allocfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="341" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a42a55dd6e973872c7a6bc61632070f6f" prot="public" static="no">
        <type>struct <ref refid="struct__typeobject" kindref="compound">_typeobject</ref></type>
        <definition>typedef struct _typeobject  PyTypeObject</definition>
        <argsstring></argsstring>
        <name>PyTypeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="object_8h_1a72452bc2aef04052dcbeb58beaa36193" prot="public" static="no">
        <type>struct <ref refid="struct__heaptypeobject" kindref="compound">_heaptypeobject</ref></type>
        <definition>typedef struct _heaptypeobject  PyHeapTypeObject</definition>
        <argsstring></argsstring>
        <name>PyHeapTypeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="477" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="object_8h_1a67e5dbd158e00b780334473390e76f80" prot="public" static="no" mutable="no">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref></type>
        <definition>PyObject int</definition>
        <argsstring></argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="456" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="object_8h_1a3655899f66ca98255b47208712b31518" prot="public" static="no" mutable="no">
        <type></type>
        <definition>Py_ssize_t</definition>
        <argsstring></argsstring>
        <name>Py_ssize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="500" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="object_8h_1a1ffa66674d9fdbe9b83fdbb073cdd863" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* block_name</definition>
        <argsstring></argsstring>
        <name>block_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1068" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="object_8h_1a7441403499f9cc28464c9295de101854" prot="public" static="no" mutable="no">
        <type>const char int</type>
        <definition>const char int num_blocks</definition>
        <argsstring></argsstring>
        <name>num_blocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1068" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="1068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="object_8h_1a55c76c393dd11d5cf681862dde289dee" prot="public" static="no" mutable="no">
        <type>const char int size_t</type>
        <definition>const char int size_t sizeof_block</definition>
        <argsstring></argsstring>
        <name>sizeof_block</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1069" column="1" bodyfile="/usr/include/python3.6m/object.h" bodystart="1068" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="object_8h_1abfe4f93218af625613e624d57702c91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyObject *) PyType_FromSpec(PyType_Spec *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a0f218ca22ea6c2cfbe3a1b3180b6097a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject* PyAPI_FUNC</definition>
        <argsstring>(void *) PyType_GetSlot(PyTypeObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a3b0bc3be7584b74765729c143b8d3e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyType_IsSubtype(PyTypeObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a97579bd6e88de50da284b63f65b91f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyTypeObject) PyType_Type</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa129d4521cddbb8d446b938d24bf4be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(unsigned long) PyType_GetFlags(PyTypeObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1acb968efbe8474234c4251f25cb023fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> *</type>
        <definition>PyObject PyObject PyObject _Py_Identifier _Py_Identifier* PyAPI_FUNC</definition>
        <argsstring>(PyTypeObject *) _PyType_CalculateMetaclass(PyTypeObject *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__typeobject" kindref="compound">PyTypeObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1af80fb4ab5c867ad116067fc590dbec18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        <definition>PyObject PyObject PyObject _Py_Identifier _Py_Identifier PyObject* PyAPI_FUNC</definition>
        <argsstring>(unsigned int) PyType_ClearCache(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>unsigned</type>
          <declname>int</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9a9bc726221bfca26ebcbb7387cd7ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyType_Modified(PyTypeObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9a0812f510be5c3f8dc4beefbf1e4a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> struct <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> struct <ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref> *</type>
        <definition>struct _Py_Identifier struct _Py_Identifier PyObject struct _Py_Identifier* PyAPI_FUNC</definition>
        <argsstring>(PyObject **) _PyObject_GetDictPtr(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1aa2b3dfb13b5095dda2648c2a1c80a63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> <ref refid="struct__object" kindref="compound">PyObject</ref> void *</type>
        <definition>PyObject PyObject PyObject PyObject void* PyAPI_FUNC</definition>
        <argsstring>(Py_hash_t) PyObject_Hash(PyObject *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>Py_hash_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1af57dfe82b77d13e5444770d212ce728d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyObject) _Py_NoneStruct</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1ac392c92ebe0de3096f8402db984e2c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(int) _Py_SwappedOp[]</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="object_8h_1a9e383469b7ff8f8fc7048e522edc59b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_DATA</definition>
        <argsstring>(PyObject *) _PyTrash_delete_later</argsstring>
        <name>PyAPI_DATA</name>
        <param>
          <type><ref refid="struct__object" kindref="compound">PyObject</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/object.h" line="1042" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>Py_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Object<sp/>and<sp/>type<sp/>object<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment">Objects<sp/>are<sp/>structures<sp/>allocated<sp/>on<sp/>the<sp/>heap.<sp/><sp/>Special<sp/>rules<sp/>apply<sp/>to</highlight></codeline>
<codeline lineno="12"><highlight class="comment">the<sp/>use<sp/>of<sp/>objects<sp/>to<sp/>ensure<sp/>they<sp/>are<sp/>properly<sp/>garbage-collected.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">Objects<sp/>are<sp/>never<sp/>allocated<sp/>statically<sp/>or<sp/>on<sp/>the<sp/>stack;<sp/>they<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="14"><highlight class="comment">accessed<sp/>through<sp/>special<sp/>macros<sp/>and<sp/>functions<sp/>only.<sp/><sp/>(Type<sp/>objects<sp/>are</highlight></codeline>
<codeline lineno="15"><highlight class="comment">exceptions<sp/>to<sp/>the<sp/>first<sp/>rule;<sp/>the<sp/>standard<sp/>types<sp/>are<sp/>represented<sp/>by</highlight></codeline>
<codeline lineno="16"><highlight class="comment">statically<sp/>initialized<sp/>type<sp/>objects,<sp/>although<sp/>work<sp/>on<sp/>type/class<sp/>unification</highlight></codeline>
<codeline lineno="17"><highlight class="comment">for<sp/>Python<sp/>2.2<sp/>made<sp/>it<sp/>possible<sp/>to<sp/>have<sp/>heap-allocated<sp/>type<sp/>objects<sp/>too).</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">An<sp/>object<sp/>has<sp/>a<sp/>&apos;reference<sp/>count&apos;<sp/>that<sp/>is<sp/>increased<sp/>or<sp/>decreased<sp/>when<sp/>a</highlight></codeline>
<codeline lineno="20"><highlight class="comment">pointer<sp/>to<sp/>the<sp/>object<sp/>is<sp/>copied<sp/>or<sp/>deleted;<sp/>when<sp/>the<sp/>reference<sp/>count</highlight></codeline>
<codeline lineno="21"><highlight class="comment">reaches<sp/>zero<sp/>there<sp/>are<sp/>no<sp/>references<sp/>to<sp/>the<sp/>object<sp/>left<sp/>and<sp/>it<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="22"><highlight class="comment">removed<sp/>from<sp/>the<sp/>heap.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">An<sp/>object<sp/>has<sp/>a<sp/>&apos;type&apos;<sp/>that<sp/>determines<sp/>what<sp/>it<sp/>represents<sp/>and<sp/>what<sp/>kind</highlight></codeline>
<codeline lineno="25"><highlight class="comment">of<sp/>data<sp/>it<sp/>contains.<sp/><sp/>An<sp/>object&apos;s<sp/>type<sp/>is<sp/>fixed<sp/>when<sp/>it<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">Types<sp/>themselves<sp/>are<sp/>represented<sp/>as<sp/>objects;<sp/>an<sp/>object<sp/>contains<sp/>a</highlight></codeline>
<codeline lineno="27"><highlight class="comment">pointer<sp/>to<sp/>the<sp/>corresponding<sp/>type<sp/>object.<sp/><sp/>The<sp/>type<sp/>itself<sp/>has<sp/>a<sp/>type</highlight></codeline>
<codeline lineno="28"><highlight class="comment">pointer<sp/>pointing<sp/>to<sp/>the<sp/>object<sp/>representing<sp/>the<sp/>type<sp/>&apos;type&apos;,<sp/>which</highlight></codeline>
<codeline lineno="29"><highlight class="comment">contains<sp/>a<sp/>pointer<sp/>to<sp/>itself!).</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">Objects<sp/>do<sp/>not<sp/>float<sp/>around<sp/>in<sp/>memory;<sp/>once<sp/>allocated<sp/>an<sp/>object<sp/>keeps</highlight></codeline>
<codeline lineno="32"><highlight class="comment">the<sp/>same<sp/>size<sp/>and<sp/>address.<sp/><sp/>Objects<sp/>that<sp/>must<sp/>hold<sp/>variable-size<sp/>data</highlight></codeline>
<codeline lineno="33"><highlight class="comment">can<sp/>contain<sp/>pointers<sp/>to<sp/>variable-size<sp/>parts<sp/>of<sp/>the<sp/>object.<sp/><sp/>Not<sp/>all</highlight></codeline>
<codeline lineno="34"><highlight class="comment">objects<sp/>of<sp/>the<sp/>same<sp/>type<sp/>have<sp/>the<sp/>same<sp/>size;<sp/>but<sp/>the<sp/>size<sp/>cannot<sp/>change</highlight></codeline>
<codeline lineno="35"><highlight class="comment">after<sp/>allocation.<sp/><sp/>(These<sp/>restrictions<sp/>are<sp/>made<sp/>so<sp/>a<sp/>reference<sp/>to<sp/>an</highlight></codeline>
<codeline lineno="36"><highlight class="comment">object<sp/>can<sp/>be<sp/>simply<sp/>a<sp/>pointer<sp/>--<sp/>moving<sp/>an<sp/>object<sp/>would<sp/>require</highlight></codeline>
<codeline lineno="37"><highlight class="comment">updating<sp/>all<sp/>the<sp/>pointers,<sp/>and<sp/>changing<sp/>an<sp/>object&apos;s<sp/>size<sp/>would<sp/>require</highlight></codeline>
<codeline lineno="38"><highlight class="comment">moving<sp/>it<sp/>if<sp/>there<sp/>was<sp/>another<sp/>object<sp/>right<sp/>next<sp/>to<sp/>it.)</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">Objects<sp/>are<sp/>always<sp/>accessed<sp/>through<sp/>pointers<sp/>of<sp/>the<sp/>type<sp/>&apos;PyObject<sp/>*&apos;.</highlight></codeline>
<codeline lineno="41"><highlight class="comment">The<sp/>type<sp/>&apos;PyObject&apos;<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>only<sp/>contains<sp/>the<sp/>reference<sp/>count</highlight></codeline>
<codeline lineno="42"><highlight class="comment">and<sp/>the<sp/>type<sp/>pointer.<sp/><sp/>The<sp/>actual<sp/>memory<sp/>allocated<sp/>for<sp/>an<sp/>object</highlight></codeline>
<codeline lineno="43"><highlight class="comment">contains<sp/>other<sp/>data<sp/>that<sp/>can<sp/>only<sp/>be<sp/>accessed<sp/>after<sp/>casting<sp/>the<sp/>pointer</highlight></codeline>
<codeline lineno="44"><highlight class="comment">to<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>longer<sp/>structure<sp/>type.<sp/><sp/>This<sp/>longer<sp/>type<sp/>must<sp/>start</highlight></codeline>
<codeline lineno="45"><highlight class="comment">with<sp/>the<sp/>reference<sp/>count<sp/>and<sp/>type<sp/>fields;<sp/>the<sp/>macro<sp/>PyObject_HEAD<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="46"><highlight class="comment">used<sp/>for<sp/>this<sp/>(to<sp/>accommodate<sp/>for<sp/>future<sp/>changes).<sp/><sp/>The<sp/>implementation</highlight></codeline>
<codeline lineno="47"><highlight class="comment">of<sp/>a<sp/>particular<sp/>object<sp/>type<sp/>can<sp/>cast<sp/>the<sp/>object<sp/>pointer<sp/>to<sp/>the<sp/>proper</highlight></codeline>
<codeline lineno="48"><highlight class="comment">type<sp/>and<sp/>back.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">A<sp/>standard<sp/>interface<sp/>exists<sp/>for<sp/>objects<sp/>that<sp/>contain<sp/>an<sp/>array<sp/>of<sp/>items</highlight></codeline>
<codeline lineno="51"><highlight class="comment">whose<sp/>size<sp/>is<sp/>determined<sp/>when<sp/>the<sp/>object<sp/>is<sp/>allocated.</highlight></codeline>
<codeline lineno="52"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_DEBUG<sp/>implies<sp/>Py_TRACE_REFS.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(Py_DEBUG)<sp/>&amp;&amp;<sp/>!defined(Py_TRACE_REFS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TRACE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_TRACE_REFS<sp/>implies<sp/>Py_REF_DEBUG.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(Py_TRACE_REFS)<sp/>&amp;&amp;<sp/>!defined(Py_REF_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_REF_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(Py_LIMITED_API)<sp/>&amp;&amp;<sp/>defined(Py_REF_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>Py_LIMITED_API<sp/>is<sp/>incompatible<sp/>with<sp/>Py_DEBUG,<sp/>Py_TRACE_REFS,<sp/>and<sp/>Py_REF_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_TRACE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>pointers<sp/>to<sp/>support<sp/>a<sp/>doubly-linked<sp/>list<sp/>of<sp/>all<sp/>live<sp/>heap<sp/>objects.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_HEAD_EXTRA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>_object<sp/>*_ob_next;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>_object<sp/>*_ob_prev;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_EXTRA_INIT<sp/>0,<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_HEAD_EXTRA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PyObject_EXTRA_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObject_HEAD<sp/>defines<sp/>the<sp/>initial<sp/>segment<sp/>of<sp/>every<sp/>PyObject.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_HEAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>ob_base;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_HEAD_INIT(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>_PyObject_EXTRA_INIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>1,<sp/>type<sp/>},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyVarObject_HEAD_INIT(type,<sp/>size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>PyObject_HEAD_INIT(type)<sp/>size<sp/>},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObject_VAR_HEAD<sp/>defines<sp/>the<sp/>initial<sp/>segment<sp/>of<sp/>all<sp/>variable-size</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>container<sp/>objects.<sp/><sp/>These<sp/>end<sp/>with<sp/>a<sp/>declaration<sp/>of<sp/>an<sp/>array<sp/>with<sp/>1</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>element,<sp/>but<sp/>enough<sp/>space<sp/>is<sp/>malloc&apos;ed<sp/>so<sp/>that<sp/>the<sp/>array<sp/>actually</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>has<sp/>room<sp/>for<sp/>ob_size<sp/>elements.<sp/><sp/>Note<sp/>that<sp/>ob_size<sp/>is<sp/>an<sp/>element<sp/>count,</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>not<sp/>necessarily<sp/>a<sp/>byte<sp/>count.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_VAR_HEAD<sp/><sp/><sp/><sp/><sp/><sp/>PyVarObject<sp/>ob_base;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_INVALID_SIZE<sp/>(Py_ssize_t)-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Nothing<sp/>is<sp/>actually<sp/>declared<sp/>to<sp/>be<sp/>a<sp/>PyObject,<sp/>but<sp/>every<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>a<sp/>Python<sp/>object<sp/>can<sp/>be<sp/>cast<sp/>to<sp/>a<sp/>PyObject*.<sp/><sp/>This<sp/>is<sp/>inheritance<sp/>built</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>by<sp/>hand.<sp/><sp/>Similarly<sp/>every<sp/>pointer<sp/>to<sp/>a<sp/>variable-size<sp/>Python<sp/>object<sp/>can,</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>in<sp/>addition,<sp/>be<sp/>cast<sp/>to<sp/>PyVarObject*.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="struct__object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__object" kindref="compound">_object</ref><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>_PyObject_HEAD_EXTRA</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>ob_refcnt;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*ob_type;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}<sp/><ref refid="struct__object" kindref="compound">PyObject</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="struct_py_var_object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>ob_base;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>ob_size;<sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>of<sp/>items<sp/>in<sp/>variable<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/><ref refid="struct_py_var_object" kindref="compound">PyVarObject</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_REFCNT(ob)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((PyObject*)(ob))-&gt;ob_refcnt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TYPE(ob)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((PyObject*)(ob))-&gt;ob_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_SIZE(ob)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((PyVarObject*)(ob))-&gt;ob_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*********************<sp/>String<sp/>Literals<sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>structure<sp/>helps<sp/>managing<sp/>static<sp/>strings.<sp/>The<sp/>basic<sp/>usage<sp/>goes<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>Instead<sp/>of<sp/>doing</highlight></codeline>
<codeline lineno="125"><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>PyObject_CallMethod(o,<sp/>&quot;foo&quot;,<sp/>&quot;args&quot;,<sp/>...);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>do</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_IDENTIFIER(foo);</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>_PyObject_CallMethodId(o,<sp/>&amp;PyId_foo,<sp/>&quot;args&quot;,<sp/>...);</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>PyId_foo<sp/>is<sp/>a<sp/>static<sp/>variable,<sp/>either<sp/>on<sp/>block<sp/>level<sp/>or<sp/>file<sp/>level.<sp/>On<sp/>first</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>usage,<sp/>the<sp/>string<sp/>&quot;foo&quot;<sp/>is<sp/>interned,<sp/>and<sp/>the<sp/>structures<sp/>are<sp/>linked.<sp/>On<sp/>interpreter</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>shutdown,<sp/>all<sp/>strings<sp/>are<sp/>released<sp/>(through<sp/>_PyUnicode_ClearStaticStrings).</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>Alternatively,<sp/>_Py_static_string<sp/>allows<sp/>choosing<sp/>the<sp/>variable<sp/>name.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>_PyUnicode_FromId<sp/>returns<sp/>a<sp/>borrowed<sp/>reference<sp/>to<sp/>the<sp/>interned<sp/>string.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>_PyObject_{Get,Set,Has}AttrId<sp/>are<sp/>__getattr__<sp/>versions<sp/>using<sp/>_Py_Identifier*.</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="struct___py___identifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*next;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct__object" kindref="compound">string</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*<ref refid="struct__object" kindref="compound">object</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}<sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_static_string_init(value)<sp/>{<sp/>.next<sp/>=<sp/>NULL,<sp/>.string<sp/>=<sp/>value,<sp/>.object<sp/>=<sp/>NULL<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_static_string(varname,<sp/>value)<sp/><sp/>static<sp/>_Py_Identifier<sp/>varname<sp/>=<sp/>_Py_static_string_init(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_IDENTIFIER(varname)<sp/>_Py_static_string(PyId_##varname,<sp/>#varname)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="155"><highlight class="comment">Type<sp/>objects<sp/>contain<sp/>a<sp/>string<sp/>containing<sp/>the<sp/>type<sp/>name<sp/>(to<sp/>help<sp/>somewhat</highlight></codeline>
<codeline lineno="156"><highlight class="comment">in<sp/>debugging),<sp/>the<sp/>allocation<sp/>parameters<sp/>(see<sp/>PyObject_New()<sp/>and</highlight></codeline>
<codeline lineno="157"><highlight class="comment">PyObject_NewVar()),</highlight></codeline>
<codeline lineno="158"><highlight class="comment">and<sp/>methods<sp/>for<sp/>accessing<sp/>objects<sp/>of<sp/>the<sp/>type.<sp/><sp/>Methods<sp/>are<sp/>optional,<sp/>a</highlight></codeline>
<codeline lineno="159"><highlight class="comment">nil<sp/>pointer<sp/>meaning<sp/>that<sp/>particular<sp/>kind<sp/>of<sp/>access<sp/>is<sp/>not<sp/>available<sp/>for</highlight></codeline>
<codeline lineno="160"><highlight class="comment">this<sp/>type.<sp/><sp/>The<sp/>Py_DECREF()<sp/>macro<sp/>uses<sp/>the<sp/>tp_dealloc<sp/>method<sp/>without</highlight></codeline>
<codeline lineno="161"><highlight class="comment">checking<sp/>for<sp/>a<sp/>nil<sp/>pointer;<sp/>it<sp/>should<sp/>always<sp/>be<sp/>implemented<sp/>except<sp/>if</highlight></codeline>
<codeline lineno="162"><highlight class="comment">the<sp/>implementation<sp/>can<sp/>guarantee<sp/>that<sp/>the<sp/>reference<sp/>count<sp/>will<sp/>never</highlight></codeline>
<codeline lineno="163"><highlight class="comment">reach<sp/>zero<sp/>(e.g.,<sp/>for<sp/>statically<sp/>allocated<sp/>type<sp/>objects).</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">NB:<sp/>the<sp/>methods<sp/>for<sp/>certain<sp/>type<sp/>groups<sp/>are<sp/>now<sp/>contained<sp/>in<sp/>separate</highlight></codeline>
<codeline lineno="166"><highlight class="comment">method<sp/>blocks.</highlight></codeline>
<codeline lineno="167"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*<sp/>(*unaryfunc)(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*<sp/>(*binaryfunc)(<ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*<sp/>(*ternaryfunc)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*inquiry)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>(*lenfunc)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*ssizeargfunc)(PyObject<sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*ssizessizeargfunc)(PyObject<sp/>*,<sp/>Py_ssize_t,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int(*ssizeobjargproc)(PyObject<sp/>*,<sp/>Py_ssize_t,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int(*ssizessizeobjargproc)(PyObject<sp/>*,<sp/>Py_ssize_t,<sp/>Py_ssize_t,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int(*objobjargproc)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>buffer<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="structbufferinfo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbufferinfo" kindref="compound">bufferinfo</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*obj;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>owned<sp/>reference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>itemsize;<sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>Py_ssize_t<sp/>so<sp/>it<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointed<sp/>to<sp/>by<sp/>strides<sp/>in<sp/>simple<sp/>case.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readonly;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*shape;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*strides;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>*suboffsets;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">internal</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}<sp/><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*getbufferproc)(PyObject<sp/>*,<sp/><ref refid="structbufferinfo" kindref="compound">Py_buffer</ref><sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*releasebufferproc)(PyObject<sp/>*,<sp/>Py_buffer<sp/>*);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maximum<sp/>number<sp/>of<sp/>dimensions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_MAX_NDIM<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>for<sp/>getting<sp/>buffers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_SIMPLE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_WRITABLE<sp/>0x0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>we<sp/>used<sp/>to<sp/>include<sp/>an<sp/>E,<sp/>backwards<sp/>compatible<sp/>alias<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_WRITEABLE<sp/>PyBUF_WRITABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_FORMAT<sp/>0x0004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_ND<sp/>0x0008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_STRIDES<sp/>(0x0010<sp/>|<sp/>PyBUF_ND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_C_CONTIGUOUS<sp/>(0x0020<sp/>|<sp/>PyBUF_STRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_F_CONTIGUOUS<sp/>(0x0040<sp/>|<sp/>PyBUF_STRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_ANY_CONTIGUOUS<sp/>(0x0080<sp/>|<sp/>PyBUF_STRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_INDIRECT<sp/>(0x0100<sp/>|<sp/>PyBUF_STRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_CONTIG<sp/>(PyBUF_ND<sp/>|<sp/>PyBUF_WRITABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_CONTIG_RO<sp/>(PyBUF_ND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_STRIDED<sp/>(PyBUF_STRIDES<sp/>|<sp/>PyBUF_WRITABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_STRIDED_RO<sp/>(PyBUF_STRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_RECORDS<sp/>(PyBUF_STRIDES<sp/>|<sp/>PyBUF_WRITABLE<sp/>|<sp/>PyBUF_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_RECORDS_RO<sp/>(PyBUF_STRIDES<sp/>|<sp/>PyBUF_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_FULL<sp/>(PyBUF_INDIRECT<sp/>|<sp/>PyBUF_WRITABLE<sp/>|<sp/>PyBUF_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_FULL_RO<sp/>(PyBUF_INDIRECT<sp/>|<sp/>PyBUF_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_READ<sp/><sp/>0x100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyBUF_WRITE<sp/>0x200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>buffer<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*objobjproc)(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*visitproc)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*traverseproc)(PyObject<sp/>*,<sp/>visitproc,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="struct_py_number_methods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Number<sp/>implementations<sp/>must<sp/>check<sp/>*both*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments<sp/>for<sp/>proper<sp/>type<sp/>and<sp/>implement<sp/>the<sp/>necessary<sp/>conversions</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>slot<sp/>functions<sp/>themselves.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_add;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_subtract;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_multiply;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_remainder;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_divmod;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ternaryfunc<sp/>nb_power;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_negative;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_positive;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_absolute;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>inquiry<sp/>nb_bool;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_invert;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_lshift;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_rshift;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_and;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_xor;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_or;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_int;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*nb_reserved;<sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>slot<sp/>formerly<sp/>known<sp/>as<sp/>nb_long<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_float;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_add;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_subtract;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_multiply;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_remainder;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>ternaryfunc<sp/>nb_inplace_power;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_lshift;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_rshift;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_and;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_xor;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_or;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_floor_divide;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_true_divide;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_floor_divide;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_true_divide;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>nb_index;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_matrix_multiply;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>nb_inplace_matrix_multiply;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/><ref refid="struct_py_number_methods" kindref="compound">PyNumberMethods</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="struct_py_sequence_methods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>lenfunc<sp/>sq_length;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>sq_concat;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>ssizeargfunc<sp/>sq_repeat;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>ssizeargfunc<sp/>sq_item;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*was_sq_slice;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ssizeobjargproc<sp/>sq_ass_item;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*was_sq_ass_slice;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>objobjproc<sp/>sq_contains;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>sq_inplace_concat;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>ssizeargfunc<sp/>sq_inplace_repeat;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}<sp/><ref refid="struct_py_sequence_methods" kindref="compound">PySequenceMethods</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="struct_py_mapping_methods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>lenfunc<sp/>mp_length;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>binaryfunc<sp/>mp_subscript;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>objobjargproc<sp/>mp_ass_subscript;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}<sp/><ref refid="struct_py_mapping_methods" kindref="compound">PyMappingMethods</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="struct_py_async_methods" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_await;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_aiter;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_anext;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}<sp/><ref refid="struct_py_async_methods" kindref="compound">PyAsyncMethods</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="struct_py_buffer_procs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>getbufferproc<sp/>bf_getbuffer;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>releasebufferproc<sp/>bf_releasebuffer;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}<sp/><ref refid="struct_py_buffer_procs" kindref="compound">PyBufferProcs</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*freefunc)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*destructor)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>We<sp/>can&apos;t<sp/>provide<sp/>a<sp/>full<sp/>compile-time<sp/>check<sp/>that<sp/>limited-API</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/>users<sp/>won&apos;t<sp/>implement<sp/>tp_print.<sp/>However,<sp/>not<sp/>defining<sp/>printfunc</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/>and<sp/>making<sp/>tp_print<sp/>of<sp/>a<sp/>different<sp/>function<sp/>pointer<sp/>type</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/>should<sp/>at<sp/>least<sp/>cause<sp/>a<sp/>warning<sp/>in<sp/>most<sp/>cases.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*printfunc)(PyObject<sp/>*,<sp/>FILE<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*getattrfunc)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*getattrofunc)(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*setattrfunc)(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*setattrofunc)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*reprfunc)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Py_hash_t<sp/>(*hashfunc)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*richcmpfunc)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>int);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*getiterfunc)<sp/>(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*iternextfunc)<sp/>(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*descrgetfunc)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*descrsetfunc)<sp/>(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*initproc)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*newfunc)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*allocfunc)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>PyTypeObject;<sp/></highlight><highlight class="comment">/*<sp/>opaque<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="struct__typeobject" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_VAR_HEAD</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tp_name;<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>printing,<sp/>in<sp/>format<sp/>&quot;&lt;module&gt;.&lt;name&gt;&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_basicsize,<sp/>tp_itemsize;<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Methods<sp/>to<sp/>implement<sp/>standard<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>destructor<sp/>tp_dealloc;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>printfunc<sp/>tp_print;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>getattrfunc<sp/>tp_getattr;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>setattrfunc<sp/>tp_setattr;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_async_methods" kindref="compound">PyAsyncMethods</ref><sp/>*tp_as_async;<sp/></highlight><highlight class="comment">/*<sp/>formerly<sp/>known<sp/>as<sp/>tp_compare<sp/>(Python<sp/>2)</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>tp_reserved<sp/>(Python<sp/>3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>reprfunc<sp/>tp_repr;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Method<sp/>suites<sp/>for<sp/>standard<sp/>classes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_number_methods" kindref="compound">PyNumberMethods</ref><sp/>*tp_as_number;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_sequence_methods" kindref="compound">PySequenceMethods</ref><sp/>*tp_as_sequence;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_mapping_methods" kindref="compound">PyMappingMethods</ref><sp/>*tp_as_mapping;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>More<sp/>standard<sp/>operations<sp/>(here<sp/>for<sp/>binary<sp/>compatibility)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>hashfunc<sp/>tp_hash;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>ternaryfunc<sp/>tp_call;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>reprfunc<sp/>tp_str;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>getattrofunc<sp/>tp_getattro;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>setattrofunc<sp/>tp_setattro;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Functions<sp/>to<sp/>access<sp/>object<sp/>as<sp/>input/output<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_buffer_procs" kindref="compound">PyBufferProcs</ref><sp/>*tp_as_buffer;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flags<sp/>to<sp/>define<sp/>presence<sp/>of<sp/>optional/expanded<sp/>features<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tp_flags;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tp_doc;<sp/></highlight><highlight class="comment">/*<sp/>Documentation<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assigned<sp/>meaning<sp/>in<sp/>release<sp/>2.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>call<sp/>function<sp/>for<sp/>all<sp/>accessible<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>traverseproc<sp/>tp_traverse;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delete<sp/>references<sp/>to<sp/>contained<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>inquiry<sp/>tp_clear;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assigned<sp/>meaning<sp/>in<sp/>release<sp/>2.1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rich<sp/>comparisons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>richcmpfunc<sp/>tp_richcompare;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>weak<sp/>reference<sp/>enabler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_weaklistoffset;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterators<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>getiterfunc<sp/>tp_iter;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>iternextfunc<sp/>tp_iternext;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Attribute<sp/>descriptor<sp/>and<sp/>subclassing<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_py_method_def" kindref="compound">PyMethodDef</ref><sp/>*tp_methods;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_py_member_def" kindref="compound">PyMemberDef</ref><sp/>*tp_members;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_py_get_set_def" kindref="compound">PyGetSetDef</ref><sp/>*tp_getset;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*tp_base;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_dict;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>descrgetfunc<sp/>tp_descr_get;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>descrsetfunc<sp/>tp_descr_set;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_dictoffset;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>initproc<sp/>tp_init;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>allocfunc<sp/>tp_alloc;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>newfunc<sp/>tp_new;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>freefunc<sp/>tp_free;<sp/></highlight><highlight class="comment">/*<sp/>Low-level<sp/>free-memory<sp/>routine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>inquiry<sp/>tp_is_gc;<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>PyObject_IS_GC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_bases;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_mro;<sp/></highlight><highlight class="comment">/*<sp/>method<sp/>resolution<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_cache;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_subclasses;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tp_weaklist;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>destructor<sp/>tp_del;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Type<sp/>attribute<sp/>cache<sp/>version<sp/>tag.<sp/>Added<sp/>in<sp/>version<sp/>2.6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tp_version_tag;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>destructor<sp/>tp_finalize;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COUNT_ALLOCS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>must<sp/>be<sp/>last<sp/>and<sp/>never<sp/>explicitly<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_allocs;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_frees;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>tp_maxalloc;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*tp_prev;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__typeobject" kindref="compound">_typeobject</ref><sp/>*tp_next;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">}<sp/>PyTypeObject;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="struct_py_type___slot" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>slot<sp/>id,<sp/>see<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pfunc;<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}<sp/><ref refid="struct_py_type___slot" kindref="compound">PyType_Slot</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="struct_py_type___spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>basicsize;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itemsize;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_type___slot" kindref="compound">PyType_Slot</ref><sp/>*slots;<sp/></highlight><highlight class="comment">/*<sp/>terminated<sp/>by<sp/>slot==0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}<sp/><ref refid="struct_py_type___spec" kindref="compound">PyType_Spec</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">PyAPI_FUNC(PyObject*)<sp/>PyType_FromSpec(<ref refid="struct_py_type___spec" kindref="compound">PyType_Spec</ref>*);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">PyAPI_FUNC(PyObject*)<sp/>PyType_FromSpecWithBases(<ref refid="struct_py_type___spec" kindref="compound">PyType_Spec</ref>*,<sp/>PyObject*);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03040000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>PyType_GetSlot(PyTypeObject*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>*real*<sp/>layout<sp/>of<sp/>a<sp/>type<sp/>object<sp/>when<sp/>allocated<sp/>on<sp/>the<sp/>heap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="struct__heaptypeobject" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__heaptypeobject" kindref="compound">_heaptypeobject</ref><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>there&apos;s<sp/>a<sp/>dependency<sp/>on<sp/>the<sp/>order<sp/>of<sp/>these<sp/>members</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>slotptr()<sp/>in<sp/>typeobject.c<sp/>.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/>ht_type;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_async_methods" kindref="compound">PyAsyncMethods</ref><sp/>as_async;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_number_methods" kindref="compound">PyNumberMethods</ref><sp/>as_number;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_mapping_methods" kindref="compound">PyMappingMethods</ref><sp/>as_mapping;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_sequence_methods" kindref="compound">PySequenceMethods</ref><sp/>as_sequence;<sp/></highlight><highlight class="comment">/*<sp/>as_sequence<sp/>comes<sp/>after<sp/>as_mapping,</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>that<sp/>the<sp/>mapping<sp/>wins<sp/>when<sp/>both</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>mapping<sp/>and<sp/>the<sp/>sequence<sp/>define</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>given<sp/>operator<sp/>(e.g.<sp/>__getitem__).</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>add_operators()<sp/>in<sp/>typeobject.c<sp/>.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_py_buffer_procs" kindref="compound">PyBufferProcs</ref><sp/>as_buffer;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*ht_name,<sp/>*ht_slots,<sp/>*ht_qualname;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_dictkeysobject<sp/>*ht_cached_keys;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>here<sp/>are<sp/>optional<sp/>user<sp/>slots,<sp/>followed<sp/>by<sp/>the<sp/>members.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}<sp/><ref refid="struct__heaptypeobject" kindref="compound">PyHeapTypeObject</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>access<sp/>macro<sp/>to<sp/>the<sp/>members<sp/>which<sp/>are<sp/>floating<sp/>&quot;behind&quot;<sp/>the<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyHeapType_GET_MEMBERS(etype)<sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((PyMemberDef<sp/>*)(((char<sp/>*)etype)<sp/>+<sp/>Py_TYPE(etype)-&gt;tp_basicsize))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>type<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyType_IsSubtype(PyTypeObject<sp/>*,<sp/>PyTypeObject<sp/>*);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyObject_TypeCheck(ob,<sp/>tp)<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(Py_TYPE(ob)<sp/>==<sp/>(tp)<sp/>||<sp/>PyType_IsSubtype(Py_TYPE(ob),<sp/>(tp)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">PyAPI_DATA(PyTypeObject)<sp/>PyType_Type;<sp/></highlight><highlight class="comment">/*<sp/>built-in<sp/>&apos;type&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">PyAPI_DATA(PyTypeObject)<sp/>PyBaseObject_Type;<sp/></highlight><highlight class="comment">/*<sp/>built-in<sp/>&apos;object&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">PyAPI_DATA(PyTypeObject)<sp/>PySuper_Type;<sp/></highlight><highlight class="comment">/*<sp/>built-in<sp/>&apos;super&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>PyType_GetFlags(PyTypeObject*);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyType_Check(op)<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyType_FastSubclass(Py_TYPE(op),<sp/>Py_TPFLAGS_TYPE_SUBCLASS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyType_CheckExact(op)<sp/>(Py_TYPE(op)<sp/>==<sp/>&amp;PyType_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyType_Ready(PyTypeObject<sp/>*);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyType_GenericAlloc(PyTypeObject<sp/>*,<sp/>Py_ssize_t);</highlight></codeline>
<codeline lineno="501"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyType_GenericNew(PyTypeObject<sp/>*,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyType_Lookup(PyTypeObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyType_LookupId(PyTypeObject<sp/>*,<sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyObject_LookupSpecial(PyObject<sp/>*,<sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">PyAPI_FUNC(PyTypeObject<sp/>*)<sp/>_PyType_CalculateMetaclass(PyTypeObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyType_ClearCache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyType_Modified(PyTypeObject<sp/>*);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyType_GetDocFromInternalDoc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyType_GetTextSignatureFromInternalDoc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>operations<sp/>on<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_Print(PyObject<sp/>*,<sp/>FILE<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_BreakPoint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyObject_Dump(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_Repr(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_Str(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_ASCII(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_Bytes(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_RichCompare(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_RichCompareBool(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_GetAttrString(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="531"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_SetAttrString(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_HasAttrString(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_GetAttr(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_SetAttr(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_HasAttr(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_IsAbstract(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyObject_GetAttrId(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*);</highlight></codeline>
<codeline lineno="539"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_SetAttrId(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="540"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyObject_HasAttrId(PyObject<sp/>*,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct___py___identifier" kindref="compound">_Py_Identifier</ref><sp/>*);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>**)<sp/>_PyObject_GetDictPtr(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_SelfIter(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>_PyObject_NextNotImplemented(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_GenericGetAttr(PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="548"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_GenericSetAttr(PyObject<sp/>*,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(Py_LIMITED_API)<sp/>||<sp/>Py_LIMITED_API+0<sp/>&gt;=<sp/>0x03030000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_GenericSetDict(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">PyAPI_FUNC(Py_hash_t)<sp/>PyObject_Hash(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">PyAPI_FUNC(Py_hash_t)<sp/>PyObject_HashNotImplemented(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_IsTrue(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_Not(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="557"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyCallable_Check(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyObject_ClearWeakRefs(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyObject_CallFinalizer(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyObject_CallFinalizerFromDealloc(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Same<sp/>as<sp/>PyObject_Generic{Get,Set}Attr,<sp/>but<sp/>passing<sp/>the<sp/>attributes</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/>dict<sp/>as<sp/>the<sp/>last<sp/>parameter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">_PyObject_GenericGetAttrWithDict(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">_PyObject_GenericSetAttrWithDict(PyObject<sp/>*,<sp/>PyObject<sp/>*,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>to<sp/>look<sp/>up<sp/>a<sp/>builtin<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">_PyObject_GetBuiltin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObject_Dir(obj)<sp/>acts<sp/>like<sp/>Python<sp/>builtins.dir(obj),<sp/>returning<sp/>a</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/>list<sp/>of<sp/>strings.<sp/><sp/>PyObject_Dir(NULL)<sp/>is<sp/>like<sp/>builtins.dir(),</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/>returning<sp/>the<sp/>names<sp/>of<sp/>the<sp/>current<sp/>locals.<sp/><sp/>In<sp/>this<sp/>case,<sp/>if<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/>no<sp/>current<sp/>locals,<sp/>NULL<sp/>is<sp/>returned,<sp/>and<sp/>PyErr_Occurred()<sp/>is<sp/>false.</highlight></codeline>
<codeline lineno="585"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">PyAPI_FUNC(PyObject<sp/>*)<sp/>PyObject_Dir(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helpers<sp/>for<sp/>printing<sp/>recursive<sp/>container<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>Py_ReprEnter(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="591"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>Py_ReprLeave(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flag<sp/>bits<sp/>for<sp/>printing:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_PRINT_RAW<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>string<sp/>quotes<sp/>etc.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="597"><highlight class="comment">`Type<sp/>flags<sp/>(tp_flags)</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">These<sp/>flags<sp/>are<sp/>used<sp/>to<sp/>extend<sp/>the<sp/>type<sp/>structure<sp/>in<sp/>a<sp/>backwards-compatible</highlight></codeline>
<codeline lineno="600"><highlight class="comment">fashion.<sp/>Extensions<sp/>can<sp/>use<sp/>the<sp/>flags<sp/>to<sp/>indicate<sp/>(and<sp/>test)<sp/>when<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="601"><highlight class="comment">type<sp/>structure<sp/>contains<sp/>a<sp/>new<sp/>feature.<sp/>The<sp/>Python<sp/>core<sp/>will<sp/>use<sp/>these<sp/>when</highlight></codeline>
<codeline lineno="602"><highlight class="comment">introducing<sp/>new<sp/>functionality<sp/>between<sp/>major<sp/>revisions<sp/>(to<sp/>avoid<sp/>mid-version</highlight></codeline>
<codeline lineno="603"><highlight class="comment">changes<sp/>in<sp/>the<sp/>PYTHON_API_VERSION).</highlight></codeline>
<codeline lineno="604"><highlight class="comment"></highlight></codeline>
<codeline lineno="605"><highlight class="comment">Arbitration<sp/>of<sp/>the<sp/>flag<sp/>bit<sp/>positions<sp/>will<sp/>need<sp/>to<sp/>be<sp/>coordinated<sp/>among</highlight></codeline>
<codeline lineno="606"><highlight class="comment">all<sp/>extension<sp/>writers<sp/>who<sp/>publically<sp/>release<sp/>their<sp/>extensions<sp/>(this<sp/>will</highlight></codeline>
<codeline lineno="607"><highlight class="comment">be<sp/>fewer<sp/>than<sp/>you<sp/>might<sp/>expect!)..</highlight></codeline>
<codeline lineno="608"><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment">Most<sp/>flags<sp/>were<sp/>removed<sp/>as<sp/>of<sp/>Python<sp/>3.0<sp/>to<sp/>make<sp/>room<sp/>for<sp/>new<sp/>flags.<sp/><sp/>(Some</highlight></codeline>
<codeline lineno="610"><highlight class="comment">flags<sp/>are<sp/>not<sp/>for<sp/>backwards<sp/>compatibility<sp/>but<sp/>to<sp/>indicate<sp/>the<sp/>presence<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="611"><highlight class="comment">optional<sp/>feature;<sp/>these<sp/>flags<sp/>remain<sp/>of<sp/>course.)</highlight></codeline>
<codeline lineno="612"><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment">Type<sp/>definitions<sp/>should<sp/>use<sp/>Py_TPFLAGS_DEFAULT<sp/>for<sp/>their<sp/>tp_flags<sp/>value.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">Code<sp/>can<sp/>use<sp/>PyType_HasFeature(type_ob,<sp/>flag_value)<sp/>to<sp/>test<sp/>whether<sp/>the</highlight></codeline>
<codeline lineno="616"><highlight class="comment">given<sp/>type<sp/>object<sp/>has<sp/>a<sp/>specified<sp/>feature.</highlight></codeline>
<codeline lineno="617"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>type<sp/>object<sp/>is<sp/>dynamically<sp/>allocated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HEAPTYPE<sp/>(1UL<sp/>&lt;&lt;<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>type<sp/>allows<sp/>subclassing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_BASETYPE<sp/>(1UL<sp/>&lt;&lt;<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>type<sp/>is<sp/>&apos;ready&apos;<sp/>--<sp/>fully<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_READY<sp/>(1UL<sp/>&lt;&lt;<sp/>12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>while<sp/>the<sp/>type<sp/>is<sp/>being<sp/>&apos;readied&apos;,<sp/>to<sp/>prevent<sp/>recursive<sp/>ready<sp/>calls<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_READYING<sp/>(1UL<sp/>&lt;&lt;<sp/>13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Objects<sp/>support<sp/>garbage<sp/>collection<sp/>(see<sp/>objimp.h)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HAVE_GC<sp/>(1UL<sp/>&lt;&lt;<sp/>14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>two<sp/>bits<sp/>are<sp/>preserved<sp/>for<sp/>Stackless<sp/>Python,<sp/>next<sp/>after<sp/>this<sp/>is<sp/>17<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STACKLESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION<sp/>(3UL<sp/>&lt;&lt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Objects<sp/>support<sp/>type<sp/>attribute<sp/>cache<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HAVE_VERSION_TAG<sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>18)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_VALID_VERSION_TAG<sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>19)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>is<sp/>abstract<sp/>and<sp/>cannot<sp/>be<sp/>instantiated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_IS_ABSTRACT<sp/>(1UL<sp/>&lt;&lt;<sp/>20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>flags<sp/>are<sp/>used<sp/>to<sp/>determine<sp/>if<sp/>a<sp/>type<sp/>is<sp/>a<sp/>subclass.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_LONG_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>24)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_LIST_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_TUPLE_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>26)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_BYTES_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>27)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_UNICODE_SUBCLASS<sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>28)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_DICT_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>29)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_BASE_EXC_SUBCLASS<sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>30)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_TYPE_SUBCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>31)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_DEFAULT<sp/><sp/>(<sp/>\</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_TPFLAGS_HAVE_STACKLESS_EXTENSION<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_TPFLAGS_HAVE_VERSION_TAG<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE:<sp/>The<sp/>following<sp/>flags<sp/>reuse<sp/>lower<sp/>bits<sp/>(removed<sp/>as<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>Python<sp/>3.0<sp/>transition).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Type<sp/>structure<sp/>has<sp/>tp_finalize<sp/>member<sp/>(3.4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TPFLAGS_HAVE_FINALIZE<sp/>(1UL<sp/>&lt;&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyType_HasFeature(t,f)<sp/><sp/>((PyType_GetFlags(t)<sp/>&amp;<sp/>(f))<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyType_HasFeature(t,f)<sp/><sp/>(((t)-&gt;tp_flags<sp/>&amp;<sp/>(f))<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyType_FastSubclass(t,f)<sp/><sp/>PyType_HasFeature(t,f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="678"><highlight class="comment">The<sp/>macros<sp/>Py_INCREF(op)<sp/>and<sp/>Py_DECREF(op)<sp/>are<sp/>used<sp/>to<sp/>increment<sp/>or<sp/>decrement</highlight></codeline>
<codeline lineno="679"><highlight class="comment">reference<sp/>counts.<sp/><sp/>Py_DECREF<sp/>calls<sp/>the<sp/>object&apos;s<sp/>deallocator<sp/>function<sp/>when</highlight></codeline>
<codeline lineno="680"><highlight class="comment">the<sp/>refcount<sp/>falls<sp/>to<sp/>0;<sp/>for</highlight></codeline>
<codeline lineno="681"><highlight class="comment">objects<sp/>that<sp/>don&apos;t<sp/>contain<sp/>references<sp/>to<sp/>other<sp/>objects<sp/>or<sp/>heap<sp/>memory</highlight></codeline>
<codeline lineno="682"><highlight class="comment">this<sp/>can<sp/>be<sp/>the<sp/>standard<sp/>function<sp/>free().<sp/><sp/>Both<sp/>macros<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="683"><highlight class="comment">wherever<sp/>a<sp/>void<sp/>expression<sp/>is<sp/>allowed.<sp/><sp/>The<sp/>argument<sp/>must<sp/>not<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="684"><highlight class="comment">NULL<sp/>pointer.<sp/><sp/>If<sp/>it<sp/>may<sp/>be<sp/>NULL,<sp/>use<sp/>Py_XINCREF/Py_XDECREF<sp/>instead.</highlight></codeline>
<codeline lineno="685"><highlight class="comment">The<sp/>macro<sp/>_Py_NewReference(op)<sp/>initialize<sp/>reference<sp/>counts<sp/>to<sp/>1,<sp/>and</highlight></codeline>
<codeline lineno="686"><highlight class="comment">in<sp/>special<sp/>builds<sp/>(Py_REF_DEBUG,<sp/>Py_TRACE_REFS)<sp/>performs<sp/>additional</highlight></codeline>
<codeline lineno="687"><highlight class="comment">bookkeeping<sp/>appropriate<sp/>to<sp/>the<sp/>special<sp/>build.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"></highlight></codeline>
<codeline lineno="689"><highlight class="comment">We<sp/>assume<sp/>that<sp/>the<sp/>reference<sp/>count<sp/>field<sp/>can<sp/>never<sp/>overflow;<sp/>this<sp/>can</highlight></codeline>
<codeline lineno="690"><highlight class="comment">be<sp/>proven<sp/>when<sp/>the<sp/>size<sp/>of<sp/>the<sp/>field<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>pointer<sp/>size,<sp/>so</highlight></codeline>
<codeline lineno="691"><highlight class="comment">we<sp/>ignore<sp/>the<sp/>possibility.<sp/><sp/>Provided<sp/>a<sp/>C<sp/>int<sp/>is<sp/>at<sp/>least<sp/>32<sp/>bits<sp/>(which</highlight></codeline>
<codeline lineno="692"><highlight class="comment">is<sp/>implicitly<sp/>assumed<sp/>in<sp/>many<sp/>parts<sp/>of<sp/>this<sp/>code),<sp/>that&apos;s<sp/>enough<sp/>for</highlight></codeline>
<codeline lineno="693"><highlight class="comment">about<sp/>2**31<sp/>references<sp/>to<sp/>an<sp/>object.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"></highlight></codeline>
<codeline lineno="695"><highlight class="comment">XXX<sp/>The<sp/>following<sp/>became<sp/>out<sp/>of<sp/>date<sp/>in<sp/>Python<sp/>2.2,<sp/>but<sp/>I&apos;m<sp/>not<sp/>sure</highlight></codeline>
<codeline lineno="696"><highlight class="comment">XXX<sp/>what<sp/>the<sp/>full<sp/>truth<sp/>is<sp/>now.<sp/><sp/>Certainly,<sp/>heap-allocated<sp/>type<sp/>objects</highlight></codeline>
<codeline lineno="697"><highlight class="comment">XXX<sp/>can<sp/>and<sp/>should<sp/>be<sp/>deallocated.</highlight></codeline>
<codeline lineno="698"><highlight class="comment">Type<sp/>objects<sp/>should<sp/>never<sp/>be<sp/>deallocated;<sp/>the<sp/>type<sp/>pointer<sp/>in<sp/>an<sp/>object</highlight></codeline>
<codeline lineno="699"><highlight class="comment">is<sp/>not<sp/>considered<sp/>to<sp/>be<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>type<sp/>object,<sp/>to<sp/>save</highlight></codeline>
<codeline lineno="700"><highlight class="comment">complications<sp/>in<sp/>the<sp/>deallocation<sp/>function.<sp/><sp/>(This<sp/>is<sp/>actually<sp/>a</highlight></codeline>
<codeline lineno="701"><highlight class="comment">decision<sp/>that&apos;s<sp/>up<sp/>to<sp/>the<sp/>implementer<sp/>of<sp/>each<sp/>new<sp/>type<sp/>so<sp/>if<sp/>you<sp/>want,</highlight></codeline>
<codeline lineno="702"><highlight class="comment">you<sp/>can<sp/>count<sp/>such<sp/>references<sp/>to<sp/>the<sp/>type<sp/>object.)</highlight></codeline>
<codeline lineno="703"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>First<sp/>define<sp/>a<sp/>pile<sp/>of<sp/>simple<sp/>helper<sp/>macros,<sp/>one<sp/>set<sp/>per<sp/>special</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>build<sp/>symbol.<sp/><sp/>These<sp/>either<sp/>expand<sp/>to<sp/>the<sp/>obvious<sp/>things,<sp/>or<sp/>to</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>nothing<sp/>at<sp/>all<sp/>when<sp/>the<sp/>special<sp/>mode<sp/>isn&apos;t<sp/>in<sp/>effect.<sp/><sp/>The<sp/>main</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>macros<sp/>can<sp/>later<sp/>be<sp/>defined<sp/>just<sp/>once<sp/>then,<sp/>yet<sp/>expand<sp/>to<sp/>different</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>things<sp/>depending<sp/>on<sp/>which<sp/>special<sp/>build<sp/>options<sp/>are<sp/>and<sp/>aren&apos;t<sp/>in<sp/>effect.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>Trust<sp/>me<sp/>&lt;wink&gt;:<sp/><sp/>while<sp/>painful,<sp/>this<sp/>is<sp/>20x<sp/>easier<sp/>to<sp/>understand<sp/>than,</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>e.g,<sp/>defining<sp/>_Py_NewReference<sp/>five<sp/>different<sp/>times<sp/>in<sp/>a<sp/>maze<sp/>of<sp/>nested</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/>#ifdefs<sp/>(we<sp/>used<sp/>to<sp/>do<sp/>that<sp/>--<sp/>it<sp/>was<sp/>impenetrable).</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_REF_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">PyAPI_DATA(Py_ssize_t)<sp/>_Py_RefTotal;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_NegativeRefcount(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno,<sp/>PyObject<sp/>*op);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">PyAPI_FUNC(Py_ssize_t)<sp/>_Py_GetRefTotal(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_REFTOTAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_RefTotal++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_DEC_REFTOTAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_RefTotal--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_REF_DEBUG_COMMA<sp/><sp/><sp/><sp/><sp/>,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_CHECK_REFCNT(OP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(((PyObject*)OP)-&gt;ob_refcnt<sp/>&lt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_NegativeRefcount(__FILE__,<sp/>__LINE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PyObject<sp/>*)(OP));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_REF_DEBUG<sp/>also<sp/>controls<sp/>the<sp/>display<sp/>of<sp/>refcounts<sp/>and<sp/>memory<sp/>block</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>allocations<sp/>at<sp/>the<sp/>interactive<sp/>prompt<sp/>and<sp/>at<sp/>interpreter<sp/>shutdown</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyDebug_PrintTotalRefs(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PY_DEBUG_PRINT_TOTAL_REFS()<sp/>_PyDebug_PrintTotalRefs()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_REFTOTAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_DEC_REFTOTAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_REF_DEBUG_COMMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_CHECK_REFCNT(OP)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>semicolon<sp/>*/</highlight><highlight class="preprocessor">;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PY_DEBUG_PRINT_TOTAL_REFS()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_REF_DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COUNT_ALLOCS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>inc_count(PyTypeObject<sp/>*);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>dec_count(PyTypeObject<sp/>*);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_TPALLOCS(OP)<sp/><sp/><sp/><sp/>inc_count(Py_TYPE(OP))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_TPFREES(OP)<sp/><sp/><sp/><sp/><sp/>dec_count(Py_TYPE(OP))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_DEC_TPFREES(OP)<sp/><sp/><sp/><sp/><sp/>Py_TYPE(OP)-&gt;tp_frees--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_COUNT_ALLOCS_COMMA<sp/><sp/>,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_TPALLOCS(OP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_INC_TPFREES(OP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_DEC_TPFREES(OP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_COUNT_ALLOCS_COMMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>COUNT_ALLOCS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_TRACE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Py_TRACE_REFS<sp/>is<sp/>such<sp/>major<sp/>surgery<sp/>that<sp/>we<sp/>call<sp/>external<sp/>routines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_NewReference(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="757"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_ForgetReference(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="758"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_Dealloc(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="759"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_PrintReferences(FILE<sp/>*);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_PrintReferenceAddresses(FILE<sp/>*);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_AddToAllObjects(PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Without<sp/>Py_TRACE_REFS,<sp/>there&apos;s<sp/>little<sp/>enough<sp/>to<sp/>do<sp/>that<sp/>we<sp/>expand<sp/>code</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>inline.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_NewReference(op)<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Py_INC_TPALLOCS(op)<sp/>_Py_COUNT_ALLOCS_COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Py_INC_REFTOTAL<sp/><sp/>_Py_REF_DEBUG_COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Py_REFCNT(op)<sp/>=<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_ForgetReference(op)<sp/>_Py_INC_TPFREES(op)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_Py_Dealloc(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_Py_Dealloc(op)<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Py_INC_TPFREES(op)<sp/>_Py_COUNT_ALLOCS_COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(*Py_TYPE(op)-&gt;tp_dealloc)((PyObject<sp/>*)(op)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_TRACE_REFS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_INCREF(op)<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Py_INC_REFTOTAL<sp/><sp/>_Py_REF_DEBUG_COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((PyObject<sp/>*)(op))-&gt;ob_refcnt++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_DECREF(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_decref_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_Py_DEC_REFTOTAL<sp/><sp/>_Py_REF_DEBUG_COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--(_py_decref_tmp)-&gt;ob_refcnt<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_CHECK_REFCNT(_py_decref_tmp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Py_Dealloc(_py_decref_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Safely<sp/>decref<sp/>`op`<sp/>and<sp/>set<sp/>`op`<sp/>to<sp/>NULL,<sp/>especially<sp/>useful<sp/>in<sp/>tp_clear</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>and<sp/>tp_dealloc<sp/>implementations.</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>&quot;the<sp/>obvious&quot;<sp/>code<sp/>can<sp/>be<sp/>deadly:</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Py_XDECREF(op);</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>Typically,<sp/>`op`<sp/>is<sp/>something<sp/>like<sp/>self-&gt;containee,<sp/>and<sp/>`self`<sp/>is<sp/>done</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>using<sp/>its<sp/>`containee`<sp/>member.<sp/><sp/>In<sp/>the<sp/>code<sp/>sequence<sp/>above,<sp/>suppose</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>`containee`<sp/>is<sp/>non-NULL<sp/>with<sp/>a<sp/>refcount<sp/>of<sp/>1.<sp/><sp/>Its<sp/>refcount<sp/>falls<sp/>to</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>0<sp/>on<sp/>the<sp/>first<sp/>line,<sp/>which<sp/>can<sp/>trigger<sp/>an<sp/>arbitrary<sp/>amount<sp/>of<sp/>code,</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/>possibly<sp/>including<sp/>finalizers<sp/>(like<sp/>__del__<sp/>methods<sp/>or<sp/>weakref<sp/>callbacks)</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*<sp/>coded<sp/>in<sp/>Python,<sp/>which<sp/>in<sp/>turn<sp/>can<sp/>release<sp/>the<sp/>GIL<sp/>and<sp/>allow<sp/>other<sp/>threads</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/>to<sp/>run,<sp/>etc.<sp/><sp/>Such<sp/>code<sp/>may<sp/>even<sp/>invoke<sp/>methods<sp/>of<sp/>`self`<sp/>again,<sp/>or<sp/>cause</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>cyclic<sp/>gc<sp/>to<sp/>trigger,<sp/>but--<sp/>oops!<sp/>--self-&gt;containee<sp/>still<sp/>points<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>object<sp/>being<sp/>torn<sp/>down,<sp/>and<sp/>it<sp/>may<sp/>be<sp/>in<sp/>an<sp/>insane<sp/>state<sp/>while<sp/>being<sp/>torn</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>down.<sp/><sp/>This<sp/>has<sp/>in<sp/>fact<sp/>been<sp/>a<sp/>rich<sp/>historic<sp/>source<sp/>of<sp/>miserable<sp/>(rare<sp/>&amp;</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>hard-to-diagnose)<sp/>segfaulting<sp/>(and<sp/>other)<sp/>bugs.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>The<sp/>safe<sp/>way<sp/>is:</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Py_CLEAR(op);</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/>That<sp/>arranges<sp/>to<sp/>set<sp/>`op`<sp/>to<sp/>NULL<sp/>_before_<sp/>decref&apos;ing,<sp/>so<sp/>that<sp/>any<sp/>code</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>triggered<sp/>as<sp/>a<sp/>side-effect<sp/>of<sp/>`op`<sp/>getting<sp/>torn<sp/>down<sp/>no<sp/>longer<sp/>believes</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>`op`<sp/>points<sp/>to<sp/>a<sp/>valid<sp/>object.</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>There<sp/>are<sp/>cases<sp/>where<sp/>it&apos;s<sp/>safe<sp/>to<sp/>use<sp/>the<sp/>naive<sp/>code,<sp/>but<sp/>they&apos;re<sp/>brittle.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>For<sp/>example,<sp/>if<sp/>`op`<sp/>points<sp/>to<sp/>a<sp/>Python<sp/>integer,<sp/>you<sp/>know<sp/>that<sp/>destroying</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>one<sp/>of<sp/>those<sp/>can&apos;t<sp/>cause<sp/>problems<sp/>--<sp/>but<sp/>in<sp/>part<sp/>that<sp/>relies<sp/>on<sp/>that</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>Python<sp/>integers<sp/>aren&apos;t<sp/>currently<sp/>weakly<sp/>referencable.<sp/><sp/>Best<sp/>practice<sp/>is</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/>to<sp/>use<sp/>Py_CLEAR()<sp/>even<sp/>if<sp/>you<sp/>can&apos;t<sp/>think<sp/>of<sp/>a<sp/>reason<sp/>for<sp/>why<sp/>you<sp/>need<sp/>to.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_CLEAR(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_py_tmp<sp/>!=<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(op)<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(_py_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>to<sp/>use<sp/>in<sp/>case<sp/>the<sp/>object<sp/>pointer<sp/>may<sp/>be<sp/>NULL:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_XINCREF(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_xincref_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_py_xincref_tmp<sp/>!=<sp/>NULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(_py_xincref_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_XDECREF(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_xdecref_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_py_xdecref_tmp<sp/>!=<sp/>NULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(_py_xdecref_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Safely<sp/>decref<sp/>`op`<sp/>and<sp/>set<sp/>`op`<sp/>to<sp/>`op2`.</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/>As<sp/>in<sp/>case<sp/>of<sp/>Py_CLEAR<sp/>&quot;the<sp/>obvious&quot;<sp/>code<sp/>can<sp/>be<sp/>deadly:</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Py_DECREF(op);</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>op<sp/>=<sp/>op2;</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>The<sp/>safe<sp/>way<sp/>is:</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Py_SETREF(op,<sp/>op2);</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>That<sp/>arranges<sp/>to<sp/>set<sp/>`op`<sp/>to<sp/>`op2`<sp/>_before_<sp/>decref&apos;ing,<sp/>so<sp/>that<sp/>any<sp/>code</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*<sp/>triggered<sp/>as<sp/>a<sp/>side-effect<sp/>of<sp/>`op`<sp/>getting<sp/>torn<sp/>down<sp/>no<sp/>longer<sp/>believes</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>`op`<sp/>points<sp/>to<sp/>a<sp/>valid<sp/>object.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>Py_XSETREF<sp/>is<sp/>a<sp/>variant<sp/>of<sp/>Py_SETREF<sp/>that<sp/>uses<sp/>Py_XDECREF<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/>Py_DECREF.</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_SETREF(op,<sp/>op2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(op)<sp/>=<sp/>(op2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(_py_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_XSETREF(op,<sp/>op2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*_py_tmp<sp/>=<sp/>(PyObject<sp/>*)(op);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(op)<sp/>=<sp/>(op2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="886"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(_py_tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="892"><highlight class="comment">These<sp/>are<sp/>provided<sp/>as<sp/>conveniences<sp/>to<sp/>Python<sp/>runtime<sp/>embedders,<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="893"><highlight class="comment">they<sp/>can<sp/>have<sp/>object<sp/>code<sp/>that<sp/>is<sp/>not<sp/>dependent<sp/>on<sp/>Python<sp/>compilation<sp/>flags.</highlight></codeline>
<codeline lineno="894"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>Py_IncRef(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>Py_DecRef(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">PyAPI_DATA(PyTypeObject)<sp/>_PyNone_Type;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">PyAPI_DATA(PyTypeObject)<sp/>_PyNotImplemented_Type;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="904"><highlight class="comment">_Py_NoneStruct<sp/>is<sp/>an<sp/>object<sp/>of<sp/>undefined<sp/>type<sp/>which<sp/>can<sp/>be<sp/>used<sp/>in<sp/>contexts</highlight></codeline>
<codeline lineno="905"><highlight class="comment">where<sp/>NULL<sp/>(nil)<sp/>is<sp/>not<sp/>suitable<sp/>(since<sp/>NULL<sp/>often<sp/>means<sp/>&apos;error&apos;).</highlight></codeline>
<codeline lineno="906"><highlight class="comment"></highlight></codeline>
<codeline lineno="907"><highlight class="comment">Don&apos;t<sp/>forget<sp/>to<sp/>apply<sp/>Py_INCREF()<sp/>when<sp/>returning<sp/>this<sp/>value!!!</highlight></codeline>
<codeline lineno="908"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">PyAPI_DATA(PyObject)<sp/>_Py_NoneStruct;<sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>use<sp/>this<sp/>directly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_None<sp/>(&amp;_Py_NoneStruct)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>for<sp/>returning<sp/>Py_None<sp/>from<sp/>a<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_RETURN_NONE<sp/>return<sp/>Py_INCREF(Py_None),<sp/>Py_None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="916"><highlight class="comment">Py_NotImplemented<sp/>is<sp/>a<sp/>singleton<sp/>used<sp/>to<sp/>signal<sp/>that<sp/>an<sp/>operation<sp/>is</highlight></codeline>
<codeline lineno="917"><highlight class="comment">not<sp/>implemented<sp/>for<sp/>a<sp/>given<sp/>type<sp/>combination.</highlight></codeline>
<codeline lineno="918"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">PyAPI_DATA(PyObject)<sp/>_Py_NotImplementedStruct;<sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>use<sp/>this<sp/>directly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_NotImplemented<sp/>(&amp;_Py_NotImplementedStruct)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>for<sp/>returning<sp/>Py_NotImplemented<sp/>from<sp/>a<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_RETURN_NOTIMPLEMENTED<sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Py_INCREF(Py_NotImplemented),<sp/>Py_NotImplemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Rich<sp/>comparison<sp/>opcodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_LT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_LE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_EQ<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_NE<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_GT<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_GE<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Maps<sp/>Py_LT<sp/>to<sp/>Py_GT,<sp/>...,<sp/>Py_GE<sp/>to<sp/>Py_LE.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*<sp/>Defined<sp/>in<sp/>object.c.</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_Py_SwappedOp[];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="943"><highlight class="comment">More<sp/>conventions</highlight></codeline>
<codeline lineno="944"><highlight class="comment">================</highlight></codeline>
<codeline lineno="945"><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment">Argument<sp/>Checking</highlight></codeline>
<codeline lineno="947"><highlight class="comment">-----------------</highlight></codeline>
<codeline lineno="948"><highlight class="comment"></highlight></codeline>
<codeline lineno="949"><highlight class="comment">Functions<sp/>that<sp/>take<sp/>objects<sp/>as<sp/>arguments<sp/>normally<sp/>don&apos;t<sp/>check<sp/>for<sp/>nil</highlight></codeline>
<codeline lineno="950"><highlight class="comment">arguments,<sp/>but<sp/>they<sp/>do<sp/>check<sp/>the<sp/>type<sp/>of<sp/>the<sp/>argument,<sp/>and<sp/>return<sp/>an</highlight></codeline>
<codeline lineno="951"><highlight class="comment">error<sp/>if<sp/>the<sp/>function<sp/>doesn&apos;t<sp/>apply<sp/>to<sp/>the<sp/>type.</highlight></codeline>
<codeline lineno="952"><highlight class="comment"></highlight></codeline>
<codeline lineno="953"><highlight class="comment">Failure<sp/>Modes</highlight></codeline>
<codeline lineno="954"><highlight class="comment">-------------</highlight></codeline>
<codeline lineno="955"><highlight class="comment"></highlight></codeline>
<codeline lineno="956"><highlight class="comment">Functions<sp/>may<sp/>fail<sp/>for<sp/>a<sp/>variety<sp/>of<sp/>reasons,<sp/>including<sp/>running<sp/>out<sp/>of</highlight></codeline>
<codeline lineno="957"><highlight class="comment">memory.<sp/><sp/>This<sp/>is<sp/>communicated<sp/>to<sp/>the<sp/>caller<sp/>in<sp/>two<sp/>ways:<sp/>an<sp/>error<sp/>string</highlight></codeline>
<codeline lineno="958"><highlight class="comment">is<sp/>set<sp/>(see<sp/>errors.h),<sp/>and<sp/>the<sp/>function<sp/>result<sp/>differs:<sp/>functions<sp/>that</highlight></codeline>
<codeline lineno="959"><highlight class="comment">normally<sp/>return<sp/>a<sp/>pointer<sp/>return<sp/>NULL<sp/>for<sp/>failure,<sp/>functions<sp/>returning</highlight></codeline>
<codeline lineno="960"><highlight class="comment">an<sp/>integer<sp/>return<sp/>-1<sp/>(which<sp/>could<sp/>be<sp/>a<sp/>legal<sp/>return<sp/>value<sp/>too!),<sp/>and</highlight></codeline>
<codeline lineno="961"><highlight class="comment">other<sp/>functions<sp/>return<sp/>0<sp/>for<sp/>success<sp/>and<sp/>-1<sp/>for<sp/>failure.</highlight></codeline>
<codeline lineno="962"><highlight class="comment">Callers<sp/>should<sp/>always<sp/>check<sp/>for<sp/>errors<sp/>before<sp/>using<sp/>the<sp/>result.<sp/><sp/>If</highlight></codeline>
<codeline lineno="963"><highlight class="comment">an<sp/>error<sp/>was<sp/>set,<sp/>the<sp/>caller<sp/>must<sp/>either<sp/>explicitly<sp/>clear<sp/>it,<sp/>or<sp/>pass</highlight></codeline>
<codeline lineno="964"><highlight class="comment">the<sp/>error<sp/>on<sp/>to<sp/>its<sp/>caller.</highlight></codeline>
<codeline lineno="965"><highlight class="comment"></highlight></codeline>
<codeline lineno="966"><highlight class="comment">Reference<sp/>Counts</highlight></codeline>
<codeline lineno="967"><highlight class="comment">----------------</highlight></codeline>
<codeline lineno="968"><highlight class="comment"></highlight></codeline>
<codeline lineno="969"><highlight class="comment">It<sp/>takes<sp/>a<sp/>while<sp/>to<sp/>get<sp/>used<sp/>to<sp/>the<sp/>proper<sp/>usage<sp/>of<sp/>reference<sp/>counts.</highlight></codeline>
<codeline lineno="970"><highlight class="comment"></highlight></codeline>
<codeline lineno="971"><highlight class="comment">Functions<sp/>that<sp/>create<sp/>an<sp/>object<sp/>set<sp/>the<sp/>reference<sp/>count<sp/>to<sp/>1;<sp/>such<sp/>new</highlight></codeline>
<codeline lineno="972"><highlight class="comment">objects<sp/>must<sp/>be<sp/>stored<sp/>somewhere<sp/>or<sp/>destroyed<sp/>again<sp/>with<sp/>Py_DECREF().</highlight></codeline>
<codeline lineno="973"><highlight class="comment">Some<sp/>functions<sp/>that<sp/>&apos;store&apos;<sp/>objects,<sp/>such<sp/>as<sp/>PyTuple_SetItem()<sp/>and</highlight></codeline>
<codeline lineno="974"><highlight class="comment">PyList_SetItem(),</highlight></codeline>
<codeline lineno="975"><highlight class="comment">don&apos;t<sp/>increment<sp/>the<sp/>reference<sp/>count<sp/>of<sp/>the<sp/>object,<sp/>since<sp/>the<sp/>most</highlight></codeline>
<codeline lineno="976"><highlight class="comment">frequent<sp/>use<sp/>is<sp/>to<sp/>store<sp/>a<sp/>fresh<sp/>object.<sp/><sp/>Functions<sp/>that<sp/>&apos;retrieve&apos;</highlight></codeline>
<codeline lineno="977"><highlight class="comment">objects,<sp/>such<sp/>as<sp/>PyTuple_GetItem()<sp/>and<sp/>PyDict_GetItemString(),<sp/>also</highlight></codeline>
<codeline lineno="978"><highlight class="comment">don&apos;t<sp/>increment</highlight></codeline>
<codeline lineno="979"><highlight class="comment">the<sp/>reference<sp/>count,<sp/>since<sp/>most<sp/>frequently<sp/>the<sp/>object<sp/>is<sp/>only<sp/>looked<sp/>at</highlight></codeline>
<codeline lineno="980"><highlight class="comment">quickly.<sp/><sp/>Thus,<sp/>to<sp/>retrieve<sp/>an<sp/>object<sp/>and<sp/>store<sp/>it<sp/>again,<sp/>the<sp/>caller</highlight></codeline>
<codeline lineno="981"><highlight class="comment">must<sp/>call<sp/>Py_INCREF()<sp/>explicitly.</highlight></codeline>
<codeline lineno="982"><highlight class="comment"></highlight></codeline>
<codeline lineno="983"><highlight class="comment">NOTE:<sp/>functions<sp/>that<sp/>&apos;consume&apos;<sp/>a<sp/>reference<sp/>count,<sp/>like</highlight></codeline>
<codeline lineno="984"><highlight class="comment">PyList_SetItem(),<sp/>consume<sp/>the<sp/>reference<sp/>even<sp/>if<sp/>the<sp/>object<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="985"><highlight class="comment">successfully<sp/>stored,<sp/>to<sp/>simplify<sp/>error<sp/>handling.</highlight></codeline>
<codeline lineno="986"><highlight class="comment"></highlight></codeline>
<codeline lineno="987"><highlight class="comment">It<sp/>seems<sp/>attractive<sp/>to<sp/>make<sp/>other<sp/>functions<sp/>that<sp/>take<sp/>an<sp/>object<sp/>as</highlight></codeline>
<codeline lineno="988"><highlight class="comment">argument<sp/>consume<sp/>a<sp/>reference<sp/>count;<sp/>however,<sp/>this<sp/>may<sp/>quickly<sp/>get</highlight></codeline>
<codeline lineno="989"><highlight class="comment">confusing<sp/>(even<sp/>the<sp/>current<sp/>practice<sp/>is<sp/>already<sp/>confusing).<sp/><sp/>Consider</highlight></codeline>
<codeline lineno="990"><highlight class="comment">it<sp/>carefully,<sp/>it<sp/>may<sp/>save<sp/>lots<sp/>of<sp/>calls<sp/>to<sp/>Py_INCREF()<sp/>and<sp/>Py_DECREF()<sp/>at</highlight></codeline>
<codeline lineno="991"><highlight class="comment">times.</highlight></codeline>
<codeline lineno="992"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Trashcan<sp/>mechanism,<sp/>thanks<sp/>to<sp/>Christian<sp/>Tismer.</highlight></codeline>
<codeline lineno="996"><highlight class="comment"></highlight></codeline>
<codeline lineno="997"><highlight class="comment">When<sp/>deallocating<sp/>a<sp/>container<sp/>object,<sp/>it&apos;s<sp/>possible<sp/>to<sp/>trigger<sp/>an<sp/>unbounded</highlight></codeline>
<codeline lineno="998"><highlight class="comment">chain<sp/>of<sp/>deallocations,<sp/>as<sp/>each<sp/>Py_DECREF<sp/>in<sp/>turn<sp/>drops<sp/>the<sp/>refcount<sp/>on<sp/>&quot;the</highlight></codeline>
<codeline lineno="999"><highlight class="comment">next&quot;<sp/>object<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>0.<sp/><sp/>This<sp/>can<sp/>easily<sp/>lead<sp/>to<sp/>stack<sp/>faults,<sp/>and</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">especially<sp/>in<sp/>threads<sp/>(which<sp/>typically<sp/>have<sp/>less<sp/>stack<sp/>space<sp/>to<sp/>work<sp/>with).</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"></highlight></codeline>
<codeline lineno="1002"><highlight class="comment">A<sp/>container<sp/>object<sp/>that<sp/>participates<sp/>in<sp/>cyclic<sp/>gc<sp/>can<sp/>avoid<sp/>this<sp/>by</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">bracketing<sp/>the<sp/>body<sp/>of<sp/>its<sp/>tp_dealloc<sp/>function<sp/>with<sp/>a<sp/>pair<sp/>of<sp/>macros:</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"></highlight></codeline>
<codeline lineno="1005"><highlight class="comment">static<sp/>void</highlight></codeline>
<codeline lineno="1006"><highlight class="comment">mytype_dealloc(mytype<sp/>*p)</highlight></codeline>
<codeline lineno="1007"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/>...<sp/>declarations<sp/>go<sp/>here<sp/>...</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"></highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/><sp/>PyObject_GC_UnTrack(p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>must<sp/>untrack<sp/>first</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_TRASHCAN_SAFE_BEGIN(p)</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/>...<sp/>The<sp/>body<sp/>of<sp/>the<sp/>deallocator<sp/>goes<sp/>here,<sp/>including<sp/>all<sp/>calls<sp/>...</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/><sp/>...<sp/>to<sp/>Py_DECREF<sp/>on<sp/>contained<sp/>objects.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/><sp/><sp/>Py_TRASHCAN_SAFE_END(p)</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"></highlight></codeline>
<codeline lineno="1017"><highlight class="comment">CAUTION:<sp/><sp/>Never<sp/>return<sp/>from<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>body!<sp/><sp/>If<sp/>the<sp/>body<sp/>needs<sp/>to</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">&quot;get<sp/>out<sp/>early&quot;,<sp/>put<sp/>a<sp/>label<sp/>immediately<sp/>before<sp/>the<sp/>Py_TRASHCAN_SAFE_END</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">call,<sp/>and<sp/>goto<sp/>it.<sp/><sp/>Else<sp/>the<sp/>call-depth<sp/>counter<sp/>(see<sp/>below)<sp/>will<sp/>stay</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">above<sp/>0<sp/>forever,<sp/>and<sp/>the<sp/>trashcan<sp/>will<sp/>never<sp/>get<sp/>emptied.</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"></highlight></codeline>
<codeline lineno="1022"><highlight class="comment">How<sp/>it<sp/>works:<sp/><sp/>The<sp/>BEGIN<sp/>macro<sp/>increments<sp/>a<sp/>call-depth<sp/>counter.<sp/><sp/>So<sp/>long</highlight></codeline>
<codeline lineno="1023"><highlight class="comment">as<sp/>this<sp/>counter<sp/>is<sp/>small,<sp/>the<sp/>body<sp/>of<sp/>the<sp/>deallocator<sp/>is<sp/>run<sp/>directly<sp/>without</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">further<sp/>ado.<sp/><sp/>But<sp/>if<sp/>the<sp/>counter<sp/>gets<sp/>large,<sp/>it<sp/>instead<sp/>adds<sp/>p<sp/>to<sp/>a<sp/>list<sp/>of</highlight></codeline>
<codeline lineno="1025"><highlight class="comment">objects<sp/>to<sp/>be<sp/>deallocated<sp/>later,<sp/>skips<sp/>the<sp/>body<sp/>of<sp/>the<sp/>deallocator,<sp/>and</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">resumes<sp/>execution<sp/>after<sp/>the<sp/>END<sp/>macro.<sp/><sp/>The<sp/>tp_dealloc<sp/>routine<sp/>then<sp/>returns</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">without<sp/>deallocating<sp/>anything<sp/>(and<sp/>so<sp/>unbounded<sp/>call-stack<sp/>depth<sp/>is<sp/>avoided).</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"></highlight></codeline>
<codeline lineno="1029"><highlight class="comment">When<sp/>the<sp/>call<sp/>stack<sp/>finishes<sp/>unwinding<sp/>again,<sp/>code<sp/>generated<sp/>by<sp/>the<sp/>END<sp/>macro</highlight></codeline>
<codeline lineno="1030"><highlight class="comment">notices<sp/>this,<sp/>and<sp/>calls<sp/>another<sp/>routine<sp/>to<sp/>deallocate<sp/>all<sp/>the<sp/>objects<sp/>that</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">may<sp/>have<sp/>been<sp/>added<sp/>to<sp/>the<sp/>list<sp/>of<sp/>deferred<sp/>deallocations.<sp/><sp/>In<sp/>effect,<sp/>a</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">chain<sp/>of<sp/>N<sp/>deallocations<sp/>is<sp/>broken<sp/>into<sp/>N<sp/>/<sp/>PyTrash_UNWIND_LEVEL<sp/>pieces,</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">with<sp/>the<sp/>call<sp/>stack<sp/>never<sp/>exceeding<sp/>a<sp/>depth<sp/>of<sp/>PyTrash_UNWIND_LEVEL.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>old<sp/>private<sp/>API,<sp/>invoked<sp/>by<sp/>the<sp/>macros<sp/>before<sp/>3.2.4.</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/>Kept<sp/>for<sp/>binary<sp/>compatibility<sp/>of<sp/>extensions<sp/>using<sp/>the<sp/>stable<sp/>ABI.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTrash_deposit_object(PyObject*);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTrash_destroy_chain(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">PyAPI_DATA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>_PyTrash_delete_nesting;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">PyAPI_DATA(PyObject<sp/>*)<sp/>_PyTrash_delete_later;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>new<sp/>thread-safe<sp/>private<sp/>API,<sp/>invoked<sp/>by<sp/>the<sp/>macros<sp/>below.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTrash_thread_deposit_object(PyObject*);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>_PyTrash_thread_destroy_chain(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PyTrash_UNWIND_LEVEL<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TRASHCAN_SAFE_BEGIN(op)<sp/>\</highlight></codeline>
<codeline lineno="1052"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1053"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*_tstate<sp/>=<sp/>PyThreadState_GET();<sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_tstate-&gt;trash_delete_nesting<sp/>&lt;<sp/>PyTrash_UNWIND_LEVEL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++_tstate-&gt;trash_delete_nesting;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>body<sp/>of<sp/>the<sp/>deallocator<sp/>is<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_TRASHCAN_SAFE_END(op)<sp/>\</highlight></codeline>
<codeline lineno="1058"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--_tstate-&gt;trash_delete_nesting;<sp/>\</highlight></codeline>
<codeline lineno="1059"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_tstate-&gt;trash_delete_later<sp/>&amp;&amp;<sp/>_tstate-&gt;trash_delete_nesting<sp/>&lt;=<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="1060"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyTrash_thread_destroy_chain();<sp/>\</highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1062"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PyTrash_thread_deposit_object((PyObject*)op);<sp/>\</highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">_PyDebugAllocatorStats(FILE<sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_blocks,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeof_block);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">_PyObject_DebugTypeStats(FILE<sp/>*out);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifndef<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_OBJECT_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/object.h"/>
  </compounddef>
</doxygen>
