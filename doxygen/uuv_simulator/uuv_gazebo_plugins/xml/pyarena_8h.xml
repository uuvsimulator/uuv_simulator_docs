<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="pyarena_8h" kind="file" language="C++">
    <compoundname>pyarena.h</compoundname>
    <includedby refid="_python_8h" local="yes">/usr/include/python3.6m/Python.h</includedby>
    <invincdepgraph>
      <node id="3410">
        <label>/usr/include/python3.6m/Imaging.h</label>
        <link refid="_imaging_8h_source"/>
      </node>
      <node id="3407">
        <label>/usr/include/python3.6m/pyarena.h</label>
        <link refid="pyarena_8h"/>
        <childnode refid="3408" relation="include">
        </childnode>
      </node>
      <node id="3411">
        <label>/usr/include/python3.6m/pgenheaders.h</label>
        <link refid="pgenheaders_8h_source"/>
      </node>
      <node id="3413">
        <label>venv/lib/python3.6/site-packages/lxml/includes/etree_defs.h</label>
        <link refid="etree__defs_8h_source"/>
      </node>
      <node id="3408">
        <label>/usr/include/python3.6m/Python.h</label>
        <link refid="_python_8h_source"/>
        <childnode refid="3409" relation="include">
        </childnode>
        <childnode refid="3411" relation="include">
        </childnode>
        <childnode refid="3412" relation="include">
        </childnode>
        <childnode refid="3413" relation="include">
        </childnode>
        <childnode refid="3414" relation="include">
        </childnode>
      </node>
      <node id="3414">
        <label>venv/lib/python3.6/site-packages/lxml/lxml.etree_api.h</label>
        <link refid="lxml_8etree__api_8h_source"/>
      </node>
      <node id="3409">
        <label>/usr/include/python3.6m/ImPlatform.h</label>
        <link refid="_im_platform_8h_source"/>
        <childnode refid="3410" relation="include">
        </childnode>
      </node>
      <node id="3412">
        <label>venv/lib/python3.6/site-packages/lxml/etree_api.h</label>
        <link refid="etree__api_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pyarena_8h_1a9edeb357fbb27333471022a0975adb7a" prot="public" static="no">
        <type>struct _arena</type>
        <definition>typedef struct _arena PyArena</definition>
        <argsstring></argsstring>
        <name>PyArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="80" column="1" bodyfile="/usr/include/python3.6m/pyarena.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pyarena_8h_1a854352f53b148adc24983a58a1866d66" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="51" column="1" bodyfile="/usr/include/python3.6m/pyarena.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pyarena_8h_1aa78af3c2da12d10b820e849a5a69e839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(PyArena *) PyArena_New(void)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>PyArena *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyarena_8h_1aa3cf08fe9e29e7f24022f319120f643e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void) PyArena_Free(PyArena *)</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyarena_8h_1a13a25a3534929ceefd7ea52ebaabfbfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(void *) PyArena_Malloc(PyArena *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pyarena_8h_1a064298a8f6c450fbbabb44886e8e35a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PyAPI_FUNC</definition>
        <argsstring>(int) PyArena_AddPyObject(PyArena *</argsstring>
        <name>PyAPI_FUNC</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/include/python3.6m/pyarena.h" line="57" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>An<sp/>arena-like<sp/>memory<sp/>interface<sp/>for<sp/>the<sp/>compiler.</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_PYARENA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_PYARENA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_arena<sp/>PyArena;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>PyArena_New()<sp/>and<sp/>PyArena_Free()<sp/>create<sp/>a<sp/>new<sp/>arena<sp/>and<sp/>free<sp/>it,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>respectively.<sp/><sp/>Once<sp/>an<sp/>arena<sp/>has<sp/>been<sp/>created,<sp/>it<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>allocate<sp/>memory<sp/>via<sp/>PyArena_Malloc().<sp/><sp/>Pointers<sp/>to<sp/>PyObject<sp/>can</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>also<sp/>be<sp/>registered<sp/>with<sp/>the<sp/>arena<sp/>via<sp/>PyArena_AddPyObject(),<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>arena<sp/>will<sp/>ensure<sp/>that<sp/>the<sp/>PyObjects<sp/>stay<sp/>alive<sp/>at<sp/>least<sp/>until</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyArena_Free()<sp/>is<sp/>called.<sp/><sp/>When<sp/>an<sp/>arena<sp/>is<sp/>freed,<sp/>all<sp/>the<sp/>memory<sp/>it</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>allocated<sp/>is<sp/>freed,<sp/>the<sp/>arena<sp/>releases<sp/>internal<sp/>references<sp/>to<sp/>registered</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyObject*,<sp/>and<sp/>none<sp/>of<sp/>its<sp/>pointers<sp/>are<sp/>valid.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>(tim)<sp/>What<sp/>does<sp/>&quot;none<sp/>of<sp/>its<sp/>pointers<sp/>are<sp/>valid&quot;<sp/>mean?<sp/><sp/>Does<sp/>it</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>mean<sp/>that<sp/>pointers<sp/>previously<sp/>obtained<sp/>via<sp/>PyArena_Malloc()<sp/>are</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>no<sp/>longer<sp/>valid?<sp/><sp/>(That&apos;s<sp/>clearly<sp/>true,<sp/>but<sp/>not<sp/>sure<sp/>that&apos;s<sp/>what</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>the<sp/>text<sp/>is<sp/>trying<sp/>to<sp/>say.)</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PyArena_New()<sp/>returns<sp/>an<sp/>arena<sp/>pointer.<sp/><sp/>On<sp/>error,<sp/>it</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>returns<sp/>a<sp/>negative<sp/>number<sp/>and<sp/>sets<sp/>an<sp/>exception.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>(tim):<sp/><sp/>Not<sp/>true.<sp/><sp/>On<sp/>error,<sp/>PyArena_New()<sp/>actually<sp/>returns<sp/>NULL,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>and<sp/>looks<sp/>like<sp/>it<sp/>may<sp/>or<sp/>may<sp/>not<sp/>set<sp/>an<sp/>exception<sp/>(e.g.,<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>internal<sp/>PyList_New(0)<sp/>returns<sp/>NULL,<sp/>PyArena_New()<sp/>passes<sp/>that<sp/>on</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>and<sp/>an<sp/>exception<sp/>is<sp/>set;<sp/>OTOH,<sp/>if<sp/>the<sp/>internal</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>block_new(DEFAULT_BLOCK_SIZE)<sp/>returns<sp/>NULL,<sp/>that&apos;s<sp/>passed<sp/>on<sp/>but</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>XXX<sp/>an<sp/>exception<sp/>is<sp/>not<sp/>set<sp/>in<sp/>that<sp/>case).</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>PyAPI_FUNC(PyArena<sp/>*)<sp/>PyArena_New(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>PyArena_Free(PyArena<sp/>*);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mostly<sp/>like<sp/>malloc(),<sp/>return<sp/>the<sp/>address<sp/>of<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>spanning</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>*<sp/>`size`<sp/>bytes,<sp/>or<sp/>return<sp/>NULL<sp/>(without<sp/>setting<sp/>an<sp/>exception)<sp/>if<sp/>enough</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>*<sp/>new<sp/>memory<sp/>can&apos;t<sp/>be<sp/>obtained.<sp/><sp/>Unlike<sp/>malloc(0),<sp/>PyArena_Malloc()<sp/>with</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>*<sp/>size=0<sp/>does<sp/>not<sp/>guarantee<sp/>to<sp/>return<sp/>a<sp/>unique<sp/>pointer<sp/>(the<sp/>pointer</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>*<sp/>returned<sp/>may<sp/>equal<sp/>one<sp/>or<sp/>more<sp/>other<sp/>pointers<sp/>obtained<sp/>from</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>*<sp/>PyArena_Malloc()).</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>pointers<sp/>obtained<sp/>via<sp/>PyArena_Malloc()<sp/>must<sp/>never<sp/>be<sp/>passed<sp/>to</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>system<sp/>free()<sp/>or<sp/>realloc(),<sp/>or<sp/>to<sp/>any<sp/>of<sp/>Python&apos;s<sp/>similar<sp/>memory-</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>*<sp/>management<sp/>functions.<sp/><sp/>PyArena_Malloc()-obtained<sp/>pointers<sp/>remain<sp/>valid</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/>*<sp/>until<sp/>PyArena_Free(ar)<sp/>is<sp/>called,<sp/>at<sp/>which<sp/>point<sp/>all<sp/>pointers<sp/>obtained</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>*<sp/>from<sp/>the<sp/>arena<sp/>`ar`<sp/>become<sp/>invalid<sp/>simultaneously.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>PyArena_Malloc(PyArena<sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>routine<sp/>isn&apos;t<sp/>a<sp/>proper<sp/>arena<sp/>allocation<sp/>routine.<sp/><sp/>It<sp/>takes</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>*<sp/>a<sp/>PyObject*<sp/>and<sp/>records<sp/>it<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>DECREFed<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>*<sp/>arena<sp/>is<sp/>freed.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>PyAPI_FUNC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>PyArena_AddPyObject(PyArena<sp/>*,<sp/><ref refid="struct__object" kindref="compound">PyObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!Py_PYARENA_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_LIMITED_API<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/usr/include/python3.6m/pyarena.h"/>
  </compounddef>
</doxygen>
